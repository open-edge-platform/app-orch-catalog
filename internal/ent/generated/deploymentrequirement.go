// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentrequirement"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// DeploymentRequirement is the model entity for the DeploymentRequirement schema.
type DeploymentRequirement struct {
	config
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentRequirementQuery when eager-loading is set.
	Edges                                        DeploymentRequirementEdges `json:"edges"`
	deployment_requirement_deployment_package_fk *uint64
	deployment_requirement_deployment_profile_fk *uint64
	profile_deployment_requirements              *uint64
	selectValues                                 sql.SelectValues
}

// DeploymentRequirementEdges holds the relations/edges for other nodes in the graph.
type DeploymentRequirementEdges struct {
	// Deployment Requirement must belong to one Application Profile
	ProfileFk *Profile `json:"profile_fk,omitempty"`
	// Deployment requirement refers to a Deployment Package
	DeploymentPackageFk *DeploymentPackage `json:"deployment_package_fk,omitempty"`
	// Deployment requirement may refer to a Deployment Profile
	DeploymentProfileFk *DeploymentProfile `json:"deployment_profile_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProfileFkOrErr returns the ProfileFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentRequirementEdges) ProfileFkOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.ProfileFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.ProfileFk, nil
	}
	return nil, &NotLoadedError{edge: "profile_fk"}
}

// DeploymentPackageFkOrErr returns the DeploymentPackageFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentRequirementEdges) DeploymentPackageFkOrErr() (*DeploymentPackage, error) {
	if e.loadedTypes[1] {
		if e.DeploymentPackageFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deploymentpackage.Label}
		}
		return e.DeploymentPackageFk, nil
	}
	return nil, &NotLoadedError{edge: "deployment_package_fk"}
}

// DeploymentProfileFkOrErr returns the DeploymentProfileFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentRequirementEdges) DeploymentProfileFkOrErr() (*DeploymentProfile, error) {
	if e.loadedTypes[2] {
		if e.DeploymentProfileFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deploymentprofile.Label}
		}
		return e.DeploymentProfileFk, nil
	}
	return nil, &NotLoadedError{edge: "deployment_profile_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeploymentRequirement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deploymentrequirement.FieldID:
			values[i] = new(sql.NullInt64)
		case deploymentrequirement.ForeignKeys[0]: // deployment_requirement_deployment_package_fk
			values[i] = new(sql.NullInt64)
		case deploymentrequirement.ForeignKeys[1]: // deployment_requirement_deployment_profile_fk
			values[i] = new(sql.NullInt64)
		case deploymentrequirement.ForeignKeys[2]: // profile_deployment_requirements
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeploymentRequirement fields.
func (dr *DeploymentRequirement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deploymentrequirement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dr.ID = uint64(value.Int64)
		case deploymentrequirement.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_requirement_deployment_package_fk", value)
			} else if value.Valid {
				dr.deployment_requirement_deployment_package_fk = new(uint64)
				*dr.deployment_requirement_deployment_package_fk = uint64(value.Int64)
			}
		case deploymentrequirement.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_requirement_deployment_profile_fk", value)
			} else if value.Valid {
				dr.deployment_requirement_deployment_profile_fk = new(uint64)
				*dr.deployment_requirement_deployment_profile_fk = uint64(value.Int64)
			}
		case deploymentrequirement.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profile_deployment_requirements", value)
			} else if value.Valid {
				dr.profile_deployment_requirements = new(uint64)
				*dr.profile_deployment_requirements = uint64(value.Int64)
			}
		default:
			dr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeploymentRequirement.
// This includes values selected through modifiers, order, etc.
func (dr *DeploymentRequirement) Value(name string) (ent.Value, error) {
	return dr.selectValues.Get(name)
}

// QueryProfileFk queries the "profile_fk" edge of the DeploymentRequirement entity.
func (dr *DeploymentRequirement) QueryProfileFk() *ProfileQuery {
	return NewDeploymentRequirementClient(dr.config).QueryProfileFk(dr)
}

// QueryDeploymentPackageFk queries the "deployment_package_fk" edge of the DeploymentRequirement entity.
func (dr *DeploymentRequirement) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	return NewDeploymentRequirementClient(dr.config).QueryDeploymentPackageFk(dr)
}

// QueryDeploymentProfileFk queries the "deployment_profile_fk" edge of the DeploymentRequirement entity.
func (dr *DeploymentRequirement) QueryDeploymentProfileFk() *DeploymentProfileQuery {
	return NewDeploymentRequirementClient(dr.config).QueryDeploymentProfileFk(dr)
}

// Update returns a builder for updating this DeploymentRequirement.
// Note that you need to call DeploymentRequirement.Unwrap() before calling this method if this DeploymentRequirement
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DeploymentRequirement) Update() *DeploymentRequirementUpdateOne {
	return NewDeploymentRequirementClient(dr.config).UpdateOne(dr)
}

// Unwrap unwraps the DeploymentRequirement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DeploymentRequirement) Unwrap() *DeploymentRequirement {
	_tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("generated: DeploymentRequirement is not a transactional entity")
	}
	dr.config.driver = _tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DeploymentRequirement) String() string {
	var builder strings.Builder
	builder.WriteString("DeploymentRequirement(")
	builder.WriteString(fmt.Sprintf("id=%v", dr.ID))
	builder.WriteByte(')')
	return builder.String()
}

// DeploymentRequirements is a parsable slice of DeploymentRequirement.
type DeploymentRequirements []*DeploymentRequirement
