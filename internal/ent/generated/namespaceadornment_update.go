// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespaceadornment"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// NamespaceAdornmentUpdate is the builder for updating NamespaceAdornment entities.
type NamespaceAdornmentUpdate struct {
	config
	hooks    []Hook
	mutation *NamespaceAdornmentMutation
}

// Where appends a list predicates to the NamespaceAdornmentUpdate builder.
func (nau *NamespaceAdornmentUpdate) Where(ps ...predicate.NamespaceAdornment) *NamespaceAdornmentUpdate {
	nau.mutation.Where(ps...)
	return nau
}

// SetType sets the "type" field.
func (nau *NamespaceAdornmentUpdate) SetType(s string) *NamespaceAdornmentUpdate {
	nau.mutation.SetType(s)
	return nau
}

// SetKey sets the "key" field.
func (nau *NamespaceAdornmentUpdate) SetKey(s string) *NamespaceAdornmentUpdate {
	nau.mutation.SetKey(s)
	return nau
}

// SetValue sets the "value" field.
func (nau *NamespaceAdornmentUpdate) SetValue(s string) *NamespaceAdornmentUpdate {
	nau.mutation.SetValue(s)
	return nau
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (nau *NamespaceAdornmentUpdate) SetNillableValue(s *string) *NamespaceAdornmentUpdate {
	if s != nil {
		nau.SetValue(*s)
	}
	return nau
}

// ClearValue clears the value of the "value" field.
func (nau *NamespaceAdornmentUpdate) ClearValue() *NamespaceAdornmentUpdate {
	nau.mutation.ClearValue()
	return nau
}

// SetNamespaceFkID sets the "namespace_fk" edge to the Namespace entity by ID.
func (nau *NamespaceAdornmentUpdate) SetNamespaceFkID(id uint64) *NamespaceAdornmentUpdate {
	nau.mutation.SetNamespaceFkID(id)
	return nau
}

// SetNamespaceFk sets the "namespace_fk" edge to the Namespace entity.
func (nau *NamespaceAdornmentUpdate) SetNamespaceFk(n *Namespace) *NamespaceAdornmentUpdate {
	return nau.SetNamespaceFkID(n.ID)
}

// Mutation returns the NamespaceAdornmentMutation object of the builder.
func (nau *NamespaceAdornmentUpdate) Mutation() *NamespaceAdornmentMutation {
	return nau.mutation
}

// ClearNamespaceFk clears the "namespace_fk" edge to the Namespace entity.
func (nau *NamespaceAdornmentUpdate) ClearNamespaceFk() *NamespaceAdornmentUpdate {
	nau.mutation.ClearNamespaceFk()
	return nau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nau *NamespaceAdornmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nau.sqlSave, nau.mutation, nau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nau *NamespaceAdornmentUpdate) SaveX(ctx context.Context) int {
	affected, err := nau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nau *NamespaceAdornmentUpdate) Exec(ctx context.Context) error {
	_, err := nau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nau *NamespaceAdornmentUpdate) ExecX(ctx context.Context) {
	if err := nau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nau *NamespaceAdornmentUpdate) check() error {
	if _, ok := nau.mutation.NamespaceFkID(); nau.mutation.NamespaceFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "NamespaceAdornment.namespace_fk"`)
	}
	return nil
}

func (nau *NamespaceAdornmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(namespaceadornment.Table, namespaceadornment.Columns, sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64))
	if ps := nau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nau.mutation.GetType(); ok {
		_spec.SetField(namespaceadornment.FieldType, field.TypeString, value)
	}
	if value, ok := nau.mutation.Key(); ok {
		_spec.SetField(namespaceadornment.FieldKey, field.TypeString, value)
	}
	if value, ok := nau.mutation.Value(); ok {
		_spec.SetField(namespaceadornment.FieldValue, field.TypeString, value)
	}
	if nau.mutation.ValueCleared() {
		_spec.ClearField(namespaceadornment.FieldValue, field.TypeString)
	}
	if nau.mutation.NamespaceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespaceadornment.NamespaceFkTable,
			Columns: []string{namespaceadornment.NamespaceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nau.mutation.NamespaceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespaceadornment.NamespaceFkTable,
			Columns: []string{namespaceadornment.NamespaceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespaceadornment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nau.mutation.done = true
	return n, nil
}

// NamespaceAdornmentUpdateOne is the builder for updating a single NamespaceAdornment entity.
type NamespaceAdornmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NamespaceAdornmentMutation
}

// SetType sets the "type" field.
func (nauo *NamespaceAdornmentUpdateOne) SetType(s string) *NamespaceAdornmentUpdateOne {
	nauo.mutation.SetType(s)
	return nauo
}

// SetKey sets the "key" field.
func (nauo *NamespaceAdornmentUpdateOne) SetKey(s string) *NamespaceAdornmentUpdateOne {
	nauo.mutation.SetKey(s)
	return nauo
}

// SetValue sets the "value" field.
func (nauo *NamespaceAdornmentUpdateOne) SetValue(s string) *NamespaceAdornmentUpdateOne {
	nauo.mutation.SetValue(s)
	return nauo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (nauo *NamespaceAdornmentUpdateOne) SetNillableValue(s *string) *NamespaceAdornmentUpdateOne {
	if s != nil {
		nauo.SetValue(*s)
	}
	return nauo
}

// ClearValue clears the value of the "value" field.
func (nauo *NamespaceAdornmentUpdateOne) ClearValue() *NamespaceAdornmentUpdateOne {
	nauo.mutation.ClearValue()
	return nauo
}

// SetNamespaceFkID sets the "namespace_fk" edge to the Namespace entity by ID.
func (nauo *NamespaceAdornmentUpdateOne) SetNamespaceFkID(id uint64) *NamespaceAdornmentUpdateOne {
	nauo.mutation.SetNamespaceFkID(id)
	return nauo
}

// SetNamespaceFk sets the "namespace_fk" edge to the Namespace entity.
func (nauo *NamespaceAdornmentUpdateOne) SetNamespaceFk(n *Namespace) *NamespaceAdornmentUpdateOne {
	return nauo.SetNamespaceFkID(n.ID)
}

// Mutation returns the NamespaceAdornmentMutation object of the builder.
func (nauo *NamespaceAdornmentUpdateOne) Mutation() *NamespaceAdornmentMutation {
	return nauo.mutation
}

// ClearNamespaceFk clears the "namespace_fk" edge to the Namespace entity.
func (nauo *NamespaceAdornmentUpdateOne) ClearNamespaceFk() *NamespaceAdornmentUpdateOne {
	nauo.mutation.ClearNamespaceFk()
	return nauo
}

// Where appends a list predicates to the NamespaceAdornmentUpdate builder.
func (nauo *NamespaceAdornmentUpdateOne) Where(ps ...predicate.NamespaceAdornment) *NamespaceAdornmentUpdateOne {
	nauo.mutation.Where(ps...)
	return nauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nauo *NamespaceAdornmentUpdateOne) Select(field string, fields ...string) *NamespaceAdornmentUpdateOne {
	nauo.fields = append([]string{field}, fields...)
	return nauo
}

// Save executes the query and returns the updated NamespaceAdornment entity.
func (nauo *NamespaceAdornmentUpdateOne) Save(ctx context.Context) (*NamespaceAdornment, error) {
	return withHooks(ctx, nauo.sqlSave, nauo.mutation, nauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nauo *NamespaceAdornmentUpdateOne) SaveX(ctx context.Context) *NamespaceAdornment {
	node, err := nauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nauo *NamespaceAdornmentUpdateOne) Exec(ctx context.Context) error {
	_, err := nauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nauo *NamespaceAdornmentUpdateOne) ExecX(ctx context.Context) {
	if err := nauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nauo *NamespaceAdornmentUpdateOne) check() error {
	if _, ok := nauo.mutation.NamespaceFkID(); nauo.mutation.NamespaceFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "NamespaceAdornment.namespace_fk"`)
	}
	return nil
}

func (nauo *NamespaceAdornmentUpdateOne) sqlSave(ctx context.Context) (_node *NamespaceAdornment, err error) {
	if err := nauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(namespaceadornment.Table, namespaceadornment.Columns, sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64))
	id, ok := nauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "NamespaceAdornment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, namespaceadornment.FieldID)
		for _, f := range fields {
			if !namespaceadornment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != namespaceadornment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nauo.mutation.GetType(); ok {
		_spec.SetField(namespaceadornment.FieldType, field.TypeString, value)
	}
	if value, ok := nauo.mutation.Key(); ok {
		_spec.SetField(namespaceadornment.FieldKey, field.TypeString, value)
	}
	if value, ok := nauo.mutation.Value(); ok {
		_spec.SetField(namespaceadornment.FieldValue, field.TypeString, value)
	}
	if nauo.mutation.ValueCleared() {
		_spec.ClearField(namespaceadornment.FieldValue, field.TypeString)
	}
	if nauo.mutation.NamespaceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespaceadornment.NamespaceFkTable,
			Columns: []string{namespaceadornment.NamespaceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nauo.mutation.NamespaceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespaceadornment.NamespaceFkTable,
			Columns: []string{namespaceadornment.NamespaceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NamespaceAdornment{config: nauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespaceadornment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nauo.mutation.done = true
	return _node, nil
}
