// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentrequirement"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// DeploymentRequirementCreate is the builder for creating a DeploymentRequirement entity.
type DeploymentRequirementCreate struct {
	config
	mutation *DeploymentRequirementMutation
	hooks    []Hook
}

// SetProfileFkID sets the "profile_fk" edge to the Profile entity by ID.
func (drc *DeploymentRequirementCreate) SetProfileFkID(id uint64) *DeploymentRequirementCreate {
	drc.mutation.SetProfileFkID(id)
	return drc
}

// SetProfileFk sets the "profile_fk" edge to the Profile entity.
func (drc *DeploymentRequirementCreate) SetProfileFk(p *Profile) *DeploymentRequirementCreate {
	return drc.SetProfileFkID(p.ID)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (drc *DeploymentRequirementCreate) SetDeploymentPackageFkID(id uint64) *DeploymentRequirementCreate {
	drc.mutation.SetDeploymentPackageFkID(id)
	return drc
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (drc *DeploymentRequirementCreate) SetDeploymentPackageFk(d *DeploymentPackage) *DeploymentRequirementCreate {
	return drc.SetDeploymentPackageFkID(d.ID)
}

// SetDeploymentProfileFkID sets the "deployment_profile_fk" edge to the DeploymentProfile entity by ID.
func (drc *DeploymentRequirementCreate) SetDeploymentProfileFkID(id uint64) *DeploymentRequirementCreate {
	drc.mutation.SetDeploymentProfileFkID(id)
	return drc
}

// SetNillableDeploymentProfileFkID sets the "deployment_profile_fk" edge to the DeploymentProfile entity by ID if the given value is not nil.
func (drc *DeploymentRequirementCreate) SetNillableDeploymentProfileFkID(id *uint64) *DeploymentRequirementCreate {
	if id != nil {
		drc = drc.SetDeploymentProfileFkID(*id)
	}
	return drc
}

// SetDeploymentProfileFk sets the "deployment_profile_fk" edge to the DeploymentProfile entity.
func (drc *DeploymentRequirementCreate) SetDeploymentProfileFk(d *DeploymentProfile) *DeploymentRequirementCreate {
	return drc.SetDeploymentProfileFkID(d.ID)
}

// Mutation returns the DeploymentRequirementMutation object of the builder.
func (drc *DeploymentRequirementCreate) Mutation() *DeploymentRequirementMutation {
	return drc.mutation
}

// Save creates the DeploymentRequirement in the database.
func (drc *DeploymentRequirementCreate) Save(ctx context.Context) (*DeploymentRequirement, error) {
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DeploymentRequirementCreate) SaveX(ctx context.Context) *DeploymentRequirement {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DeploymentRequirementCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DeploymentRequirementCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DeploymentRequirementCreate) check() error {
	if _, ok := drc.mutation.ProfileFkID(); !ok {
		return &ValidationError{Name: "profile_fk", err: errors.New(`generated: missing required edge "DeploymentRequirement.profile_fk"`)}
	}
	if _, ok := drc.mutation.DeploymentPackageFkID(); !ok {
		return &ValidationError{Name: "deployment_package_fk", err: errors.New(`generated: missing required edge "DeploymentRequirement.deployment_package_fk"`)}
	}
	return nil
}

func (drc *DeploymentRequirementCreate) sqlSave(ctx context.Context) (*DeploymentRequirement, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DeploymentRequirementCreate) createSpec() (*DeploymentRequirement, *sqlgraph.CreateSpec) {
	var (
		_node = &DeploymentRequirement{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(deploymentrequirement.Table, sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64))
	)
	if nodes := drc.mutation.ProfileFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentrequirement.ProfileFkTable,
			Columns: []string{deploymentrequirement.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_deployment_requirements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentPackageFkTable,
			Columns: []string{deploymentrequirement.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deployment_requirement_deployment_package_fk = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.DeploymentProfileFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentProfileFkTable,
			Columns: []string{deploymentrequirement.DeploymentProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deployment_requirement_deployment_profile_fk = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeploymentRequirementCreateBulk is the builder for creating many DeploymentRequirement entities in bulk.
type DeploymentRequirementCreateBulk struct {
	config
	builders []*DeploymentRequirementCreate
}

// Save creates the DeploymentRequirement entities in the database.
func (drcb *DeploymentRequirementCreateBulk) Save(ctx context.Context) ([]*DeploymentRequirement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DeploymentRequirement, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeploymentRequirementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DeploymentRequirementCreateBulk) SaveX(ctx context.Context) []*DeploymentRequirement {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DeploymentRequirementCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DeploymentRequirementCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}
