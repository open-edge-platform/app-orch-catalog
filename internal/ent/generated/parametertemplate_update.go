// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/parametertemplate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// ParameterTemplateUpdate is the builder for updating ParameterTemplate entities.
type ParameterTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *ParameterTemplateMutation
}

// Where appends a list predicates to the ParameterTemplateUpdate builder.
func (ptu *ParameterTemplateUpdate) Where(ps ...predicate.ParameterTemplate) *ParameterTemplateUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetName sets the "name" field.
func (ptu *ParameterTemplateUpdate) SetName(s string) *ParameterTemplateUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptu *ParameterTemplateUpdate) SetNillableName(s *string) *ParameterTemplateUpdate {
	if s != nil {
		ptu.SetName(*s)
	}
	return ptu
}

// SetDisplayName sets the "display_name" field.
func (ptu *ParameterTemplateUpdate) SetDisplayName(s string) *ParameterTemplateUpdate {
	ptu.mutation.SetDisplayName(s)
	return ptu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ptu *ParameterTemplateUpdate) SetNillableDisplayName(s *string) *ParameterTemplateUpdate {
	if s != nil {
		ptu.SetDisplayName(*s)
	}
	return ptu
}

// ClearDisplayName clears the value of the "display_name" field.
func (ptu *ParameterTemplateUpdate) ClearDisplayName() *ParameterTemplateUpdate {
	ptu.mutation.ClearDisplayName()
	return ptu
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (ptu *ParameterTemplateUpdate) SetDisplayNameLc(s string) *ParameterTemplateUpdate {
	ptu.mutation.SetDisplayNameLc(s)
	return ptu
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (ptu *ParameterTemplateUpdate) SetNillableDisplayNameLc(s *string) *ParameterTemplateUpdate {
	if s != nil {
		ptu.SetDisplayNameLc(*s)
	}
	return ptu
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (ptu *ParameterTemplateUpdate) ClearDisplayNameLc() *ParameterTemplateUpdate {
	ptu.mutation.ClearDisplayNameLc()
	return ptu
}

// SetDefault sets the "default" field.
func (ptu *ParameterTemplateUpdate) SetDefault(s string) *ParameterTemplateUpdate {
	ptu.mutation.SetDefault(s)
	return ptu
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (ptu *ParameterTemplateUpdate) SetNillableDefault(s *string) *ParameterTemplateUpdate {
	if s != nil {
		ptu.SetDefault(*s)
	}
	return ptu
}

// ClearDefault clears the value of the "default" field.
func (ptu *ParameterTemplateUpdate) ClearDefault() *ParameterTemplateUpdate {
	ptu.mutation.ClearDefault()
	return ptu
}

// SetType sets the "type" field.
func (ptu *ParameterTemplateUpdate) SetType(s string) *ParameterTemplateUpdate {
	ptu.mutation.SetType(s)
	return ptu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptu *ParameterTemplateUpdate) SetNillableType(s *string) *ParameterTemplateUpdate {
	if s != nil {
		ptu.SetType(*s)
	}
	return ptu
}

// ClearType clears the value of the "type" field.
func (ptu *ParameterTemplateUpdate) ClearType() *ParameterTemplateUpdate {
	ptu.mutation.ClearType()
	return ptu
}

// SetValidator sets the "validator" field.
func (ptu *ParameterTemplateUpdate) SetValidator(s string) *ParameterTemplateUpdate {
	ptu.mutation.SetValidator(s)
	return ptu
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (ptu *ParameterTemplateUpdate) SetNillableValidator(s *string) *ParameterTemplateUpdate {
	if s != nil {
		ptu.SetValidator(*s)
	}
	return ptu
}

// ClearValidator clears the value of the "validator" field.
func (ptu *ParameterTemplateUpdate) ClearValidator() *ParameterTemplateUpdate {
	ptu.mutation.ClearValidator()
	return ptu
}

// SetSuggestedValues sets the "suggested_values" field.
func (ptu *ParameterTemplateUpdate) SetSuggestedValues(s []string) *ParameterTemplateUpdate {
	ptu.mutation.SetSuggestedValues(s)
	return ptu
}

// AppendSuggestedValues appends s to the "suggested_values" field.
func (ptu *ParameterTemplateUpdate) AppendSuggestedValues(s []string) *ParameterTemplateUpdate {
	ptu.mutation.AppendSuggestedValues(s)
	return ptu
}

// ClearSuggestedValues clears the value of the "suggested_values" field.
func (ptu *ParameterTemplateUpdate) ClearSuggestedValues() *ParameterTemplateUpdate {
	ptu.mutation.ClearSuggestedValues()
	return ptu
}

// SetMandatory sets the "mandatory" field.
func (ptu *ParameterTemplateUpdate) SetMandatory(b bool) *ParameterTemplateUpdate {
	ptu.mutation.SetMandatory(b)
	return ptu
}

// SetNillableMandatory sets the "mandatory" field if the given value is not nil.
func (ptu *ParameterTemplateUpdate) SetNillableMandatory(b *bool) *ParameterTemplateUpdate {
	if b != nil {
		ptu.SetMandatory(*b)
	}
	return ptu
}

// ClearMandatory clears the value of the "mandatory" field.
func (ptu *ParameterTemplateUpdate) ClearMandatory() *ParameterTemplateUpdate {
	ptu.mutation.ClearMandatory()
	return ptu
}

// SetSecret sets the "secret" field.
func (ptu *ParameterTemplateUpdate) SetSecret(b bool) *ParameterTemplateUpdate {
	ptu.mutation.SetSecret(b)
	return ptu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (ptu *ParameterTemplateUpdate) SetNillableSecret(b *bool) *ParameterTemplateUpdate {
	if b != nil {
		ptu.SetSecret(*b)
	}
	return ptu
}

// ClearSecret clears the value of the "secret" field.
func (ptu *ParameterTemplateUpdate) ClearSecret() *ParameterTemplateUpdate {
	ptu.mutation.ClearSecret()
	return ptu
}

// SetProfileFkID sets the "profile_fk" edge to the Profile entity by ID.
func (ptu *ParameterTemplateUpdate) SetProfileFkID(id uint64) *ParameterTemplateUpdate {
	ptu.mutation.SetProfileFkID(id)
	return ptu
}

// SetProfileFk sets the "profile_fk" edge to the Profile entity.
func (ptu *ParameterTemplateUpdate) SetProfileFk(p *Profile) *ParameterTemplateUpdate {
	return ptu.SetProfileFkID(p.ID)
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (ptu *ParameterTemplateUpdate) AddProfileIDs(ids ...uint64) *ParameterTemplateUpdate {
	ptu.mutation.AddProfileIDs(ids...)
	return ptu
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (ptu *ParameterTemplateUpdate) AddProfiles(p ...*Profile) *ParameterTemplateUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddProfileIDs(ids...)
}

// Mutation returns the ParameterTemplateMutation object of the builder.
func (ptu *ParameterTemplateUpdate) Mutation() *ParameterTemplateMutation {
	return ptu.mutation
}

// ClearProfileFk clears the "profile_fk" edge to the Profile entity.
func (ptu *ParameterTemplateUpdate) ClearProfileFk() *ParameterTemplateUpdate {
	ptu.mutation.ClearProfileFk()
	return ptu
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (ptu *ParameterTemplateUpdate) ClearProfiles() *ParameterTemplateUpdate {
	ptu.mutation.ClearProfiles()
	return ptu
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (ptu *ParameterTemplateUpdate) RemoveProfileIDs(ids ...uint64) *ParameterTemplateUpdate {
	ptu.mutation.RemoveProfileIDs(ids...)
	return ptu
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (ptu *ParameterTemplateUpdate) RemoveProfiles(p ...*Profile) *ParameterTemplateUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ParameterTemplateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ParameterTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ParameterTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ParameterTemplateUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ParameterTemplateUpdate) check() error {
	if _, ok := ptu.mutation.ProfileFkID(); ptu.mutation.ProfileFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ParameterTemplate.profile_fk"`)
	}
	return nil
}

func (ptu *ParameterTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(parametertemplate.Table, parametertemplate.Columns, sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.SetField(parametertemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.DisplayName(); ok {
		_spec.SetField(parametertemplate.FieldDisplayName, field.TypeString, value)
	}
	if ptu.mutation.DisplayNameCleared() {
		_spec.ClearField(parametertemplate.FieldDisplayName, field.TypeString)
	}
	if value, ok := ptu.mutation.DisplayNameLc(); ok {
		_spec.SetField(parametertemplate.FieldDisplayNameLc, field.TypeString, value)
	}
	if ptu.mutation.DisplayNameLcCleared() {
		_spec.ClearField(parametertemplate.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := ptu.mutation.Default(); ok {
		_spec.SetField(parametertemplate.FieldDefault, field.TypeString, value)
	}
	if ptu.mutation.DefaultCleared() {
		_spec.ClearField(parametertemplate.FieldDefault, field.TypeString)
	}
	if value, ok := ptu.mutation.GetType(); ok {
		_spec.SetField(parametertemplate.FieldType, field.TypeString, value)
	}
	if ptu.mutation.TypeCleared() {
		_spec.ClearField(parametertemplate.FieldType, field.TypeString)
	}
	if value, ok := ptu.mutation.Validator(); ok {
		_spec.SetField(parametertemplate.FieldValidator, field.TypeString, value)
	}
	if ptu.mutation.ValidatorCleared() {
		_spec.ClearField(parametertemplate.FieldValidator, field.TypeString)
	}
	if value, ok := ptu.mutation.SuggestedValues(); ok {
		_spec.SetField(parametertemplate.FieldSuggestedValues, field.TypeJSON, value)
	}
	if value, ok := ptu.mutation.AppendedSuggestedValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, parametertemplate.FieldSuggestedValues, value)
		})
	}
	if ptu.mutation.SuggestedValuesCleared() {
		_spec.ClearField(parametertemplate.FieldSuggestedValues, field.TypeJSON)
	}
	if value, ok := ptu.mutation.Mandatory(); ok {
		_spec.SetField(parametertemplate.FieldMandatory, field.TypeBool, value)
	}
	if ptu.mutation.MandatoryCleared() {
		_spec.ClearField(parametertemplate.FieldMandatory, field.TypeBool)
	}
	if value, ok := ptu.mutation.Secret(); ok {
		_spec.SetField(parametertemplate.FieldSecret, field.TypeBool, value)
	}
	if ptu.mutation.SecretCleared() {
		_spec.ClearField(parametertemplate.FieldSecret, field.TypeBool)
	}
	if ptu.mutation.ProfileFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   parametertemplate.ProfileFkTable,
			Columns: []string{parametertemplate.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProfileFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   parametertemplate.ProfileFkTable,
			Columns: []string{parametertemplate.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parametertemplate.ProfilesTable,
			Columns: []string{parametertemplate.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !ptu.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parametertemplate.ProfilesTable,
			Columns: []string{parametertemplate.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parametertemplate.ProfilesTable,
			Columns: []string{parametertemplate.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parametertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ParameterTemplateUpdateOne is the builder for updating a single ParameterTemplate entity.
type ParameterTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParameterTemplateMutation
}

// SetName sets the "name" field.
func (ptuo *ParameterTemplateUpdateOne) SetName(s string) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptuo *ParameterTemplateUpdateOne) SetNillableName(s *string) *ParameterTemplateUpdateOne {
	if s != nil {
		ptuo.SetName(*s)
	}
	return ptuo
}

// SetDisplayName sets the "display_name" field.
func (ptuo *ParameterTemplateUpdateOne) SetDisplayName(s string) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetDisplayName(s)
	return ptuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ptuo *ParameterTemplateUpdateOne) SetNillableDisplayName(s *string) *ParameterTemplateUpdateOne {
	if s != nil {
		ptuo.SetDisplayName(*s)
	}
	return ptuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (ptuo *ParameterTemplateUpdateOne) ClearDisplayName() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearDisplayName()
	return ptuo
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (ptuo *ParameterTemplateUpdateOne) SetDisplayNameLc(s string) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetDisplayNameLc(s)
	return ptuo
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (ptuo *ParameterTemplateUpdateOne) SetNillableDisplayNameLc(s *string) *ParameterTemplateUpdateOne {
	if s != nil {
		ptuo.SetDisplayNameLc(*s)
	}
	return ptuo
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (ptuo *ParameterTemplateUpdateOne) ClearDisplayNameLc() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearDisplayNameLc()
	return ptuo
}

// SetDefault sets the "default" field.
func (ptuo *ParameterTemplateUpdateOne) SetDefault(s string) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetDefault(s)
	return ptuo
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (ptuo *ParameterTemplateUpdateOne) SetNillableDefault(s *string) *ParameterTemplateUpdateOne {
	if s != nil {
		ptuo.SetDefault(*s)
	}
	return ptuo
}

// ClearDefault clears the value of the "default" field.
func (ptuo *ParameterTemplateUpdateOne) ClearDefault() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearDefault()
	return ptuo
}

// SetType sets the "type" field.
func (ptuo *ParameterTemplateUpdateOne) SetType(s string) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetType(s)
	return ptuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptuo *ParameterTemplateUpdateOne) SetNillableType(s *string) *ParameterTemplateUpdateOne {
	if s != nil {
		ptuo.SetType(*s)
	}
	return ptuo
}

// ClearType clears the value of the "type" field.
func (ptuo *ParameterTemplateUpdateOne) ClearType() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearType()
	return ptuo
}

// SetValidator sets the "validator" field.
func (ptuo *ParameterTemplateUpdateOne) SetValidator(s string) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetValidator(s)
	return ptuo
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (ptuo *ParameterTemplateUpdateOne) SetNillableValidator(s *string) *ParameterTemplateUpdateOne {
	if s != nil {
		ptuo.SetValidator(*s)
	}
	return ptuo
}

// ClearValidator clears the value of the "validator" field.
func (ptuo *ParameterTemplateUpdateOne) ClearValidator() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearValidator()
	return ptuo
}

// SetSuggestedValues sets the "suggested_values" field.
func (ptuo *ParameterTemplateUpdateOne) SetSuggestedValues(s []string) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetSuggestedValues(s)
	return ptuo
}

// AppendSuggestedValues appends s to the "suggested_values" field.
func (ptuo *ParameterTemplateUpdateOne) AppendSuggestedValues(s []string) *ParameterTemplateUpdateOne {
	ptuo.mutation.AppendSuggestedValues(s)
	return ptuo
}

// ClearSuggestedValues clears the value of the "suggested_values" field.
func (ptuo *ParameterTemplateUpdateOne) ClearSuggestedValues() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearSuggestedValues()
	return ptuo
}

// SetMandatory sets the "mandatory" field.
func (ptuo *ParameterTemplateUpdateOne) SetMandatory(b bool) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetMandatory(b)
	return ptuo
}

// SetNillableMandatory sets the "mandatory" field if the given value is not nil.
func (ptuo *ParameterTemplateUpdateOne) SetNillableMandatory(b *bool) *ParameterTemplateUpdateOne {
	if b != nil {
		ptuo.SetMandatory(*b)
	}
	return ptuo
}

// ClearMandatory clears the value of the "mandatory" field.
func (ptuo *ParameterTemplateUpdateOne) ClearMandatory() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearMandatory()
	return ptuo
}

// SetSecret sets the "secret" field.
func (ptuo *ParameterTemplateUpdateOne) SetSecret(b bool) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetSecret(b)
	return ptuo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (ptuo *ParameterTemplateUpdateOne) SetNillableSecret(b *bool) *ParameterTemplateUpdateOne {
	if b != nil {
		ptuo.SetSecret(*b)
	}
	return ptuo
}

// ClearSecret clears the value of the "secret" field.
func (ptuo *ParameterTemplateUpdateOne) ClearSecret() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearSecret()
	return ptuo
}

// SetProfileFkID sets the "profile_fk" edge to the Profile entity by ID.
func (ptuo *ParameterTemplateUpdateOne) SetProfileFkID(id uint64) *ParameterTemplateUpdateOne {
	ptuo.mutation.SetProfileFkID(id)
	return ptuo
}

// SetProfileFk sets the "profile_fk" edge to the Profile entity.
func (ptuo *ParameterTemplateUpdateOne) SetProfileFk(p *Profile) *ParameterTemplateUpdateOne {
	return ptuo.SetProfileFkID(p.ID)
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (ptuo *ParameterTemplateUpdateOne) AddProfileIDs(ids ...uint64) *ParameterTemplateUpdateOne {
	ptuo.mutation.AddProfileIDs(ids...)
	return ptuo
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (ptuo *ParameterTemplateUpdateOne) AddProfiles(p ...*Profile) *ParameterTemplateUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddProfileIDs(ids...)
}

// Mutation returns the ParameterTemplateMutation object of the builder.
func (ptuo *ParameterTemplateUpdateOne) Mutation() *ParameterTemplateMutation {
	return ptuo.mutation
}

// ClearProfileFk clears the "profile_fk" edge to the Profile entity.
func (ptuo *ParameterTemplateUpdateOne) ClearProfileFk() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearProfileFk()
	return ptuo
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (ptuo *ParameterTemplateUpdateOne) ClearProfiles() *ParameterTemplateUpdateOne {
	ptuo.mutation.ClearProfiles()
	return ptuo
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (ptuo *ParameterTemplateUpdateOne) RemoveProfileIDs(ids ...uint64) *ParameterTemplateUpdateOne {
	ptuo.mutation.RemoveProfileIDs(ids...)
	return ptuo
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (ptuo *ParameterTemplateUpdateOne) RemoveProfiles(p ...*Profile) *ParameterTemplateUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveProfileIDs(ids...)
}

// Where appends a list predicates to the ParameterTemplateUpdate builder.
func (ptuo *ParameterTemplateUpdateOne) Where(ps ...predicate.ParameterTemplate) *ParameterTemplateUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ParameterTemplateUpdateOne) Select(field string, fields ...string) *ParameterTemplateUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ParameterTemplate entity.
func (ptuo *ParameterTemplateUpdateOne) Save(ctx context.Context) (*ParameterTemplate, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ParameterTemplateUpdateOne) SaveX(ctx context.Context) *ParameterTemplate {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ParameterTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ParameterTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ParameterTemplateUpdateOne) check() error {
	if _, ok := ptuo.mutation.ProfileFkID(); ptuo.mutation.ProfileFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ParameterTemplate.profile_fk"`)
	}
	return nil
}

func (ptuo *ParameterTemplateUpdateOne) sqlSave(ctx context.Context) (_node *ParameterTemplate, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(parametertemplate.Table, parametertemplate.Columns, sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ParameterTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parametertemplate.FieldID)
		for _, f := range fields {
			if !parametertemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != parametertemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.SetField(parametertemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.DisplayName(); ok {
		_spec.SetField(parametertemplate.FieldDisplayName, field.TypeString, value)
	}
	if ptuo.mutation.DisplayNameCleared() {
		_spec.ClearField(parametertemplate.FieldDisplayName, field.TypeString)
	}
	if value, ok := ptuo.mutation.DisplayNameLc(); ok {
		_spec.SetField(parametertemplate.FieldDisplayNameLc, field.TypeString, value)
	}
	if ptuo.mutation.DisplayNameLcCleared() {
		_spec.ClearField(parametertemplate.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := ptuo.mutation.Default(); ok {
		_spec.SetField(parametertemplate.FieldDefault, field.TypeString, value)
	}
	if ptuo.mutation.DefaultCleared() {
		_spec.ClearField(parametertemplate.FieldDefault, field.TypeString)
	}
	if value, ok := ptuo.mutation.GetType(); ok {
		_spec.SetField(parametertemplate.FieldType, field.TypeString, value)
	}
	if ptuo.mutation.TypeCleared() {
		_spec.ClearField(parametertemplate.FieldType, field.TypeString)
	}
	if value, ok := ptuo.mutation.Validator(); ok {
		_spec.SetField(parametertemplate.FieldValidator, field.TypeString, value)
	}
	if ptuo.mutation.ValidatorCleared() {
		_spec.ClearField(parametertemplate.FieldValidator, field.TypeString)
	}
	if value, ok := ptuo.mutation.SuggestedValues(); ok {
		_spec.SetField(parametertemplate.FieldSuggestedValues, field.TypeJSON, value)
	}
	if value, ok := ptuo.mutation.AppendedSuggestedValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, parametertemplate.FieldSuggestedValues, value)
		})
	}
	if ptuo.mutation.SuggestedValuesCleared() {
		_spec.ClearField(parametertemplate.FieldSuggestedValues, field.TypeJSON)
	}
	if value, ok := ptuo.mutation.Mandatory(); ok {
		_spec.SetField(parametertemplate.FieldMandatory, field.TypeBool, value)
	}
	if ptuo.mutation.MandatoryCleared() {
		_spec.ClearField(parametertemplate.FieldMandatory, field.TypeBool)
	}
	if value, ok := ptuo.mutation.Secret(); ok {
		_spec.SetField(parametertemplate.FieldSecret, field.TypeBool, value)
	}
	if ptuo.mutation.SecretCleared() {
		_spec.ClearField(parametertemplate.FieldSecret, field.TypeBool)
	}
	if ptuo.mutation.ProfileFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   parametertemplate.ProfileFkTable,
			Columns: []string{parametertemplate.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProfileFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   parametertemplate.ProfileFkTable,
			Columns: []string{parametertemplate.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parametertemplate.ProfilesTable,
			Columns: []string{parametertemplate.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !ptuo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parametertemplate.ProfilesTable,
			Columns: []string{parametertemplate.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parametertemplate.ProfilesTable,
			Columns: []string{parametertemplate.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ParameterTemplate{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parametertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
