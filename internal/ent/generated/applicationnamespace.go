// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationnamespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
)

// ApplicationNamespace is the model entity for the ApplicationNamespace schema.
type ApplicationNamespace struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Application namespace.
	Namespace string `json:"namespace,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicationNamespaceQuery when eager-loading is set.
	Edges                                     ApplicationNamespaceEdges `json:"edges"`
	application_namespace_source_fk           *uint64
	deployment_package_application_namespaces *uint64
	selectValues                              sql.SelectValues
}

// ApplicationNamespaceEdges holds the relations/edges for other nodes in the graph.
type ApplicationNamespaceEdges struct {
	// Application Namespace must belong to a Deployment Package
	DeploymentPackageFk *DeploymentPackage `json:"deployment_package_fk,omitempty"`
	// Source application for which this namespace applies
	SourceFk *Application `json:"source_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DeploymentPackageFkOrErr returns the DeploymentPackageFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationNamespaceEdges) DeploymentPackageFkOrErr() (*DeploymentPackage, error) {
	if e.loadedTypes[0] {
		if e.DeploymentPackageFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deploymentpackage.Label}
		}
		return e.DeploymentPackageFk, nil
	}
	return nil, &NotLoadedError{edge: "deployment_package_fk"}
}

// SourceFkOrErr returns the SourceFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationNamespaceEdges) SourceFkOrErr() (*Application, error) {
	if e.loadedTypes[1] {
		if e.SourceFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: application.Label}
		}
		return e.SourceFk, nil
	}
	return nil, &NotLoadedError{edge: "source_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicationNamespace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicationnamespace.FieldID:
			values[i] = new(sql.NullInt64)
		case applicationnamespace.FieldNamespace:
			values[i] = new(sql.NullString)
		case applicationnamespace.ForeignKeys[0]: // application_namespace_source_fk
			values[i] = new(sql.NullInt64)
		case applicationnamespace.ForeignKeys[1]: // deployment_package_application_namespaces
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicationNamespace fields.
func (an *ApplicationNamespace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicationnamespace.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			an.ID = uint64(value.Int64)
		case applicationnamespace.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				an.Namespace = value.String
			}
		case applicationnamespace.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field application_namespace_source_fk", value)
			} else if value.Valid {
				an.application_namespace_source_fk = new(uint64)
				*an.application_namespace_source_fk = uint64(value.Int64)
			}
		case applicationnamespace.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_package_application_namespaces", value)
			} else if value.Valid {
				an.deployment_package_application_namespaces = new(uint64)
				*an.deployment_package_application_namespaces = uint64(value.Int64)
			}
		default:
			an.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApplicationNamespace.
// This includes values selected through modifiers, order, etc.
func (an *ApplicationNamespace) Value(name string) (ent.Value, error) {
	return an.selectValues.Get(name)
}

// QueryDeploymentPackageFk queries the "deployment_package_fk" edge of the ApplicationNamespace entity.
func (an *ApplicationNamespace) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	return NewApplicationNamespaceClient(an.config).QueryDeploymentPackageFk(an)
}

// QuerySourceFk queries the "source_fk" edge of the ApplicationNamespace entity.
func (an *ApplicationNamespace) QuerySourceFk() *ApplicationQuery {
	return NewApplicationNamespaceClient(an.config).QuerySourceFk(an)
}

// Update returns a builder for updating this ApplicationNamespace.
// Note that you need to call ApplicationNamespace.Unwrap() before calling this method if this ApplicationNamespace
// was returned from a transaction, and the transaction was committed or rolled back.
func (an *ApplicationNamespace) Update() *ApplicationNamespaceUpdateOne {
	return NewApplicationNamespaceClient(an.config).UpdateOne(an)
}

// Unwrap unwraps the ApplicationNamespace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (an *ApplicationNamespace) Unwrap() *ApplicationNamespace {
	_tx, ok := an.config.driver.(*txDriver)
	if !ok {
		panic("generated: ApplicationNamespace is not a transactional entity")
	}
	an.config.driver = _tx.drv
	return an
}

// String implements the fmt.Stringer.
func (an *ApplicationNamespace) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicationNamespace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", an.ID))
	builder.WriteString("namespace=")
	builder.WriteString(an.Namespace)
	builder.WriteByte(')')
	return builder.String()
}

// ApplicationNamespaces is a parsable slice of ApplicationNamespace.
type ApplicationNamespaces []*ApplicationNamespace
