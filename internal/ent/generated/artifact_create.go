// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifact"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
)

// ArtifactCreate is the builder for creating a Artifact entity.
type ArtifactCreate struct {
	config
	mutation *ArtifactMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *ArtifactCreate) SetName(s string) *ArtifactCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDisplayName sets the "display_name" field.
func (ac *ArtifactCreate) SetDisplayName(s string) *ArtifactCreate {
	ac.mutation.SetDisplayName(s)
	return ac
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ac *ArtifactCreate) SetNillableDisplayName(s *string) *ArtifactCreate {
	if s != nil {
		ac.SetDisplayName(*s)
	}
	return ac
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (ac *ArtifactCreate) SetDisplayNameLc(s string) *ArtifactCreate {
	ac.mutation.SetDisplayNameLc(s)
	return ac
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (ac *ArtifactCreate) SetNillableDisplayNameLc(s *string) *ArtifactCreate {
	if s != nil {
		ac.SetDisplayNameLc(*s)
	}
	return ac
}

// SetDescription sets the "description" field.
func (ac *ArtifactCreate) SetDescription(s string) *ArtifactCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *ArtifactCreate) SetNillableDescription(s *string) *ArtifactCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetCreateTime sets the "create_time" field.
func (ac *ArtifactCreate) SetCreateTime(t time.Time) *ArtifactCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *ArtifactCreate) SetNillableCreateTime(t *time.Time) *ArtifactCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *ArtifactCreate) SetUpdateTime(t time.Time) *ArtifactCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *ArtifactCreate) SetNillableUpdateTime(t *time.Time) *ArtifactCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetProjectUUID sets the "project_uuid" field.
func (ac *ArtifactCreate) SetProjectUUID(s string) *ArtifactCreate {
	ac.mutation.SetProjectUUID(s)
	return ac
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (ac *ArtifactCreate) SetNillableProjectUUID(s *string) *ArtifactCreate {
	if s != nil {
		ac.SetProjectUUID(*s)
	}
	return ac
}

// SetMimeType sets the "mime_type" field.
func (ac *ArtifactCreate) SetMimeType(s string) *ArtifactCreate {
	ac.mutation.SetMimeType(s)
	return ac
}

// SetArtifact sets the "artifact" field.
func (ac *ArtifactCreate) SetArtifact(b []byte) *ArtifactCreate {
	ac.mutation.SetArtifact(b)
	return ac
}

// AddCaIconFkIDs adds the "ca_icon_fk" edge to the DeploymentPackage entity by IDs.
func (ac *ArtifactCreate) AddCaIconFkIDs(ids ...uint64) *ArtifactCreate {
	ac.mutation.AddCaIconFkIDs(ids...)
	return ac
}

// AddCaIconFk adds the "ca_icon_fk" edges to the DeploymentPackage entity.
func (ac *ArtifactCreate) AddCaIconFk(d ...*DeploymentPackage) *ArtifactCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddCaIconFkIDs(ids...)
}

// AddCaThumbnailFkIDs adds the "ca_thumbnail_fk" edge to the DeploymentPackage entity by IDs.
func (ac *ArtifactCreate) AddCaThumbnailFkIDs(ids ...uint64) *ArtifactCreate {
	ac.mutation.AddCaThumbnailFkIDs(ids...)
	return ac
}

// AddCaThumbnailFk adds the "ca_thumbnail_fk" edges to the DeploymentPackage entity.
func (ac *ArtifactCreate) AddCaThumbnailFk(d ...*DeploymentPackage) *ArtifactCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddCaThumbnailFkIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (ac *ArtifactCreate) Mutation() *ArtifactMutation {
	return ac.mutation
}

// Save creates the Artifact in the database.
func (ac *ArtifactCreate) Save(ctx context.Context) (*Artifact, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArtifactCreate) SaveX(ctx context.Context) *Artifact {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ArtifactCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ArtifactCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ArtifactCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := artifact.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := artifact.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.ProjectUUID(); !ok {
		v := artifact.DefaultProjectUUID
		ac.mutation.SetProjectUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ArtifactCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Artifact.name"`)}
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "Artifact.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "Artifact.update_time"`)}
	}
	if _, ok := ac.mutation.ProjectUUID(); !ok {
		return &ValidationError{Name: "project_uuid", err: errors.New(`generated: missing required field "Artifact.project_uuid"`)}
	}
	if _, ok := ac.mutation.MimeType(); !ok {
		return &ValidationError{Name: "mime_type", err: errors.New(`generated: missing required field "Artifact.mime_type"`)}
	}
	if _, ok := ac.mutation.Artifact(); !ok {
		return &ValidationError{Name: "artifact", err: errors.New(`generated: missing required field "Artifact.artifact"`)}
	}
	return nil
}

func (ac *ArtifactCreate) sqlSave(ctx context.Context) (*Artifact, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ArtifactCreate) createSpec() (*Artifact, *sqlgraph.CreateSpec) {
	var (
		_node = &Artifact{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(artifact.Table, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64))
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(artifact.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.DisplayName(); ok {
		_spec.SetField(artifact.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := ac.mutation.DisplayNameLc(); ok {
		_spec.SetField(artifact.FieldDisplayNameLc, field.TypeString, value)
		_node.DisplayNameLc = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(artifact.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(artifact.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(artifact.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.ProjectUUID(); ok {
		_spec.SetField(artifact.FieldProjectUUID, field.TypeString, value)
		_node.ProjectUUID = value
	}
	if value, ok := ac.mutation.MimeType(); ok {
		_spec.SetField(artifact.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := ac.mutation.Artifact(); ok {
		_spec.SetField(artifact.FieldArtifact, field.TypeBytes, value)
		_node.Artifact = value
	}
	if nodes := ac.mutation.CaIconFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaIconFkTable,
			Columns: artifact.CaIconFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CaThumbnailFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaThumbnailFkTable,
			Columns: artifact.CaThumbnailFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ArtifactCreateBulk is the builder for creating many Artifact entities in bulk.
type ArtifactCreateBulk struct {
	config
	builders []*ArtifactCreate
}

// Save creates the Artifact entities in the database.
func (acb *ArtifactCreateBulk) Save(ctx context.Context) ([]*Artifact, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Artifact, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArtifactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ArtifactCreateBulk) SaveX(ctx context.Context) []*Artifact {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ArtifactCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ArtifactCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
