// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationnamespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
)

// ApplicationNamespaceCreate is the builder for creating a ApplicationNamespace entity.
type ApplicationNamespaceCreate struct {
	config
	mutation *ApplicationNamespaceMutation
	hooks    []Hook
}

// SetNamespace sets the "namespace" field.
func (anc *ApplicationNamespaceCreate) SetNamespace(s string) *ApplicationNamespaceCreate {
	anc.mutation.SetNamespace(s)
	return anc
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (anc *ApplicationNamespaceCreate) SetDeploymentPackageFkID(id uint64) *ApplicationNamespaceCreate {
	anc.mutation.SetDeploymentPackageFkID(id)
	return anc
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (anc *ApplicationNamespaceCreate) SetDeploymentPackageFk(d *DeploymentPackage) *ApplicationNamespaceCreate {
	return anc.SetDeploymentPackageFkID(d.ID)
}

// SetSourceFkID sets the "source_fk" edge to the Application entity by ID.
func (anc *ApplicationNamespaceCreate) SetSourceFkID(id uint64) *ApplicationNamespaceCreate {
	anc.mutation.SetSourceFkID(id)
	return anc
}

// SetSourceFk sets the "source_fk" edge to the Application entity.
func (anc *ApplicationNamespaceCreate) SetSourceFk(a *Application) *ApplicationNamespaceCreate {
	return anc.SetSourceFkID(a.ID)
}

// Mutation returns the ApplicationNamespaceMutation object of the builder.
func (anc *ApplicationNamespaceCreate) Mutation() *ApplicationNamespaceMutation {
	return anc.mutation
}

// Save creates the ApplicationNamespace in the database.
func (anc *ApplicationNamespaceCreate) Save(ctx context.Context) (*ApplicationNamespace, error) {
	return withHooks(ctx, anc.sqlSave, anc.mutation, anc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (anc *ApplicationNamespaceCreate) SaveX(ctx context.Context) *ApplicationNamespace {
	v, err := anc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (anc *ApplicationNamespaceCreate) Exec(ctx context.Context) error {
	_, err := anc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anc *ApplicationNamespaceCreate) ExecX(ctx context.Context) {
	if err := anc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anc *ApplicationNamespaceCreate) check() error {
	if _, ok := anc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`generated: missing required field "ApplicationNamespace.namespace"`)}
	}
	if _, ok := anc.mutation.DeploymentPackageFkID(); !ok {
		return &ValidationError{Name: "deployment_package_fk", err: errors.New(`generated: missing required edge "ApplicationNamespace.deployment_package_fk"`)}
	}
	if _, ok := anc.mutation.SourceFkID(); !ok {
		return &ValidationError{Name: "source_fk", err: errors.New(`generated: missing required edge "ApplicationNamespace.source_fk"`)}
	}
	return nil
}

func (anc *ApplicationNamespaceCreate) sqlSave(ctx context.Context) (*ApplicationNamespace, error) {
	if err := anc.check(); err != nil {
		return nil, err
	}
	_node, _spec := anc.createSpec()
	if err := sqlgraph.CreateNode(ctx, anc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	anc.mutation.id = &_node.ID
	anc.mutation.done = true
	return _node, nil
}

func (anc *ApplicationNamespaceCreate) createSpec() (*ApplicationNamespace, *sqlgraph.CreateSpec) {
	var (
		_node = &ApplicationNamespace{config: anc.config}
		_spec = sqlgraph.NewCreateSpec(applicationnamespace.Table, sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64))
	)
	if value, ok := anc.mutation.Namespace(); ok {
		_spec.SetField(applicationnamespace.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if nodes := anc.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationnamespace.DeploymentPackageFkTable,
			Columns: []string{applicationnamespace.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deployment_package_application_namespaces = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := anc.mutation.SourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationnamespace.SourceFkTable,
			Columns: []string{applicationnamespace.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.application_namespace_source_fk = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicationNamespaceCreateBulk is the builder for creating many ApplicationNamespace entities in bulk.
type ApplicationNamespaceCreateBulk struct {
	config
	err      error
	builders []*ApplicationNamespaceCreate
}

// Save creates the ApplicationNamespace entities in the database.
func (ancb *ApplicationNamespaceCreateBulk) Save(ctx context.Context) ([]*ApplicationNamespace, error) {
	if ancb.err != nil {
		return nil, ancb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ancb.builders))
	nodes := make([]*ApplicationNamespace, len(ancb.builders))
	mutators := make([]Mutator, len(ancb.builders))
	for i := range ancb.builders {
		func(i int, root context.Context) {
			builder := ancb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicationNamespaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ancb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ancb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ancb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ancb *ApplicationNamespaceCreateBulk) SaveX(ctx context.Context) []*ApplicationNamespace {
	v, err := ancb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ancb *ApplicationNamespaceCreateBulk) Exec(ctx context.Context) error {
	_, err := ancb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ancb *ApplicationNamespaceCreateBulk) ExecX(ctx context.Context) {
	if err := ancb.Exec(ctx); err != nil {
		panic(err)
	}
}
