// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/commonmixin"
)

// CommonMixin is the model entity for the CommonMixin schema.
type CommonMixin struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// A unique name. Used in HTTP network paths.
	Name string `json:"name,omitempty"`
	// A display name.
	DisplayName string `json:"display_name,omitempty"`
	// Lowercase display name.
	DisplayNameLc string `json:"display_name_lc,omitempty"`
	// A description. Displayed on user interfaces.
	Description string `json:"description,omitempty"`
	// The creation timestamp.
	CreateTime time.Time `json:"create_time,omitempty"`
	// The last update timestamp.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommonMixin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commonmixin.FieldID:
			values[i] = new(sql.NullInt64)
		case commonmixin.FieldName, commonmixin.FieldDisplayName, commonmixin.FieldDisplayNameLc, commonmixin.FieldDescription:
			values[i] = new(sql.NullString)
		case commonmixin.FieldCreateTime, commonmixin.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommonMixin fields.
func (cm *CommonMixin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commonmixin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = uint64(value.Int64)
		case commonmixin.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cm.Name = value.String
			}
		case commonmixin.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				cm.DisplayName = value.String
			}
		case commonmixin.FieldDisplayNameLc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name_lc", values[i])
			} else if value.Valid {
				cm.DisplayNameLc = value.String
			}
		case commonmixin.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cm.Description = value.String
			}
		case commonmixin.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cm.CreateTime = value.Time
			}
		case commonmixin.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cm.UpdateTime = value.Time
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommonMixin.
// This includes values selected through modifiers, order, etc.
func (cm *CommonMixin) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// Update returns a builder for updating this CommonMixin.
// Note that you need to call CommonMixin.Unwrap() before calling this method if this CommonMixin
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *CommonMixin) Update() *CommonMixinUpdateOne {
	return NewCommonMixinClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the CommonMixin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *CommonMixin) Unwrap() *CommonMixin {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("generated: CommonMixin is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *CommonMixin) String() string {
	var builder strings.Builder
	builder.WriteString("CommonMixin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("name=")
	builder.WriteString(cm.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(cm.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("display_name_lc=")
	builder.WriteString(cm.DisplayNameLc)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cm.Description)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(cm.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cm.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CommonMixins is a parsable slice of CommonMixin.
type CommonMixins []*CommonMixin
