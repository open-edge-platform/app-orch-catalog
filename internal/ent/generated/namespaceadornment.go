// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespaceadornment"
)

// NamespaceAdornment is the model entity for the NamespaceAdornment schema.
type NamespaceAdornment struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Adornment type: label or annotation.
	Type string `json:"type,omitempty"`
	// Adornment key.
	Key string `json:"key,omitempty"`
	// Adornment value.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NamespaceAdornmentQuery when eager-loading is set.
	Edges                NamespaceAdornmentEdges `json:"edges"`
	namespace_adornments *uint64
	selectValues         sql.SelectValues
}

// NamespaceAdornmentEdges holds the relations/edges for other nodes in the graph.
type NamespaceAdornmentEdges struct {
	// Adornment must belong to a Namespace
	NamespaceFk *Namespace `json:"namespace_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NamespaceFkOrErr returns the NamespaceFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NamespaceAdornmentEdges) NamespaceFkOrErr() (*Namespace, error) {
	if e.loadedTypes[0] {
		if e.NamespaceFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: namespace.Label}
		}
		return e.NamespaceFk, nil
	}
	return nil, &NotLoadedError{edge: "namespace_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NamespaceAdornment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case namespaceadornment.FieldID:
			values[i] = new(sql.NullInt64)
		case namespaceadornment.FieldType, namespaceadornment.FieldKey, namespaceadornment.FieldValue:
			values[i] = new(sql.NullString)
		case namespaceadornment.ForeignKeys[0]: // namespace_adornments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NamespaceAdornment fields.
func (na *NamespaceAdornment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case namespaceadornment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			na.ID = uint64(value.Int64)
		case namespaceadornment.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				na.Type = value.String
			}
		case namespaceadornment.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				na.Key = value.String
			}
		case namespaceadornment.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				na.Value = value.String
			}
		case namespaceadornment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field namespace_adornments", value)
			} else if value.Valid {
				na.namespace_adornments = new(uint64)
				*na.namespace_adornments = uint64(value.Int64)
			}
		default:
			na.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the NamespaceAdornment.
// This includes values selected through modifiers, order, etc.
func (na *NamespaceAdornment) GetValue(name string) (ent.Value, error) {
	return na.selectValues.Get(name)
}

// QueryNamespaceFk queries the "namespace_fk" edge of the NamespaceAdornment entity.
func (na *NamespaceAdornment) QueryNamespaceFk() *NamespaceQuery {
	return NewNamespaceAdornmentClient(na.config).QueryNamespaceFk(na)
}

// Update returns a builder for updating this NamespaceAdornment.
// Note that you need to call NamespaceAdornment.Unwrap() before calling this method if this NamespaceAdornment
// was returned from a transaction, and the transaction was committed or rolled back.
func (na *NamespaceAdornment) Update() *NamespaceAdornmentUpdateOne {
	return NewNamespaceAdornmentClient(na.config).UpdateOne(na)
}

// Unwrap unwraps the NamespaceAdornment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (na *NamespaceAdornment) Unwrap() *NamespaceAdornment {
	_tx, ok := na.config.driver.(*txDriver)
	if !ok {
		panic("generated: NamespaceAdornment is not a transactional entity")
	}
	na.config.driver = _tx.drv
	return na
}

// String implements the fmt.Stringer.
func (na *NamespaceAdornment) String() string {
	var builder strings.Builder
	builder.WriteString("NamespaceAdornment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", na.ID))
	builder.WriteString("type=")
	builder.WriteString(na.Type)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(na.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(na.Value)
	builder.WriteByte(')')
	return builder.String()
}

// NamespaceAdornments is a parsable slice of NamespaceAdornment.
type NamespaceAdornments []*NamespaceAdornment
