// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentrequirement"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/parametertemplate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProfileCreate) SetName(s string) *ProfileCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDisplayName sets the "display_name" field.
func (pc *ProfileCreate) SetDisplayName(s string) *ProfileCreate {
	pc.mutation.SetDisplayName(s)
	return pc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableDisplayName(s *string) *ProfileCreate {
	if s != nil {
		pc.SetDisplayName(*s)
	}
	return pc
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (pc *ProfileCreate) SetDisplayNameLc(s string) *ProfileCreate {
	pc.mutation.SetDisplayNameLc(s)
	return pc
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableDisplayNameLc(s *string) *ProfileCreate {
	if s != nil {
		pc.SetDisplayNameLc(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProfileCreate) SetDescription(s string) *ProfileCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableDescription(s *string) *ProfileCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetCreateTime sets the "create_time" field.
func (pc *ProfileCreate) SetCreateTime(t time.Time) *ProfileCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableCreateTime(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *ProfileCreate) SetUpdateTime(t time.Time) *ProfileCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableUpdateTime(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetChartValues sets the "chart_values" field.
func (pc *ProfileCreate) SetChartValues(s string) *ProfileCreate {
	pc.mutation.SetChartValues(s)
	return pc
}

// SetApplicationFkID sets the "application_fk" edge to the Application entity by ID.
func (pc *ProfileCreate) SetApplicationFkID(id uint64) *ProfileCreate {
	pc.mutation.SetApplicationFkID(id)
	return pc
}

// SetApplicationFk sets the "application_fk" edge to the Application entity.
func (pc *ProfileCreate) SetApplicationFk(a *Application) *ProfileCreate {
	return pc.SetApplicationFkID(a.ID)
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (pc *ProfileCreate) AddDeploymentProfileIDs(ids ...uint64) *ProfileCreate {
	pc.mutation.AddDeploymentProfileIDs(ids...)
	return pc
}

// AddDeploymentProfiles adds the "deployment_profiles" edges to the DeploymentProfile entity.
func (pc *ProfileCreate) AddDeploymentProfiles(d ...*DeploymentProfile) *ProfileCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDeploymentProfileIDs(ids...)
}

// AddParameterTemplateIDs adds the "parameter_templates" edge to the ParameterTemplate entity by IDs.
func (pc *ProfileCreate) AddParameterTemplateIDs(ids ...uint64) *ProfileCreate {
	pc.mutation.AddParameterTemplateIDs(ids...)
	return pc
}

// AddParameterTemplates adds the "parameter_templates" edges to the ParameterTemplate entity.
func (pc *ProfileCreate) AddParameterTemplates(p ...*ParameterTemplate) *ProfileCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddParameterTemplateIDs(ids...)
}

// AddDeploymentRequirementIDs adds the "deployment_requirements" edge to the DeploymentRequirement entity by IDs.
func (pc *ProfileCreate) AddDeploymentRequirementIDs(ids ...uint64) *ProfileCreate {
	pc.mutation.AddDeploymentRequirementIDs(ids...)
	return pc
}

// AddDeploymentRequirements adds the "deployment_requirements" edges to the DeploymentRequirement entity.
func (pc *ProfileCreate) AddDeploymentRequirements(d ...*DeploymentRequirement) *ProfileCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDeploymentRequirementIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (pc *ProfileCreate) Mutation() *ProfileMutation {
	return pc.mutation
}

// Save creates the Profile in the database.
func (pc *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProfileCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProfileCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProfileCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := profile.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := profile.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfileCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Profile.name"`)}
	}
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "Profile.create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "Profile.update_time"`)}
	}
	if _, ok := pc.mutation.ChartValues(); !ok {
		return &ValidationError{Name: "chart_values", err: errors.New(`generated: missing required field "Profile.chart_values"`)}
	}
	if _, ok := pc.mutation.ApplicationFkID(); !ok {
		return &ValidationError{Name: "application_fk", err: errors.New(`generated: missing required edge "Profile.application_fk"`)}
	}
	return nil
}

func (pc *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProfileCreate) createSpec() (*Profile, *sqlgraph.CreateSpec) {
	var (
		_node = &Profile{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(profile.Table, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(profile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.DisplayName(); ok {
		_spec.SetField(profile.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := pc.mutation.DisplayNameLc(); ok {
		_spec.SetField(profile.FieldDisplayNameLc, field.TypeString, value)
		_node.DisplayNameLc = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(profile.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.SetField(profile.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.SetField(profile.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.ChartValues(); ok {
		_spec.SetField(profile.FieldChartValues, field.TypeString, value)
		_node.ChartValues = value
	}
	if nodes := pc.mutation.ApplicationFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.ApplicationFkTable,
			Columns: []string{profile.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.application_profiles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DeploymentProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.DeploymentProfilesTable,
			Columns: profile.DeploymentProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ParameterTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.ParameterTemplatesTable,
			Columns: []string{profile.ParameterTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DeploymentRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.DeploymentRequirementsTable,
			Columns: []string{profile.DeploymentRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfileCreateBulk is the builder for creating many Profile entities in bulk.
type ProfileCreateBulk struct {
	config
	builders []*ProfileCreate
}

// Save creates the Profile entities in the database.
func (pcb *ProfileCreateBulk) Save(ctx context.Context) ([]*Profile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Profile, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfileCreateBulk) SaveX(ctx context.Context) []*Profile {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProfileCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
