// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
)

// ApplicationDependency is the model entity for the ApplicationDependency schema.
type ApplicationDependency struct {
	config
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicationDependencyQuery when eager-loading is set.
	Edges                                       ApplicationDependencyEdges `json:"edges"`
	application_dependency_source_fk            *uint64
	application_dependency_target_fk            *uint64
	deployment_package_application_dependencies *uint64
	selectValues                                sql.SelectValues
}

// ApplicationDependencyEdges holds the relations/edges for other nodes in the graph.
type ApplicationDependencyEdges struct {
	// Application Dependency must belong to a Deployment Package
	DeploymentPackageFk *DeploymentPackage `json:"deployment_package_fk,omitempty"`
	// Source of application dependency
	SourceFk *Application `json:"source_fk,omitempty"`
	// Target of application dependency
	TargetFk *Application `json:"target_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DeploymentPackageFkOrErr returns the DeploymentPackageFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationDependencyEdges) DeploymentPackageFkOrErr() (*DeploymentPackage, error) {
	if e.loadedTypes[0] {
		if e.DeploymentPackageFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deploymentpackage.Label}
		}
		return e.DeploymentPackageFk, nil
	}
	return nil, &NotLoadedError{edge: "deployment_package_fk"}
}

// SourceFkOrErr returns the SourceFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationDependencyEdges) SourceFkOrErr() (*Application, error) {
	if e.loadedTypes[1] {
		if e.SourceFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: application.Label}
		}
		return e.SourceFk, nil
	}
	return nil, &NotLoadedError{edge: "source_fk"}
}

// TargetFkOrErr returns the TargetFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationDependencyEdges) TargetFkOrErr() (*Application, error) {
	if e.loadedTypes[2] {
		if e.TargetFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: application.Label}
		}
		return e.TargetFk, nil
	}
	return nil, &NotLoadedError{edge: "target_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicationDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicationdependency.FieldID:
			values[i] = new(sql.NullInt64)
		case applicationdependency.ForeignKeys[0]: // application_dependency_source_fk
			values[i] = new(sql.NullInt64)
		case applicationdependency.ForeignKeys[1]: // application_dependency_target_fk
			values[i] = new(sql.NullInt64)
		case applicationdependency.ForeignKeys[2]: // deployment_package_application_dependencies
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicationDependency fields.
func (ad *ApplicationDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicationdependency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ad.ID = uint64(value.Int64)
		case applicationdependency.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field application_dependency_source_fk", value)
			} else if value.Valid {
				ad.application_dependency_source_fk = new(uint64)
				*ad.application_dependency_source_fk = uint64(value.Int64)
			}
		case applicationdependency.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field application_dependency_target_fk", value)
			} else if value.Valid {
				ad.application_dependency_target_fk = new(uint64)
				*ad.application_dependency_target_fk = uint64(value.Int64)
			}
		case applicationdependency.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_package_application_dependencies", value)
			} else if value.Valid {
				ad.deployment_package_application_dependencies = new(uint64)
				*ad.deployment_package_application_dependencies = uint64(value.Int64)
			}
		default:
			ad.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApplicationDependency.
// This includes values selected through modifiers, order, etc.
func (ad *ApplicationDependency) Value(name string) (ent.Value, error) {
	return ad.selectValues.Get(name)
}

// QueryDeploymentPackageFk queries the "deployment_package_fk" edge of the ApplicationDependency entity.
func (ad *ApplicationDependency) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	return NewApplicationDependencyClient(ad.config).QueryDeploymentPackageFk(ad)
}

// QuerySourceFk queries the "source_fk" edge of the ApplicationDependency entity.
func (ad *ApplicationDependency) QuerySourceFk() *ApplicationQuery {
	return NewApplicationDependencyClient(ad.config).QuerySourceFk(ad)
}

// QueryTargetFk queries the "target_fk" edge of the ApplicationDependency entity.
func (ad *ApplicationDependency) QueryTargetFk() *ApplicationQuery {
	return NewApplicationDependencyClient(ad.config).QueryTargetFk(ad)
}

// Update returns a builder for updating this ApplicationDependency.
// Note that you need to call ApplicationDependency.Unwrap() before calling this method if this ApplicationDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (ad *ApplicationDependency) Update() *ApplicationDependencyUpdateOne {
	return NewApplicationDependencyClient(ad.config).UpdateOne(ad)
}

// Unwrap unwraps the ApplicationDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ad *ApplicationDependency) Unwrap() *ApplicationDependency {
	_tx, ok := ad.config.driver.(*txDriver)
	if !ok {
		panic("generated: ApplicationDependency is not a transactional entity")
	}
	ad.config.driver = _tx.drv
	return ad
}

// String implements the fmt.Stringer.
func (ad *ApplicationDependency) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicationDependency(")
	builder.WriteString(fmt.Sprintf("id=%v", ad.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ApplicationDependencies is a parsable slice of ApplicationDependency.
type ApplicationDependencies []*ApplicationDependency
