// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifact"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ArtifactUpdate is the builder for updating Artifact entities.
type ArtifactUpdate struct {
	config
	hooks    []Hook
	mutation *ArtifactMutation
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (au *ArtifactUpdate) Where(ps ...predicate.Artifact) *ArtifactUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *ArtifactUpdate) SetName(s string) *ArtifactUpdate {
	au.mutation.SetName(s)
	return au
}

// SetDisplayName sets the "display_name" field.
func (au *ArtifactUpdate) SetDisplayName(s string) *ArtifactUpdate {
	au.mutation.SetDisplayName(s)
	return au
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDisplayName(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetDisplayName(*s)
	}
	return au
}

// ClearDisplayName clears the value of the "display_name" field.
func (au *ArtifactUpdate) ClearDisplayName() *ArtifactUpdate {
	au.mutation.ClearDisplayName()
	return au
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (au *ArtifactUpdate) SetDisplayNameLc(s string) *ArtifactUpdate {
	au.mutation.SetDisplayNameLc(s)
	return au
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDisplayNameLc(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetDisplayNameLc(*s)
	}
	return au
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (au *ArtifactUpdate) ClearDisplayNameLc() *ArtifactUpdate {
	au.mutation.ClearDisplayNameLc()
	return au
}

// SetDescription sets the "description" field.
func (au *ArtifactUpdate) SetDescription(s string) *ArtifactUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableDescription(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *ArtifactUpdate) ClearDescription() *ArtifactUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *ArtifactUpdate) SetUpdateTime(t time.Time) *ArtifactUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetProjectUUID sets the "project_uuid" field.
func (au *ArtifactUpdate) SetProjectUUID(s string) *ArtifactUpdate {
	au.mutation.SetProjectUUID(s)
	return au
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableProjectUUID(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetProjectUUID(*s)
	}
	return au
}

// SetMimeType sets the "mime_type" field.
func (au *ArtifactUpdate) SetMimeType(s string) *ArtifactUpdate {
	au.mutation.SetMimeType(s)
	return au
}

// SetArtifact sets the "artifact" field.
func (au *ArtifactUpdate) SetArtifact(b []byte) *ArtifactUpdate {
	au.mutation.SetArtifact(b)
	return au
}

// AddCaIconFkIDs adds the "ca_icon_fk" edge to the DeploymentPackage entity by IDs.
func (au *ArtifactUpdate) AddCaIconFkIDs(ids ...uint64) *ArtifactUpdate {
	au.mutation.AddCaIconFkIDs(ids...)
	return au
}

// AddCaIconFk adds the "ca_icon_fk" edges to the DeploymentPackage entity.
func (au *ArtifactUpdate) AddCaIconFk(d ...*DeploymentPackage) *ArtifactUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddCaIconFkIDs(ids...)
}

// AddCaThumbnailFkIDs adds the "ca_thumbnail_fk" edge to the DeploymentPackage entity by IDs.
func (au *ArtifactUpdate) AddCaThumbnailFkIDs(ids ...uint64) *ArtifactUpdate {
	au.mutation.AddCaThumbnailFkIDs(ids...)
	return au
}

// AddCaThumbnailFk adds the "ca_thumbnail_fk" edges to the DeploymentPackage entity.
func (au *ArtifactUpdate) AddCaThumbnailFk(d ...*DeploymentPackage) *ArtifactUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddCaThumbnailFkIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (au *ArtifactUpdate) Mutation() *ArtifactMutation {
	return au.mutation
}

// ClearCaIconFk clears all "ca_icon_fk" edges to the DeploymentPackage entity.
func (au *ArtifactUpdate) ClearCaIconFk() *ArtifactUpdate {
	au.mutation.ClearCaIconFk()
	return au
}

// RemoveCaIconFkIDs removes the "ca_icon_fk" edge to DeploymentPackage entities by IDs.
func (au *ArtifactUpdate) RemoveCaIconFkIDs(ids ...uint64) *ArtifactUpdate {
	au.mutation.RemoveCaIconFkIDs(ids...)
	return au
}

// RemoveCaIconFk removes "ca_icon_fk" edges to DeploymentPackage entities.
func (au *ArtifactUpdate) RemoveCaIconFk(d ...*DeploymentPackage) *ArtifactUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveCaIconFkIDs(ids...)
}

// ClearCaThumbnailFk clears all "ca_thumbnail_fk" edges to the DeploymentPackage entity.
func (au *ArtifactUpdate) ClearCaThumbnailFk() *ArtifactUpdate {
	au.mutation.ClearCaThumbnailFk()
	return au
}

// RemoveCaThumbnailFkIDs removes the "ca_thumbnail_fk" edge to DeploymentPackage entities by IDs.
func (au *ArtifactUpdate) RemoveCaThumbnailFkIDs(ids ...uint64) *ArtifactUpdate {
	au.mutation.RemoveCaThumbnailFkIDs(ids...)
	return au
}

// RemoveCaThumbnailFk removes "ca_thumbnail_fk" edges to DeploymentPackage entities.
func (au *ArtifactUpdate) RemoveCaThumbnailFk(d ...*DeploymentPackage) *ArtifactUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveCaThumbnailFkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtifactUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtifactUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtifactUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtifactUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ArtifactUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := artifact.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

func (au *ArtifactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(artifact.Table, artifact.Columns, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(artifact.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.DisplayName(); ok {
		_spec.SetField(artifact.FieldDisplayName, field.TypeString, value)
	}
	if au.mutation.DisplayNameCleared() {
		_spec.ClearField(artifact.FieldDisplayName, field.TypeString)
	}
	if value, ok := au.mutation.DisplayNameLc(); ok {
		_spec.SetField(artifact.FieldDisplayNameLc, field.TypeString, value)
	}
	if au.mutation.DisplayNameLcCleared() {
		_spec.ClearField(artifact.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(artifact.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(artifact.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(artifact.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.ProjectUUID(); ok {
		_spec.SetField(artifact.FieldProjectUUID, field.TypeString, value)
	}
	if value, ok := au.mutation.MimeType(); ok {
		_spec.SetField(artifact.FieldMimeType, field.TypeString, value)
	}
	if value, ok := au.mutation.Artifact(); ok {
		_spec.SetField(artifact.FieldArtifact, field.TypeBytes, value)
	}
	if au.mutation.CaIconFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaIconFkTable,
			Columns: artifact.CaIconFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCaIconFkIDs(); len(nodes) > 0 && !au.mutation.CaIconFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaIconFkTable,
			Columns: artifact.CaIconFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CaIconFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaIconFkTable,
			Columns: artifact.CaIconFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CaThumbnailFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaThumbnailFkTable,
			Columns: artifact.CaThumbnailFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCaThumbnailFkIDs(); len(nodes) > 0 && !au.mutation.CaThumbnailFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaThumbnailFkTable,
			Columns: artifact.CaThumbnailFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CaThumbnailFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaThumbnailFkTable,
			Columns: artifact.CaThumbnailFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArtifactUpdateOne is the builder for updating a single Artifact entity.
type ArtifactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtifactMutation
}

// SetName sets the "name" field.
func (auo *ArtifactUpdateOne) SetName(s string) *ArtifactUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetDisplayName sets the "display_name" field.
func (auo *ArtifactUpdateOne) SetDisplayName(s string) *ArtifactUpdateOne {
	auo.mutation.SetDisplayName(s)
	return auo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDisplayName(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetDisplayName(*s)
	}
	return auo
}

// ClearDisplayName clears the value of the "display_name" field.
func (auo *ArtifactUpdateOne) ClearDisplayName() *ArtifactUpdateOne {
	auo.mutation.ClearDisplayName()
	return auo
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (auo *ArtifactUpdateOne) SetDisplayNameLc(s string) *ArtifactUpdateOne {
	auo.mutation.SetDisplayNameLc(s)
	return auo
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDisplayNameLc(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetDisplayNameLc(*s)
	}
	return auo
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (auo *ArtifactUpdateOne) ClearDisplayNameLc() *ArtifactUpdateOne {
	auo.mutation.ClearDisplayNameLc()
	return auo
}

// SetDescription sets the "description" field.
func (auo *ArtifactUpdateOne) SetDescription(s string) *ArtifactUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableDescription(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *ArtifactUpdateOne) ClearDescription() *ArtifactUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetUpdateTime sets the "update_time" field.
func (auo *ArtifactUpdateOne) SetUpdateTime(t time.Time) *ArtifactUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetProjectUUID sets the "project_uuid" field.
func (auo *ArtifactUpdateOne) SetProjectUUID(s string) *ArtifactUpdateOne {
	auo.mutation.SetProjectUUID(s)
	return auo
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableProjectUUID(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetProjectUUID(*s)
	}
	return auo
}

// SetMimeType sets the "mime_type" field.
func (auo *ArtifactUpdateOne) SetMimeType(s string) *ArtifactUpdateOne {
	auo.mutation.SetMimeType(s)
	return auo
}

// SetArtifact sets the "artifact" field.
func (auo *ArtifactUpdateOne) SetArtifact(b []byte) *ArtifactUpdateOne {
	auo.mutation.SetArtifact(b)
	return auo
}

// AddCaIconFkIDs adds the "ca_icon_fk" edge to the DeploymentPackage entity by IDs.
func (auo *ArtifactUpdateOne) AddCaIconFkIDs(ids ...uint64) *ArtifactUpdateOne {
	auo.mutation.AddCaIconFkIDs(ids...)
	return auo
}

// AddCaIconFk adds the "ca_icon_fk" edges to the DeploymentPackage entity.
func (auo *ArtifactUpdateOne) AddCaIconFk(d ...*DeploymentPackage) *ArtifactUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddCaIconFkIDs(ids...)
}

// AddCaThumbnailFkIDs adds the "ca_thumbnail_fk" edge to the DeploymentPackage entity by IDs.
func (auo *ArtifactUpdateOne) AddCaThumbnailFkIDs(ids ...uint64) *ArtifactUpdateOne {
	auo.mutation.AddCaThumbnailFkIDs(ids...)
	return auo
}

// AddCaThumbnailFk adds the "ca_thumbnail_fk" edges to the DeploymentPackage entity.
func (auo *ArtifactUpdateOne) AddCaThumbnailFk(d ...*DeploymentPackage) *ArtifactUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddCaThumbnailFkIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (auo *ArtifactUpdateOne) Mutation() *ArtifactMutation {
	return auo.mutation
}

// ClearCaIconFk clears all "ca_icon_fk" edges to the DeploymentPackage entity.
func (auo *ArtifactUpdateOne) ClearCaIconFk() *ArtifactUpdateOne {
	auo.mutation.ClearCaIconFk()
	return auo
}

// RemoveCaIconFkIDs removes the "ca_icon_fk" edge to DeploymentPackage entities by IDs.
func (auo *ArtifactUpdateOne) RemoveCaIconFkIDs(ids ...uint64) *ArtifactUpdateOne {
	auo.mutation.RemoveCaIconFkIDs(ids...)
	return auo
}

// RemoveCaIconFk removes "ca_icon_fk" edges to DeploymentPackage entities.
func (auo *ArtifactUpdateOne) RemoveCaIconFk(d ...*DeploymentPackage) *ArtifactUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveCaIconFkIDs(ids...)
}

// ClearCaThumbnailFk clears all "ca_thumbnail_fk" edges to the DeploymentPackage entity.
func (auo *ArtifactUpdateOne) ClearCaThumbnailFk() *ArtifactUpdateOne {
	auo.mutation.ClearCaThumbnailFk()
	return auo
}

// RemoveCaThumbnailFkIDs removes the "ca_thumbnail_fk" edge to DeploymentPackage entities by IDs.
func (auo *ArtifactUpdateOne) RemoveCaThumbnailFkIDs(ids ...uint64) *ArtifactUpdateOne {
	auo.mutation.RemoveCaThumbnailFkIDs(ids...)
	return auo
}

// RemoveCaThumbnailFk removes "ca_thumbnail_fk" edges to DeploymentPackage entities.
func (auo *ArtifactUpdateOne) RemoveCaThumbnailFk(d ...*DeploymentPackage) *ArtifactUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveCaThumbnailFkIDs(ids...)
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (auo *ArtifactUpdateOne) Where(ps ...predicate.Artifact) *ArtifactUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtifactUpdateOne) Select(field string, fields ...string) *ArtifactUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Artifact entity.
func (auo *ArtifactUpdateOne) Save(ctx context.Context) (*Artifact, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtifactUpdateOne) SaveX(ctx context.Context) *Artifact {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtifactUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtifactUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ArtifactUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := artifact.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

func (auo *ArtifactUpdateOne) sqlSave(ctx context.Context) (_node *Artifact, err error) {
	_spec := sqlgraph.NewUpdateSpec(artifact.Table, artifact.Columns, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Artifact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artifact.FieldID)
		for _, f := range fields {
			if !artifact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != artifact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(artifact.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.DisplayName(); ok {
		_spec.SetField(artifact.FieldDisplayName, field.TypeString, value)
	}
	if auo.mutation.DisplayNameCleared() {
		_spec.ClearField(artifact.FieldDisplayName, field.TypeString)
	}
	if value, ok := auo.mutation.DisplayNameLc(); ok {
		_spec.SetField(artifact.FieldDisplayNameLc, field.TypeString, value)
	}
	if auo.mutation.DisplayNameLcCleared() {
		_spec.ClearField(artifact.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(artifact.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(artifact.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(artifact.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ProjectUUID(); ok {
		_spec.SetField(artifact.FieldProjectUUID, field.TypeString, value)
	}
	if value, ok := auo.mutation.MimeType(); ok {
		_spec.SetField(artifact.FieldMimeType, field.TypeString, value)
	}
	if value, ok := auo.mutation.Artifact(); ok {
		_spec.SetField(artifact.FieldArtifact, field.TypeBytes, value)
	}
	if auo.mutation.CaIconFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaIconFkTable,
			Columns: artifact.CaIconFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCaIconFkIDs(); len(nodes) > 0 && !auo.mutation.CaIconFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaIconFkTable,
			Columns: artifact.CaIconFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CaIconFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaIconFkTable,
			Columns: artifact.CaIconFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CaThumbnailFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaThumbnailFkTable,
			Columns: artifact.CaThumbnailFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCaThumbnailFkIDs(); len(nodes) > 0 && !auo.mutation.CaThumbnailFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaThumbnailFkTable,
			Columns: artifact.CaThumbnailFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CaThumbnailFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.CaThumbnailFkTable,
			Columns: artifact.CaThumbnailFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Artifact{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
