// Code generated by ent, DO NOT EDIT.

package deploymentprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deploymentprofile type in the database.
	Label = "deployment_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDisplayNameLc holds the string denoting the display_name_lc field in the database.
	FieldDisplayNameLc = "display_name_lc"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeProfiles holds the string denoting the profiles edge name in mutations.
	EdgeProfiles = "profiles"
	// EdgeDeploymentPackageFk holds the string denoting the deployment_package_fk edge name in mutations.
	EdgeDeploymentPackageFk = "deployment_package_fk"
	// Table holds the table name of the deploymentprofile in the database.
	Table = "deployment_profiles"
	// ProfilesTable is the table that holds the profiles relation/edge. The primary key declared below.
	ProfilesTable = "deployment_profile_profiles"
	// ProfilesInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfilesInverseTable = "profiles"
	// DeploymentPackageFkTable is the table that holds the deployment_package_fk relation/edge.
	DeploymentPackageFkTable = "deployment_profiles"
	// DeploymentPackageFkInverseTable is the table name for the DeploymentPackage entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentpackage" package.
	DeploymentPackageFkInverseTable = "deployment_packages"
	// DeploymentPackageFkColumn is the table column denoting the deployment_package_fk relation/edge.
	DeploymentPackageFkColumn = "deployment_package_deployment_profiles"
)

// Columns holds all SQL columns for deploymentprofile fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDisplayNameLc,
	FieldDescription,
	FieldCreateTime,
	FieldUpdateTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "deployment_profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"deployment_package_deployment_profiles",
}

var (
	// ProfilesPrimaryKey and ProfilesColumn2 are the table columns denoting the
	// primary key for the profiles relation (M2M).
	ProfilesPrimaryKey = []string{"deployment_profile_id", "profile_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the DeploymentProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDisplayNameLc orders the results by the display_name_lc field.
func ByDisplayNameLc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayNameLc, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByProfilesCount orders the results by profiles count.
func ByProfilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfilesStep(), opts...)
	}
}

// ByProfiles orders the results by profiles terms.
func ByProfiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeploymentPackageFkField orders the results by deployment_package_fk field.
func ByDeploymentPackageFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentPackageFkStep(), sql.OrderByField(field, opts...))
	}
}
func newProfilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ProfilesTable, ProfilesPrimaryKey...),
	)
}
func newDeploymentPackageFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentPackageFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeploymentPackageFkTable, DeploymentPackageFkColumn),
	)
}
