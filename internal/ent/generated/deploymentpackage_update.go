// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationnamespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifact"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifactreference"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/extension"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// DeploymentPackageUpdate is the builder for updating DeploymentPackage entities.
type DeploymentPackageUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentPackageMutation
}

// Where appends a list predicates to the DeploymentPackageUpdate builder.
func (dpu *DeploymentPackageUpdate) Where(ps ...predicate.DeploymentPackage) *DeploymentPackageUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetName sets the "name" field.
func (dpu *DeploymentPackageUpdate) SetName(s string) *DeploymentPackageUpdate {
	dpu.mutation.SetName(s)
	return dpu
}

// SetDisplayName sets the "display_name" field.
func (dpu *DeploymentPackageUpdate) SetDisplayName(s string) *DeploymentPackageUpdate {
	dpu.mutation.SetDisplayName(s)
	return dpu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (dpu *DeploymentPackageUpdate) SetNillableDisplayName(s *string) *DeploymentPackageUpdate {
	if s != nil {
		dpu.SetDisplayName(*s)
	}
	return dpu
}

// ClearDisplayName clears the value of the "display_name" field.
func (dpu *DeploymentPackageUpdate) ClearDisplayName() *DeploymentPackageUpdate {
	dpu.mutation.ClearDisplayName()
	return dpu
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (dpu *DeploymentPackageUpdate) SetDisplayNameLc(s string) *DeploymentPackageUpdate {
	dpu.mutation.SetDisplayNameLc(s)
	return dpu
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (dpu *DeploymentPackageUpdate) SetNillableDisplayNameLc(s *string) *DeploymentPackageUpdate {
	if s != nil {
		dpu.SetDisplayNameLc(*s)
	}
	return dpu
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (dpu *DeploymentPackageUpdate) ClearDisplayNameLc() *DeploymentPackageUpdate {
	dpu.mutation.ClearDisplayNameLc()
	return dpu
}

// SetDescription sets the "description" field.
func (dpu *DeploymentPackageUpdate) SetDescription(s string) *DeploymentPackageUpdate {
	dpu.mutation.SetDescription(s)
	return dpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dpu *DeploymentPackageUpdate) SetNillableDescription(s *string) *DeploymentPackageUpdate {
	if s != nil {
		dpu.SetDescription(*s)
	}
	return dpu
}

// ClearDescription clears the value of the "description" field.
func (dpu *DeploymentPackageUpdate) ClearDescription() *DeploymentPackageUpdate {
	dpu.mutation.ClearDescription()
	return dpu
}

// SetUpdateTime sets the "update_time" field.
func (dpu *DeploymentPackageUpdate) SetUpdateTime(t time.Time) *DeploymentPackageUpdate {
	dpu.mutation.SetUpdateTime(t)
	return dpu
}

// SetProjectUUID sets the "project_uuid" field.
func (dpu *DeploymentPackageUpdate) SetProjectUUID(s string) *DeploymentPackageUpdate {
	dpu.mutation.SetProjectUUID(s)
	return dpu
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (dpu *DeploymentPackageUpdate) SetNillableProjectUUID(s *string) *DeploymentPackageUpdate {
	if s != nil {
		dpu.SetProjectUUID(*s)
	}
	return dpu
}

// SetVersion sets the "version" field.
func (dpu *DeploymentPackageUpdate) SetVersion(s string) *DeploymentPackageUpdate {
	dpu.mutation.SetVersion(s)
	return dpu
}

// SetIsDeployed sets the "is_deployed" field.
func (dpu *DeploymentPackageUpdate) SetIsDeployed(b bool) *DeploymentPackageUpdate {
	dpu.mutation.SetIsDeployed(b)
	return dpu
}

// SetNillableIsDeployed sets the "is_deployed" field if the given value is not nil.
func (dpu *DeploymentPackageUpdate) SetNillableIsDeployed(b *bool) *DeploymentPackageUpdate {
	if b != nil {
		dpu.SetIsDeployed(*b)
	}
	return dpu
}

// ClearIsDeployed clears the value of the "is_deployed" field.
func (dpu *DeploymentPackageUpdate) ClearIsDeployed() *DeploymentPackageUpdate {
	dpu.mutation.ClearIsDeployed()
	return dpu
}

// SetIsVisible sets the "is_visible" field.
func (dpu *DeploymentPackageUpdate) SetIsVisible(b bool) *DeploymentPackageUpdate {
	dpu.mutation.SetIsVisible(b)
	return dpu
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (dpu *DeploymentPackageUpdate) SetNillableIsVisible(b *bool) *DeploymentPackageUpdate {
	if b != nil {
		dpu.SetIsVisible(*b)
	}
	return dpu
}

// ClearIsVisible clears the value of the "is_visible" field.
func (dpu *DeploymentPackageUpdate) ClearIsVisible() *DeploymentPackageUpdate {
	dpu.mutation.ClearIsVisible()
	return dpu
}

// SetAllowsMultipleDeployments sets the "allows_multiple_deployments" field.
func (dpu *DeploymentPackageUpdate) SetAllowsMultipleDeployments(b bool) *DeploymentPackageUpdate {
	dpu.mutation.SetAllowsMultipleDeployments(b)
	return dpu
}

// SetNillableAllowsMultipleDeployments sets the "allows_multiple_deployments" field if the given value is not nil.
func (dpu *DeploymentPackageUpdate) SetNillableAllowsMultipleDeployments(b *bool) *DeploymentPackageUpdate {
	if b != nil {
		dpu.SetAllowsMultipleDeployments(*b)
	}
	return dpu
}

// ClearAllowsMultipleDeployments clears the value of the "allows_multiple_deployments" field.
func (dpu *DeploymentPackageUpdate) ClearAllowsMultipleDeployments() *DeploymentPackageUpdate {
	dpu.mutation.ClearAllowsMultipleDeployments()
	return dpu
}

// SetKind sets the "kind" field.
func (dpu *DeploymentPackageUpdate) SetKind(s string) *DeploymentPackageUpdate {
	dpu.mutation.SetKind(s)
	return dpu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (dpu *DeploymentPackageUpdate) SetNillableKind(s *string) *DeploymentPackageUpdate {
	if s != nil {
		dpu.SetKind(*s)
	}
	return dpu
}

// ClearKind clears the value of the "kind" field.
func (dpu *DeploymentPackageUpdate) ClearKind() *DeploymentPackageUpdate {
	dpu.mutation.ClearKind()
	return dpu
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (dpu *DeploymentPackageUpdate) AddDeploymentProfileIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.AddDeploymentProfileIDs(ids...)
	return dpu
}

// AddDeploymentProfiles adds the "deployment_profiles" edges to the DeploymentProfile entity.
func (dpu *DeploymentPackageUpdate) AddDeploymentProfiles(d ...*DeploymentProfile) *DeploymentPackageUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpu.AddDeploymentProfileIDs(ids...)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (dpu *DeploymentPackageUpdate) AddApplicationIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.AddApplicationIDs(ids...)
	return dpu
}

// AddApplications adds the "applications" edges to the Application entity.
func (dpu *DeploymentPackageUpdate) AddApplications(a ...*Application) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.AddApplicationIDs(ids...)
}

// AddIconIDs adds the "icon" edge to the Artifact entity by IDs.
func (dpu *DeploymentPackageUpdate) AddIconIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.AddIconIDs(ids...)
	return dpu
}

// AddIcon adds the "icon" edges to the Artifact entity.
func (dpu *DeploymentPackageUpdate) AddIcon(a ...*Artifact) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.AddIconIDs(ids...)
}

// AddThumbnailIDs adds the "thumbnail" edge to the Artifact entity by IDs.
func (dpu *DeploymentPackageUpdate) AddThumbnailIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.AddThumbnailIDs(ids...)
	return dpu
}

// AddThumbnail adds the "thumbnail" edges to the Artifact entity.
func (dpu *DeploymentPackageUpdate) AddThumbnail(a ...*Artifact) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.AddThumbnailIDs(ids...)
}

// SetDefaultProfileID sets the "default_profile" edge to the DeploymentProfile entity by ID.
func (dpu *DeploymentPackageUpdate) SetDefaultProfileID(id uint64) *DeploymentPackageUpdate {
	dpu.mutation.SetDefaultProfileID(id)
	return dpu
}

// SetNillableDefaultProfileID sets the "default_profile" edge to the DeploymentProfile entity by ID if the given value is not nil.
func (dpu *DeploymentPackageUpdate) SetNillableDefaultProfileID(id *uint64) *DeploymentPackageUpdate {
	if id != nil {
		dpu = dpu.SetDefaultProfileID(*id)
	}
	return dpu
}

// SetDefaultProfile sets the "default_profile" edge to the DeploymentProfile entity.
func (dpu *DeploymentPackageUpdate) SetDefaultProfile(d *DeploymentProfile) *DeploymentPackageUpdate {
	return dpu.SetDefaultProfileID(d.ID)
}

// AddApplicationDependencyIDs adds the "application_dependencies" edge to the ApplicationDependency entity by IDs.
func (dpu *DeploymentPackageUpdate) AddApplicationDependencyIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.AddApplicationDependencyIDs(ids...)
	return dpu
}

// AddApplicationDependencies adds the "application_dependencies" edges to the ApplicationDependency entity.
func (dpu *DeploymentPackageUpdate) AddApplicationDependencies(a ...*ApplicationDependency) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.AddApplicationDependencyIDs(ids...)
}

// AddApplicationNamespaceIDs adds the "application_namespaces" edge to the ApplicationNamespace entity by IDs.
func (dpu *DeploymentPackageUpdate) AddApplicationNamespaceIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.AddApplicationNamespaceIDs(ids...)
	return dpu
}

// AddApplicationNamespaces adds the "application_namespaces" edges to the ApplicationNamespace entity.
func (dpu *DeploymentPackageUpdate) AddApplicationNamespaces(a ...*ApplicationNamespace) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.AddApplicationNamespaceIDs(ids...)
}

// AddNamespaceIDs adds the "namespaces" edge to the Namespace entity by IDs.
func (dpu *DeploymentPackageUpdate) AddNamespaceIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.AddNamespaceIDs(ids...)
	return dpu
}

// AddNamespaces adds the "namespaces" edges to the Namespace entity.
func (dpu *DeploymentPackageUpdate) AddNamespaces(n ...*Namespace) *DeploymentPackageUpdate {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return dpu.AddNamespaceIDs(ids...)
}

// AddExtensionIDs adds the "extensions" edge to the Extension entity by IDs.
func (dpu *DeploymentPackageUpdate) AddExtensionIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.AddExtensionIDs(ids...)
	return dpu
}

// AddExtensions adds the "extensions" edges to the Extension entity.
func (dpu *DeploymentPackageUpdate) AddExtensions(e ...*Extension) *DeploymentPackageUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return dpu.AddExtensionIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the ArtifactReference entity by IDs.
func (dpu *DeploymentPackageUpdate) AddArtifactIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.AddArtifactIDs(ids...)
	return dpu
}

// AddArtifacts adds the "artifacts" edges to the ArtifactReference entity.
func (dpu *DeploymentPackageUpdate) AddArtifacts(a ...*ArtifactReference) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.AddArtifactIDs(ids...)
}

// Mutation returns the DeploymentPackageMutation object of the builder.
func (dpu *DeploymentPackageUpdate) Mutation() *DeploymentPackageMutation {
	return dpu.mutation
}

// ClearDeploymentProfiles clears all "deployment_profiles" edges to the DeploymentProfile entity.
func (dpu *DeploymentPackageUpdate) ClearDeploymentProfiles() *DeploymentPackageUpdate {
	dpu.mutation.ClearDeploymentProfiles()
	return dpu
}

// RemoveDeploymentProfileIDs removes the "deployment_profiles" edge to DeploymentProfile entities by IDs.
func (dpu *DeploymentPackageUpdate) RemoveDeploymentProfileIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.RemoveDeploymentProfileIDs(ids...)
	return dpu
}

// RemoveDeploymentProfiles removes "deployment_profiles" edges to DeploymentProfile entities.
func (dpu *DeploymentPackageUpdate) RemoveDeploymentProfiles(d ...*DeploymentProfile) *DeploymentPackageUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpu.RemoveDeploymentProfileIDs(ids...)
}

// ClearApplications clears all "applications" edges to the Application entity.
func (dpu *DeploymentPackageUpdate) ClearApplications() *DeploymentPackageUpdate {
	dpu.mutation.ClearApplications()
	return dpu
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (dpu *DeploymentPackageUpdate) RemoveApplicationIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.RemoveApplicationIDs(ids...)
	return dpu
}

// RemoveApplications removes "applications" edges to Application entities.
func (dpu *DeploymentPackageUpdate) RemoveApplications(a ...*Application) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.RemoveApplicationIDs(ids...)
}

// ClearIcon clears all "icon" edges to the Artifact entity.
func (dpu *DeploymentPackageUpdate) ClearIcon() *DeploymentPackageUpdate {
	dpu.mutation.ClearIcon()
	return dpu
}

// RemoveIconIDs removes the "icon" edge to Artifact entities by IDs.
func (dpu *DeploymentPackageUpdate) RemoveIconIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.RemoveIconIDs(ids...)
	return dpu
}

// RemoveIcon removes "icon" edges to Artifact entities.
func (dpu *DeploymentPackageUpdate) RemoveIcon(a ...*Artifact) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.RemoveIconIDs(ids...)
}

// ClearThumbnail clears all "thumbnail" edges to the Artifact entity.
func (dpu *DeploymentPackageUpdate) ClearThumbnail() *DeploymentPackageUpdate {
	dpu.mutation.ClearThumbnail()
	return dpu
}

// RemoveThumbnailIDs removes the "thumbnail" edge to Artifact entities by IDs.
func (dpu *DeploymentPackageUpdate) RemoveThumbnailIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.RemoveThumbnailIDs(ids...)
	return dpu
}

// RemoveThumbnail removes "thumbnail" edges to Artifact entities.
func (dpu *DeploymentPackageUpdate) RemoveThumbnail(a ...*Artifact) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.RemoveThumbnailIDs(ids...)
}

// ClearDefaultProfile clears the "default_profile" edge to the DeploymentProfile entity.
func (dpu *DeploymentPackageUpdate) ClearDefaultProfile() *DeploymentPackageUpdate {
	dpu.mutation.ClearDefaultProfile()
	return dpu
}

// ClearApplicationDependencies clears all "application_dependencies" edges to the ApplicationDependency entity.
func (dpu *DeploymentPackageUpdate) ClearApplicationDependencies() *DeploymentPackageUpdate {
	dpu.mutation.ClearApplicationDependencies()
	return dpu
}

// RemoveApplicationDependencyIDs removes the "application_dependencies" edge to ApplicationDependency entities by IDs.
func (dpu *DeploymentPackageUpdate) RemoveApplicationDependencyIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.RemoveApplicationDependencyIDs(ids...)
	return dpu
}

// RemoveApplicationDependencies removes "application_dependencies" edges to ApplicationDependency entities.
func (dpu *DeploymentPackageUpdate) RemoveApplicationDependencies(a ...*ApplicationDependency) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.RemoveApplicationDependencyIDs(ids...)
}

// ClearApplicationNamespaces clears all "application_namespaces" edges to the ApplicationNamespace entity.
func (dpu *DeploymentPackageUpdate) ClearApplicationNamespaces() *DeploymentPackageUpdate {
	dpu.mutation.ClearApplicationNamespaces()
	return dpu
}

// RemoveApplicationNamespaceIDs removes the "application_namespaces" edge to ApplicationNamespace entities by IDs.
func (dpu *DeploymentPackageUpdate) RemoveApplicationNamespaceIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.RemoveApplicationNamespaceIDs(ids...)
	return dpu
}

// RemoveApplicationNamespaces removes "application_namespaces" edges to ApplicationNamespace entities.
func (dpu *DeploymentPackageUpdate) RemoveApplicationNamespaces(a ...*ApplicationNamespace) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.RemoveApplicationNamespaceIDs(ids...)
}

// ClearNamespaces clears all "namespaces" edges to the Namespace entity.
func (dpu *DeploymentPackageUpdate) ClearNamespaces() *DeploymentPackageUpdate {
	dpu.mutation.ClearNamespaces()
	return dpu
}

// RemoveNamespaceIDs removes the "namespaces" edge to Namespace entities by IDs.
func (dpu *DeploymentPackageUpdate) RemoveNamespaceIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.RemoveNamespaceIDs(ids...)
	return dpu
}

// RemoveNamespaces removes "namespaces" edges to Namespace entities.
func (dpu *DeploymentPackageUpdate) RemoveNamespaces(n ...*Namespace) *DeploymentPackageUpdate {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return dpu.RemoveNamespaceIDs(ids...)
}

// ClearExtensions clears all "extensions" edges to the Extension entity.
func (dpu *DeploymentPackageUpdate) ClearExtensions() *DeploymentPackageUpdate {
	dpu.mutation.ClearExtensions()
	return dpu
}

// RemoveExtensionIDs removes the "extensions" edge to Extension entities by IDs.
func (dpu *DeploymentPackageUpdate) RemoveExtensionIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.RemoveExtensionIDs(ids...)
	return dpu
}

// RemoveExtensions removes "extensions" edges to Extension entities.
func (dpu *DeploymentPackageUpdate) RemoveExtensions(e ...*Extension) *DeploymentPackageUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return dpu.RemoveExtensionIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the ArtifactReference entity.
func (dpu *DeploymentPackageUpdate) ClearArtifacts() *DeploymentPackageUpdate {
	dpu.mutation.ClearArtifacts()
	return dpu
}

// RemoveArtifactIDs removes the "artifacts" edge to ArtifactReference entities by IDs.
func (dpu *DeploymentPackageUpdate) RemoveArtifactIDs(ids ...uint64) *DeploymentPackageUpdate {
	dpu.mutation.RemoveArtifactIDs(ids...)
	return dpu
}

// RemoveArtifacts removes "artifacts" edges to ArtifactReference entities.
func (dpu *DeploymentPackageUpdate) RemoveArtifacts(a ...*ArtifactReference) *DeploymentPackageUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpu.RemoveArtifactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DeploymentPackageUpdate) Save(ctx context.Context) (int, error) {
	dpu.defaults()
	return withHooks(ctx, dpu.sqlSave, dpu.mutation, dpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DeploymentPackageUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DeploymentPackageUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DeploymentPackageUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpu *DeploymentPackageUpdate) defaults() {
	if _, ok := dpu.mutation.UpdateTime(); !ok {
		v := deploymentpackage.UpdateDefaultUpdateTime()
		dpu.mutation.SetUpdateTime(v)
	}
}

func (dpu *DeploymentPackageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(deploymentpackage.Table, deploymentpackage.Columns, sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64))
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.Name(); ok {
		_spec.SetField(deploymentpackage.FieldName, field.TypeString, value)
	}
	if value, ok := dpu.mutation.DisplayName(); ok {
		_spec.SetField(deploymentpackage.FieldDisplayName, field.TypeString, value)
	}
	if dpu.mutation.DisplayNameCleared() {
		_spec.ClearField(deploymentpackage.FieldDisplayName, field.TypeString)
	}
	if value, ok := dpu.mutation.DisplayNameLc(); ok {
		_spec.SetField(deploymentpackage.FieldDisplayNameLc, field.TypeString, value)
	}
	if dpu.mutation.DisplayNameLcCleared() {
		_spec.ClearField(deploymentpackage.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := dpu.mutation.Description(); ok {
		_spec.SetField(deploymentpackage.FieldDescription, field.TypeString, value)
	}
	if dpu.mutation.DescriptionCleared() {
		_spec.ClearField(deploymentpackage.FieldDescription, field.TypeString)
	}
	if value, ok := dpu.mutation.UpdateTime(); ok {
		_spec.SetField(deploymentpackage.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dpu.mutation.ProjectUUID(); ok {
		_spec.SetField(deploymentpackage.FieldProjectUUID, field.TypeString, value)
	}
	if value, ok := dpu.mutation.Version(); ok {
		_spec.SetField(deploymentpackage.FieldVersion, field.TypeString, value)
	}
	if value, ok := dpu.mutation.IsDeployed(); ok {
		_spec.SetField(deploymentpackage.FieldIsDeployed, field.TypeBool, value)
	}
	if dpu.mutation.IsDeployedCleared() {
		_spec.ClearField(deploymentpackage.FieldIsDeployed, field.TypeBool)
	}
	if value, ok := dpu.mutation.IsVisible(); ok {
		_spec.SetField(deploymentpackage.FieldIsVisible, field.TypeBool, value)
	}
	if dpu.mutation.IsVisibleCleared() {
		_spec.ClearField(deploymentpackage.FieldIsVisible, field.TypeBool)
	}
	if value, ok := dpu.mutation.AllowsMultipleDeployments(); ok {
		_spec.SetField(deploymentpackage.FieldAllowsMultipleDeployments, field.TypeBool, value)
	}
	if dpu.mutation.AllowsMultipleDeploymentsCleared() {
		_spec.ClearField(deploymentpackage.FieldAllowsMultipleDeployments, field.TypeBool)
	}
	if value, ok := dpu.mutation.Kind(); ok {
		_spec.SetField(deploymentpackage.FieldKind, field.TypeString, value)
	}
	if dpu.mutation.KindCleared() {
		_spec.ClearField(deploymentpackage.FieldKind, field.TypeString)
	}
	if dpu.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.DeploymentProfilesTable,
			Columns: []string{deploymentpackage.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedDeploymentProfilesIDs(); len(nodes) > 0 && !dpu.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.DeploymentProfilesTable,
			Columns: []string{deploymentpackage.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.DeploymentProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.DeploymentProfilesTable,
			Columns: []string{deploymentpackage.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationsTable,
			Columns: deploymentpackage.ApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !dpu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationsTable,
			Columns: deploymentpackage.ApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationsTable,
			Columns: deploymentpackage.ApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.IconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.IconTable,
			Columns: deploymentpackage.IconPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedIconIDs(); len(nodes) > 0 && !dpu.mutation.IconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.IconTable,
			Columns: deploymentpackage.IconPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.IconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.IconTable,
			Columns: deploymentpackage.IconPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.ThumbnailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ThumbnailTable,
			Columns: deploymentpackage.ThumbnailPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedThumbnailIDs(); len(nodes) > 0 && !dpu.mutation.ThumbnailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ThumbnailTable,
			Columns: deploymentpackage.ThumbnailPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.ThumbnailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ThumbnailTable,
			Columns: deploymentpackage.ThumbnailPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.DefaultProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentpackage.DefaultProfileTable,
			Columns: []string{deploymentpackage.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.DefaultProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentpackage.DefaultProfileTable,
			Columns: []string{deploymentpackage.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.ApplicationDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationDependenciesTable,
			Columns: []string{deploymentpackage.ApplicationDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedApplicationDependenciesIDs(); len(nodes) > 0 && !dpu.mutation.ApplicationDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationDependenciesTable,
			Columns: []string{deploymentpackage.ApplicationDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.ApplicationDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationDependenciesTable,
			Columns: []string{deploymentpackage.ApplicationDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.ApplicationNamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationNamespacesTable,
			Columns: []string{deploymentpackage.ApplicationNamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedApplicationNamespacesIDs(); len(nodes) > 0 && !dpu.mutation.ApplicationNamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationNamespacesTable,
			Columns: []string{deploymentpackage.ApplicationNamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.ApplicationNamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationNamespacesTable,
			Columns: []string{deploymentpackage.ApplicationNamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.NamespacesTable,
			Columns: []string{deploymentpackage.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !dpu.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.NamespacesTable,
			Columns: []string{deploymentpackage.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.NamespacesTable,
			Columns: []string{deploymentpackage.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.ExtensionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ExtensionsTable,
			Columns: []string{deploymentpackage.ExtensionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedExtensionsIDs(); len(nodes) > 0 && !dpu.mutation.ExtensionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ExtensionsTable,
			Columns: []string{deploymentpackage.ExtensionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.ExtensionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ExtensionsTable,
			Columns: []string{deploymentpackage.ExtensionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ArtifactsTable,
			Columns: []string{deploymentpackage.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactreference.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !dpu.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ArtifactsTable,
			Columns: []string{deploymentpackage.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactreference.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ArtifactsTable,
			Columns: []string{deploymentpackage.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactreference.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentpackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dpu.mutation.done = true
	return n, nil
}

// DeploymentPackageUpdateOne is the builder for updating a single DeploymentPackage entity.
type DeploymentPackageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentPackageMutation
}

// SetName sets the "name" field.
func (dpuo *DeploymentPackageUpdateOne) SetName(s string) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetName(s)
	return dpuo
}

// SetDisplayName sets the "display_name" field.
func (dpuo *DeploymentPackageUpdateOne) SetDisplayName(s string) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetDisplayName(s)
	return dpuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (dpuo *DeploymentPackageUpdateOne) SetNillableDisplayName(s *string) *DeploymentPackageUpdateOne {
	if s != nil {
		dpuo.SetDisplayName(*s)
	}
	return dpuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (dpuo *DeploymentPackageUpdateOne) ClearDisplayName() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearDisplayName()
	return dpuo
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (dpuo *DeploymentPackageUpdateOne) SetDisplayNameLc(s string) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetDisplayNameLc(s)
	return dpuo
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (dpuo *DeploymentPackageUpdateOne) SetNillableDisplayNameLc(s *string) *DeploymentPackageUpdateOne {
	if s != nil {
		dpuo.SetDisplayNameLc(*s)
	}
	return dpuo
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (dpuo *DeploymentPackageUpdateOne) ClearDisplayNameLc() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearDisplayNameLc()
	return dpuo
}

// SetDescription sets the "description" field.
func (dpuo *DeploymentPackageUpdateOne) SetDescription(s string) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetDescription(s)
	return dpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dpuo *DeploymentPackageUpdateOne) SetNillableDescription(s *string) *DeploymentPackageUpdateOne {
	if s != nil {
		dpuo.SetDescription(*s)
	}
	return dpuo
}

// ClearDescription clears the value of the "description" field.
func (dpuo *DeploymentPackageUpdateOne) ClearDescription() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearDescription()
	return dpuo
}

// SetUpdateTime sets the "update_time" field.
func (dpuo *DeploymentPackageUpdateOne) SetUpdateTime(t time.Time) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetUpdateTime(t)
	return dpuo
}

// SetProjectUUID sets the "project_uuid" field.
func (dpuo *DeploymentPackageUpdateOne) SetProjectUUID(s string) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetProjectUUID(s)
	return dpuo
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (dpuo *DeploymentPackageUpdateOne) SetNillableProjectUUID(s *string) *DeploymentPackageUpdateOne {
	if s != nil {
		dpuo.SetProjectUUID(*s)
	}
	return dpuo
}

// SetVersion sets the "version" field.
func (dpuo *DeploymentPackageUpdateOne) SetVersion(s string) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetVersion(s)
	return dpuo
}

// SetIsDeployed sets the "is_deployed" field.
func (dpuo *DeploymentPackageUpdateOne) SetIsDeployed(b bool) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetIsDeployed(b)
	return dpuo
}

// SetNillableIsDeployed sets the "is_deployed" field if the given value is not nil.
func (dpuo *DeploymentPackageUpdateOne) SetNillableIsDeployed(b *bool) *DeploymentPackageUpdateOne {
	if b != nil {
		dpuo.SetIsDeployed(*b)
	}
	return dpuo
}

// ClearIsDeployed clears the value of the "is_deployed" field.
func (dpuo *DeploymentPackageUpdateOne) ClearIsDeployed() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearIsDeployed()
	return dpuo
}

// SetIsVisible sets the "is_visible" field.
func (dpuo *DeploymentPackageUpdateOne) SetIsVisible(b bool) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetIsVisible(b)
	return dpuo
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (dpuo *DeploymentPackageUpdateOne) SetNillableIsVisible(b *bool) *DeploymentPackageUpdateOne {
	if b != nil {
		dpuo.SetIsVisible(*b)
	}
	return dpuo
}

// ClearIsVisible clears the value of the "is_visible" field.
func (dpuo *DeploymentPackageUpdateOne) ClearIsVisible() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearIsVisible()
	return dpuo
}

// SetAllowsMultipleDeployments sets the "allows_multiple_deployments" field.
func (dpuo *DeploymentPackageUpdateOne) SetAllowsMultipleDeployments(b bool) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetAllowsMultipleDeployments(b)
	return dpuo
}

// SetNillableAllowsMultipleDeployments sets the "allows_multiple_deployments" field if the given value is not nil.
func (dpuo *DeploymentPackageUpdateOne) SetNillableAllowsMultipleDeployments(b *bool) *DeploymentPackageUpdateOne {
	if b != nil {
		dpuo.SetAllowsMultipleDeployments(*b)
	}
	return dpuo
}

// ClearAllowsMultipleDeployments clears the value of the "allows_multiple_deployments" field.
func (dpuo *DeploymentPackageUpdateOne) ClearAllowsMultipleDeployments() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearAllowsMultipleDeployments()
	return dpuo
}

// SetKind sets the "kind" field.
func (dpuo *DeploymentPackageUpdateOne) SetKind(s string) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetKind(s)
	return dpuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (dpuo *DeploymentPackageUpdateOne) SetNillableKind(s *string) *DeploymentPackageUpdateOne {
	if s != nil {
		dpuo.SetKind(*s)
	}
	return dpuo
}

// ClearKind clears the value of the "kind" field.
func (dpuo *DeploymentPackageUpdateOne) ClearKind() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearKind()
	return dpuo
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (dpuo *DeploymentPackageUpdateOne) AddDeploymentProfileIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.AddDeploymentProfileIDs(ids...)
	return dpuo
}

// AddDeploymentProfiles adds the "deployment_profiles" edges to the DeploymentProfile entity.
func (dpuo *DeploymentPackageUpdateOne) AddDeploymentProfiles(d ...*DeploymentProfile) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpuo.AddDeploymentProfileIDs(ids...)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (dpuo *DeploymentPackageUpdateOne) AddApplicationIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.AddApplicationIDs(ids...)
	return dpuo
}

// AddApplications adds the "applications" edges to the Application entity.
func (dpuo *DeploymentPackageUpdateOne) AddApplications(a ...*Application) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.AddApplicationIDs(ids...)
}

// AddIconIDs adds the "icon" edge to the Artifact entity by IDs.
func (dpuo *DeploymentPackageUpdateOne) AddIconIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.AddIconIDs(ids...)
	return dpuo
}

// AddIcon adds the "icon" edges to the Artifact entity.
func (dpuo *DeploymentPackageUpdateOne) AddIcon(a ...*Artifact) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.AddIconIDs(ids...)
}

// AddThumbnailIDs adds the "thumbnail" edge to the Artifact entity by IDs.
func (dpuo *DeploymentPackageUpdateOne) AddThumbnailIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.AddThumbnailIDs(ids...)
	return dpuo
}

// AddThumbnail adds the "thumbnail" edges to the Artifact entity.
func (dpuo *DeploymentPackageUpdateOne) AddThumbnail(a ...*Artifact) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.AddThumbnailIDs(ids...)
}

// SetDefaultProfileID sets the "default_profile" edge to the DeploymentProfile entity by ID.
func (dpuo *DeploymentPackageUpdateOne) SetDefaultProfileID(id uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.SetDefaultProfileID(id)
	return dpuo
}

// SetNillableDefaultProfileID sets the "default_profile" edge to the DeploymentProfile entity by ID if the given value is not nil.
func (dpuo *DeploymentPackageUpdateOne) SetNillableDefaultProfileID(id *uint64) *DeploymentPackageUpdateOne {
	if id != nil {
		dpuo = dpuo.SetDefaultProfileID(*id)
	}
	return dpuo
}

// SetDefaultProfile sets the "default_profile" edge to the DeploymentProfile entity.
func (dpuo *DeploymentPackageUpdateOne) SetDefaultProfile(d *DeploymentProfile) *DeploymentPackageUpdateOne {
	return dpuo.SetDefaultProfileID(d.ID)
}

// AddApplicationDependencyIDs adds the "application_dependencies" edge to the ApplicationDependency entity by IDs.
func (dpuo *DeploymentPackageUpdateOne) AddApplicationDependencyIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.AddApplicationDependencyIDs(ids...)
	return dpuo
}

// AddApplicationDependencies adds the "application_dependencies" edges to the ApplicationDependency entity.
func (dpuo *DeploymentPackageUpdateOne) AddApplicationDependencies(a ...*ApplicationDependency) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.AddApplicationDependencyIDs(ids...)
}

// AddApplicationNamespaceIDs adds the "application_namespaces" edge to the ApplicationNamespace entity by IDs.
func (dpuo *DeploymentPackageUpdateOne) AddApplicationNamespaceIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.AddApplicationNamespaceIDs(ids...)
	return dpuo
}

// AddApplicationNamespaces adds the "application_namespaces" edges to the ApplicationNamespace entity.
func (dpuo *DeploymentPackageUpdateOne) AddApplicationNamespaces(a ...*ApplicationNamespace) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.AddApplicationNamespaceIDs(ids...)
}

// AddNamespaceIDs adds the "namespaces" edge to the Namespace entity by IDs.
func (dpuo *DeploymentPackageUpdateOne) AddNamespaceIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.AddNamespaceIDs(ids...)
	return dpuo
}

// AddNamespaces adds the "namespaces" edges to the Namespace entity.
func (dpuo *DeploymentPackageUpdateOne) AddNamespaces(n ...*Namespace) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return dpuo.AddNamespaceIDs(ids...)
}

// AddExtensionIDs adds the "extensions" edge to the Extension entity by IDs.
func (dpuo *DeploymentPackageUpdateOne) AddExtensionIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.AddExtensionIDs(ids...)
	return dpuo
}

// AddExtensions adds the "extensions" edges to the Extension entity.
func (dpuo *DeploymentPackageUpdateOne) AddExtensions(e ...*Extension) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return dpuo.AddExtensionIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the ArtifactReference entity by IDs.
func (dpuo *DeploymentPackageUpdateOne) AddArtifactIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.AddArtifactIDs(ids...)
	return dpuo
}

// AddArtifacts adds the "artifacts" edges to the ArtifactReference entity.
func (dpuo *DeploymentPackageUpdateOne) AddArtifacts(a ...*ArtifactReference) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.AddArtifactIDs(ids...)
}

// Mutation returns the DeploymentPackageMutation object of the builder.
func (dpuo *DeploymentPackageUpdateOne) Mutation() *DeploymentPackageMutation {
	return dpuo.mutation
}

// ClearDeploymentProfiles clears all "deployment_profiles" edges to the DeploymentProfile entity.
func (dpuo *DeploymentPackageUpdateOne) ClearDeploymentProfiles() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearDeploymentProfiles()
	return dpuo
}

// RemoveDeploymentProfileIDs removes the "deployment_profiles" edge to DeploymentProfile entities by IDs.
func (dpuo *DeploymentPackageUpdateOne) RemoveDeploymentProfileIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.RemoveDeploymentProfileIDs(ids...)
	return dpuo
}

// RemoveDeploymentProfiles removes "deployment_profiles" edges to DeploymentProfile entities.
func (dpuo *DeploymentPackageUpdateOne) RemoveDeploymentProfiles(d ...*DeploymentProfile) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpuo.RemoveDeploymentProfileIDs(ids...)
}

// ClearApplications clears all "applications" edges to the Application entity.
func (dpuo *DeploymentPackageUpdateOne) ClearApplications() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearApplications()
	return dpuo
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (dpuo *DeploymentPackageUpdateOne) RemoveApplicationIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.RemoveApplicationIDs(ids...)
	return dpuo
}

// RemoveApplications removes "applications" edges to Application entities.
func (dpuo *DeploymentPackageUpdateOne) RemoveApplications(a ...*Application) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.RemoveApplicationIDs(ids...)
}

// ClearIcon clears all "icon" edges to the Artifact entity.
func (dpuo *DeploymentPackageUpdateOne) ClearIcon() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearIcon()
	return dpuo
}

// RemoveIconIDs removes the "icon" edge to Artifact entities by IDs.
func (dpuo *DeploymentPackageUpdateOne) RemoveIconIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.RemoveIconIDs(ids...)
	return dpuo
}

// RemoveIcon removes "icon" edges to Artifact entities.
func (dpuo *DeploymentPackageUpdateOne) RemoveIcon(a ...*Artifact) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.RemoveIconIDs(ids...)
}

// ClearThumbnail clears all "thumbnail" edges to the Artifact entity.
func (dpuo *DeploymentPackageUpdateOne) ClearThumbnail() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearThumbnail()
	return dpuo
}

// RemoveThumbnailIDs removes the "thumbnail" edge to Artifact entities by IDs.
func (dpuo *DeploymentPackageUpdateOne) RemoveThumbnailIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.RemoveThumbnailIDs(ids...)
	return dpuo
}

// RemoveThumbnail removes "thumbnail" edges to Artifact entities.
func (dpuo *DeploymentPackageUpdateOne) RemoveThumbnail(a ...*Artifact) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.RemoveThumbnailIDs(ids...)
}

// ClearDefaultProfile clears the "default_profile" edge to the DeploymentProfile entity.
func (dpuo *DeploymentPackageUpdateOne) ClearDefaultProfile() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearDefaultProfile()
	return dpuo
}

// ClearApplicationDependencies clears all "application_dependencies" edges to the ApplicationDependency entity.
func (dpuo *DeploymentPackageUpdateOne) ClearApplicationDependencies() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearApplicationDependencies()
	return dpuo
}

// RemoveApplicationDependencyIDs removes the "application_dependencies" edge to ApplicationDependency entities by IDs.
func (dpuo *DeploymentPackageUpdateOne) RemoveApplicationDependencyIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.RemoveApplicationDependencyIDs(ids...)
	return dpuo
}

// RemoveApplicationDependencies removes "application_dependencies" edges to ApplicationDependency entities.
func (dpuo *DeploymentPackageUpdateOne) RemoveApplicationDependencies(a ...*ApplicationDependency) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.RemoveApplicationDependencyIDs(ids...)
}

// ClearApplicationNamespaces clears all "application_namespaces" edges to the ApplicationNamespace entity.
func (dpuo *DeploymentPackageUpdateOne) ClearApplicationNamespaces() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearApplicationNamespaces()
	return dpuo
}

// RemoveApplicationNamespaceIDs removes the "application_namespaces" edge to ApplicationNamespace entities by IDs.
func (dpuo *DeploymentPackageUpdateOne) RemoveApplicationNamespaceIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.RemoveApplicationNamespaceIDs(ids...)
	return dpuo
}

// RemoveApplicationNamespaces removes "application_namespaces" edges to ApplicationNamespace entities.
func (dpuo *DeploymentPackageUpdateOne) RemoveApplicationNamespaces(a ...*ApplicationNamespace) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.RemoveApplicationNamespaceIDs(ids...)
}

// ClearNamespaces clears all "namespaces" edges to the Namespace entity.
func (dpuo *DeploymentPackageUpdateOne) ClearNamespaces() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearNamespaces()
	return dpuo
}

// RemoveNamespaceIDs removes the "namespaces" edge to Namespace entities by IDs.
func (dpuo *DeploymentPackageUpdateOne) RemoveNamespaceIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.RemoveNamespaceIDs(ids...)
	return dpuo
}

// RemoveNamespaces removes "namespaces" edges to Namespace entities.
func (dpuo *DeploymentPackageUpdateOne) RemoveNamespaces(n ...*Namespace) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return dpuo.RemoveNamespaceIDs(ids...)
}

// ClearExtensions clears all "extensions" edges to the Extension entity.
func (dpuo *DeploymentPackageUpdateOne) ClearExtensions() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearExtensions()
	return dpuo
}

// RemoveExtensionIDs removes the "extensions" edge to Extension entities by IDs.
func (dpuo *DeploymentPackageUpdateOne) RemoveExtensionIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.RemoveExtensionIDs(ids...)
	return dpuo
}

// RemoveExtensions removes "extensions" edges to Extension entities.
func (dpuo *DeploymentPackageUpdateOne) RemoveExtensions(e ...*Extension) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return dpuo.RemoveExtensionIDs(ids...)
}

// ClearArtifacts clears all "artifacts" edges to the ArtifactReference entity.
func (dpuo *DeploymentPackageUpdateOne) ClearArtifacts() *DeploymentPackageUpdateOne {
	dpuo.mutation.ClearArtifacts()
	return dpuo
}

// RemoveArtifactIDs removes the "artifacts" edge to ArtifactReference entities by IDs.
func (dpuo *DeploymentPackageUpdateOne) RemoveArtifactIDs(ids ...uint64) *DeploymentPackageUpdateOne {
	dpuo.mutation.RemoveArtifactIDs(ids...)
	return dpuo
}

// RemoveArtifacts removes "artifacts" edges to ArtifactReference entities.
func (dpuo *DeploymentPackageUpdateOne) RemoveArtifacts(a ...*ArtifactReference) *DeploymentPackageUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpuo.RemoveArtifactIDs(ids...)
}

// Where appends a list predicates to the DeploymentPackageUpdate builder.
func (dpuo *DeploymentPackageUpdateOne) Where(ps ...predicate.DeploymentPackage) *DeploymentPackageUpdateOne {
	dpuo.mutation.Where(ps...)
	return dpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DeploymentPackageUpdateOne) Select(field string, fields ...string) *DeploymentPackageUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DeploymentPackage entity.
func (dpuo *DeploymentPackageUpdateOne) Save(ctx context.Context) (*DeploymentPackage, error) {
	dpuo.defaults()
	return withHooks(ctx, dpuo.sqlSave, dpuo.mutation, dpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DeploymentPackageUpdateOne) SaveX(ctx context.Context) *DeploymentPackage {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DeploymentPackageUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DeploymentPackageUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpuo *DeploymentPackageUpdateOne) defaults() {
	if _, ok := dpuo.mutation.UpdateTime(); !ok {
		v := deploymentpackage.UpdateDefaultUpdateTime()
		dpuo.mutation.SetUpdateTime(v)
	}
}

func (dpuo *DeploymentPackageUpdateOne) sqlSave(ctx context.Context) (_node *DeploymentPackage, err error) {
	_spec := sqlgraph.NewUpdateSpec(deploymentpackage.Table, deploymentpackage.Columns, sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64))
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DeploymentPackage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentpackage.FieldID)
		for _, f := range fields {
			if !deploymentpackage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != deploymentpackage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.Name(); ok {
		_spec.SetField(deploymentpackage.FieldName, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.DisplayName(); ok {
		_spec.SetField(deploymentpackage.FieldDisplayName, field.TypeString, value)
	}
	if dpuo.mutation.DisplayNameCleared() {
		_spec.ClearField(deploymentpackage.FieldDisplayName, field.TypeString)
	}
	if value, ok := dpuo.mutation.DisplayNameLc(); ok {
		_spec.SetField(deploymentpackage.FieldDisplayNameLc, field.TypeString, value)
	}
	if dpuo.mutation.DisplayNameLcCleared() {
		_spec.ClearField(deploymentpackage.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := dpuo.mutation.Description(); ok {
		_spec.SetField(deploymentpackage.FieldDescription, field.TypeString, value)
	}
	if dpuo.mutation.DescriptionCleared() {
		_spec.ClearField(deploymentpackage.FieldDescription, field.TypeString)
	}
	if value, ok := dpuo.mutation.UpdateTime(); ok {
		_spec.SetField(deploymentpackage.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dpuo.mutation.ProjectUUID(); ok {
		_spec.SetField(deploymentpackage.FieldProjectUUID, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.Version(); ok {
		_spec.SetField(deploymentpackage.FieldVersion, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.IsDeployed(); ok {
		_spec.SetField(deploymentpackage.FieldIsDeployed, field.TypeBool, value)
	}
	if dpuo.mutation.IsDeployedCleared() {
		_spec.ClearField(deploymentpackage.FieldIsDeployed, field.TypeBool)
	}
	if value, ok := dpuo.mutation.IsVisible(); ok {
		_spec.SetField(deploymentpackage.FieldIsVisible, field.TypeBool, value)
	}
	if dpuo.mutation.IsVisibleCleared() {
		_spec.ClearField(deploymentpackage.FieldIsVisible, field.TypeBool)
	}
	if value, ok := dpuo.mutation.AllowsMultipleDeployments(); ok {
		_spec.SetField(deploymentpackage.FieldAllowsMultipleDeployments, field.TypeBool, value)
	}
	if dpuo.mutation.AllowsMultipleDeploymentsCleared() {
		_spec.ClearField(deploymentpackage.FieldAllowsMultipleDeployments, field.TypeBool)
	}
	if value, ok := dpuo.mutation.Kind(); ok {
		_spec.SetField(deploymentpackage.FieldKind, field.TypeString, value)
	}
	if dpuo.mutation.KindCleared() {
		_spec.ClearField(deploymentpackage.FieldKind, field.TypeString)
	}
	if dpuo.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.DeploymentProfilesTable,
			Columns: []string{deploymentpackage.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedDeploymentProfilesIDs(); len(nodes) > 0 && !dpuo.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.DeploymentProfilesTable,
			Columns: []string{deploymentpackage.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.DeploymentProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.DeploymentProfilesTable,
			Columns: []string{deploymentpackage.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationsTable,
			Columns: deploymentpackage.ApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !dpuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationsTable,
			Columns: deploymentpackage.ApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationsTable,
			Columns: deploymentpackage.ApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.IconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.IconTable,
			Columns: deploymentpackage.IconPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedIconIDs(); len(nodes) > 0 && !dpuo.mutation.IconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.IconTable,
			Columns: deploymentpackage.IconPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.IconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.IconTable,
			Columns: deploymentpackage.IconPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.ThumbnailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ThumbnailTable,
			Columns: deploymentpackage.ThumbnailPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedThumbnailIDs(); len(nodes) > 0 && !dpuo.mutation.ThumbnailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ThumbnailTable,
			Columns: deploymentpackage.ThumbnailPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.ThumbnailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ThumbnailTable,
			Columns: deploymentpackage.ThumbnailPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.DefaultProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentpackage.DefaultProfileTable,
			Columns: []string{deploymentpackage.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.DefaultProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentpackage.DefaultProfileTable,
			Columns: []string{deploymentpackage.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.ApplicationDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationDependenciesTable,
			Columns: []string{deploymentpackage.ApplicationDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedApplicationDependenciesIDs(); len(nodes) > 0 && !dpuo.mutation.ApplicationDependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationDependenciesTable,
			Columns: []string{deploymentpackage.ApplicationDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.ApplicationDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationDependenciesTable,
			Columns: []string{deploymentpackage.ApplicationDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.ApplicationNamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationNamespacesTable,
			Columns: []string{deploymentpackage.ApplicationNamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedApplicationNamespacesIDs(); len(nodes) > 0 && !dpuo.mutation.ApplicationNamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationNamespacesTable,
			Columns: []string{deploymentpackage.ApplicationNamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.ApplicationNamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationNamespacesTable,
			Columns: []string{deploymentpackage.ApplicationNamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.NamespacesTable,
			Columns: []string{deploymentpackage.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !dpuo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.NamespacesTable,
			Columns: []string{deploymentpackage.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.NamespacesTable,
			Columns: []string{deploymentpackage.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.ExtensionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ExtensionsTable,
			Columns: []string{deploymentpackage.ExtensionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedExtensionsIDs(); len(nodes) > 0 && !dpuo.mutation.ExtensionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ExtensionsTable,
			Columns: []string{deploymentpackage.ExtensionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.ExtensionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ExtensionsTable,
			Columns: []string{deploymentpackage.ExtensionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ArtifactsTable,
			Columns: []string{deploymentpackage.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactreference.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedArtifactsIDs(); len(nodes) > 0 && !dpuo.mutation.ArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ArtifactsTable,
			Columns: []string{deploymentpackage.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactreference.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ArtifactsTable,
			Columns: []string{deploymentpackage.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactreference.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeploymentPackage{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentpackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dpuo.mutation.done = true
	return _node, nil
}
