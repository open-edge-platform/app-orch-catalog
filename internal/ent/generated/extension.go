// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/extension"
)

// Extension is the model entity for the Extension schema.
type Extension struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// A unique name. Used in HTTP network paths.
	Name string `json:"name,omitempty"`
	// Application API version.
	Version string `json:"version,omitempty"`
	// A display name.
	DisplayName string `json:"display_name,omitempty"`
	// Lowercase display name.
	DisplayNameLc string `json:"display_name_lc,omitempty"`
	// A description. Displayed on user interfaces.
	Description string `json:"description,omitempty"`
	// UI display label.
	UILabel string `json:"ui_label,omitempty"`
	// UI service name.
	UIServiceName string `json:"ui_service_name,omitempty"`
	// UI description.
	UIDescription string `json:"ui_description,omitempty"`
	// UI file name.
	UIFileName string `json:"ui_file_name,omitempty"`
	// UI app name.
	UIAppName string `json:"ui_app_name,omitempty"`
	// UI module name.
	UIModuleName string `json:"ui_module_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExtensionQuery when eager-loading is set.
	Edges                         ExtensionEdges `json:"edges"`
	deployment_package_extensions *uint64
	selectValues                  sql.SelectValues
}

// ExtensionEdges holds the relations/edges for other nodes in the graph.
type ExtensionEdges struct {
	// Extension can have 0 to many Endpoints
	Endpoints []*Endpoint `json:"endpoints,omitempty"`
	// Many Extensions can referenced by 0-many Deployment Packages
	DeploymentPackageFk *DeploymentPackage `json:"deployment_package_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EndpointsOrErr returns the Endpoints value or an error if the edge
// was not loaded in eager-loading.
func (e ExtensionEdges) EndpointsOrErr() ([]*Endpoint, error) {
	if e.loadedTypes[0] {
		return e.Endpoints, nil
	}
	return nil, &NotLoadedError{edge: "endpoints"}
}

// DeploymentPackageFkOrErr returns the DeploymentPackageFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExtensionEdges) DeploymentPackageFkOrErr() (*DeploymentPackage, error) {
	if e.loadedTypes[1] {
		if e.DeploymentPackageFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deploymentpackage.Label}
		}
		return e.DeploymentPackageFk, nil
	}
	return nil, &NotLoadedError{edge: "deployment_package_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Extension) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case extension.FieldID:
			values[i] = new(sql.NullInt64)
		case extension.FieldName, extension.FieldVersion, extension.FieldDisplayName, extension.FieldDisplayNameLc, extension.FieldDescription, extension.FieldUILabel, extension.FieldUIServiceName, extension.FieldUIDescription, extension.FieldUIFileName, extension.FieldUIAppName, extension.FieldUIModuleName:
			values[i] = new(sql.NullString)
		case extension.ForeignKeys[0]: // deployment_package_extensions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Extension fields.
func (e *Extension) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case extension.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case extension.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case extension.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				e.Version = value.String
			}
		case extension.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				e.DisplayName = value.String
			}
		case extension.FieldDisplayNameLc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name_lc", values[i])
			} else if value.Valid {
				e.DisplayNameLc = value.String
			}
		case extension.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case extension.FieldUILabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ui_label", values[i])
			} else if value.Valid {
				e.UILabel = value.String
			}
		case extension.FieldUIServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ui_service_name", values[i])
			} else if value.Valid {
				e.UIServiceName = value.String
			}
		case extension.FieldUIDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ui_description", values[i])
			} else if value.Valid {
				e.UIDescription = value.String
			}
		case extension.FieldUIFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ui_file_name", values[i])
			} else if value.Valid {
				e.UIFileName = value.String
			}
		case extension.FieldUIAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ui_app_name", values[i])
			} else if value.Valid {
				e.UIAppName = value.String
			}
		case extension.FieldUIModuleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ui_module_name", values[i])
			} else if value.Valid {
				e.UIModuleName = value.String
			}
		case extension.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_package_extensions", value)
			} else if value.Valid {
				e.deployment_package_extensions = new(uint64)
				*e.deployment_package_extensions = uint64(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Extension.
// This includes values selected through modifiers, order, etc.
func (e *Extension) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryEndpoints queries the "endpoints" edge of the Extension entity.
func (e *Extension) QueryEndpoints() *EndpointQuery {
	return NewExtensionClient(e.config).QueryEndpoints(e)
}

// QueryDeploymentPackageFk queries the "deployment_package_fk" edge of the Extension entity.
func (e *Extension) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	return NewExtensionClient(e.config).QueryDeploymentPackageFk(e)
}

// Update returns a builder for updating this Extension.
// Note that you need to call Extension.Unwrap() before calling this method if this Extension
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Extension) Update() *ExtensionUpdateOne {
	return NewExtensionClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Extension entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Extension) Unwrap() *Extension {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("generated: Extension is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Extension) String() string {
	var builder strings.Builder
	builder.WriteString("Extension(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(e.Version)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(e.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("display_name_lc=")
	builder.WriteString(e.DisplayNameLc)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("ui_label=")
	builder.WriteString(e.UILabel)
	builder.WriteString(", ")
	builder.WriteString("ui_service_name=")
	builder.WriteString(e.UIServiceName)
	builder.WriteString(", ")
	builder.WriteString("ui_description=")
	builder.WriteString(e.UIDescription)
	builder.WriteString(", ")
	builder.WriteString("ui_file_name=")
	builder.WriteString(e.UIFileName)
	builder.WriteString(", ")
	builder.WriteString("ui_app_name=")
	builder.WriteString(e.UIAppName)
	builder.WriteString(", ")
	builder.WriteString("ui_module_name=")
	builder.WriteString(e.UIModuleName)
	builder.WriteByte(')')
	return builder.String()
}

// Extensions is a parsable slice of Extension.
type Extensions []*Extension
