// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ApplicationDependencyUpdate is the builder for updating ApplicationDependency entities.
type ApplicationDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationDependencyMutation
}

// Where appends a list predicates to the ApplicationDependencyUpdate builder.
func (adu *ApplicationDependencyUpdate) Where(ps ...predicate.ApplicationDependency) *ApplicationDependencyUpdate {
	adu.mutation.Where(ps...)
	return adu
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (adu *ApplicationDependencyUpdate) SetDeploymentPackageFkID(id uint64) *ApplicationDependencyUpdate {
	adu.mutation.SetDeploymentPackageFkID(id)
	return adu
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (adu *ApplicationDependencyUpdate) SetDeploymentPackageFk(d *DeploymentPackage) *ApplicationDependencyUpdate {
	return adu.SetDeploymentPackageFkID(d.ID)
}

// SetSourceFkID sets the "source_fk" edge to the Application entity by ID.
func (adu *ApplicationDependencyUpdate) SetSourceFkID(id uint64) *ApplicationDependencyUpdate {
	adu.mutation.SetSourceFkID(id)
	return adu
}

// SetSourceFk sets the "source_fk" edge to the Application entity.
func (adu *ApplicationDependencyUpdate) SetSourceFk(a *Application) *ApplicationDependencyUpdate {
	return adu.SetSourceFkID(a.ID)
}

// SetTargetFkID sets the "target_fk" edge to the Application entity by ID.
func (adu *ApplicationDependencyUpdate) SetTargetFkID(id uint64) *ApplicationDependencyUpdate {
	adu.mutation.SetTargetFkID(id)
	return adu
}

// SetTargetFk sets the "target_fk" edge to the Application entity.
func (adu *ApplicationDependencyUpdate) SetTargetFk(a *Application) *ApplicationDependencyUpdate {
	return adu.SetTargetFkID(a.ID)
}

// Mutation returns the ApplicationDependencyMutation object of the builder.
func (adu *ApplicationDependencyUpdate) Mutation() *ApplicationDependencyMutation {
	return adu.mutation
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (adu *ApplicationDependencyUpdate) ClearDeploymentPackageFk() *ApplicationDependencyUpdate {
	adu.mutation.ClearDeploymentPackageFk()
	return adu
}

// ClearSourceFk clears the "source_fk" edge to the Application entity.
func (adu *ApplicationDependencyUpdate) ClearSourceFk() *ApplicationDependencyUpdate {
	adu.mutation.ClearSourceFk()
	return adu
}

// ClearTargetFk clears the "target_fk" edge to the Application entity.
func (adu *ApplicationDependencyUpdate) ClearTargetFk() *ApplicationDependencyUpdate {
	adu.mutation.ClearTargetFk()
	return adu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *ApplicationDependencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, adu.sqlSave, adu.mutation, adu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adu *ApplicationDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *ApplicationDependencyUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *ApplicationDependencyUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adu *ApplicationDependencyUpdate) check() error {
	if _, ok := adu.mutation.DeploymentPackageFkID(); adu.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationDependency.deployment_package_fk"`)
	}
	if _, ok := adu.mutation.SourceFkID(); adu.mutation.SourceFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationDependency.source_fk"`)
	}
	if _, ok := adu.mutation.TargetFkID(); adu.mutation.TargetFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationDependency.target_fk"`)
	}
	return nil
}

func (adu *ApplicationDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := adu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicationdependency.Table, applicationdependency.Columns, sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64))
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if adu.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationdependency.DeploymentPackageFkTable,
			Columns: []string{applicationdependency.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationdependency.DeploymentPackageFkTable,
			Columns: []string{applicationdependency.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if adu.mutation.SourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.SourceFkTable,
			Columns: []string{applicationdependency.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.SourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.SourceFkTable,
			Columns: []string{applicationdependency.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if adu.mutation.TargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.TargetFkTable,
			Columns: []string{applicationdependency.TargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.TargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.TargetFkTable,
			Columns: []string{applicationdependency.TargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	adu.mutation.done = true
	return n, nil
}

// ApplicationDependencyUpdateOne is the builder for updating a single ApplicationDependency entity.
type ApplicationDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationDependencyMutation
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (aduo *ApplicationDependencyUpdateOne) SetDeploymentPackageFkID(id uint64) *ApplicationDependencyUpdateOne {
	aduo.mutation.SetDeploymentPackageFkID(id)
	return aduo
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (aduo *ApplicationDependencyUpdateOne) SetDeploymentPackageFk(d *DeploymentPackage) *ApplicationDependencyUpdateOne {
	return aduo.SetDeploymentPackageFkID(d.ID)
}

// SetSourceFkID sets the "source_fk" edge to the Application entity by ID.
func (aduo *ApplicationDependencyUpdateOne) SetSourceFkID(id uint64) *ApplicationDependencyUpdateOne {
	aduo.mutation.SetSourceFkID(id)
	return aduo
}

// SetSourceFk sets the "source_fk" edge to the Application entity.
func (aduo *ApplicationDependencyUpdateOne) SetSourceFk(a *Application) *ApplicationDependencyUpdateOne {
	return aduo.SetSourceFkID(a.ID)
}

// SetTargetFkID sets the "target_fk" edge to the Application entity by ID.
func (aduo *ApplicationDependencyUpdateOne) SetTargetFkID(id uint64) *ApplicationDependencyUpdateOne {
	aduo.mutation.SetTargetFkID(id)
	return aduo
}

// SetTargetFk sets the "target_fk" edge to the Application entity.
func (aduo *ApplicationDependencyUpdateOne) SetTargetFk(a *Application) *ApplicationDependencyUpdateOne {
	return aduo.SetTargetFkID(a.ID)
}

// Mutation returns the ApplicationDependencyMutation object of the builder.
func (aduo *ApplicationDependencyUpdateOne) Mutation() *ApplicationDependencyMutation {
	return aduo.mutation
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (aduo *ApplicationDependencyUpdateOne) ClearDeploymentPackageFk() *ApplicationDependencyUpdateOne {
	aduo.mutation.ClearDeploymentPackageFk()
	return aduo
}

// ClearSourceFk clears the "source_fk" edge to the Application entity.
func (aduo *ApplicationDependencyUpdateOne) ClearSourceFk() *ApplicationDependencyUpdateOne {
	aduo.mutation.ClearSourceFk()
	return aduo
}

// ClearTargetFk clears the "target_fk" edge to the Application entity.
func (aduo *ApplicationDependencyUpdateOne) ClearTargetFk() *ApplicationDependencyUpdateOne {
	aduo.mutation.ClearTargetFk()
	return aduo
}

// Where appends a list predicates to the ApplicationDependencyUpdate builder.
func (aduo *ApplicationDependencyUpdateOne) Where(ps ...predicate.ApplicationDependency) *ApplicationDependencyUpdateOne {
	aduo.mutation.Where(ps...)
	return aduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *ApplicationDependencyUpdateOne) Select(field string, fields ...string) *ApplicationDependencyUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated ApplicationDependency entity.
func (aduo *ApplicationDependencyUpdateOne) Save(ctx context.Context) (*ApplicationDependency, error) {
	return withHooks(ctx, aduo.sqlSave, aduo.mutation, aduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *ApplicationDependencyUpdateOne) SaveX(ctx context.Context) *ApplicationDependency {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *ApplicationDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *ApplicationDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aduo *ApplicationDependencyUpdateOne) check() error {
	if _, ok := aduo.mutation.DeploymentPackageFkID(); aduo.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationDependency.deployment_package_fk"`)
	}
	if _, ok := aduo.mutation.SourceFkID(); aduo.mutation.SourceFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationDependency.source_fk"`)
	}
	if _, ok := aduo.mutation.TargetFkID(); aduo.mutation.TargetFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationDependency.target_fk"`)
	}
	return nil
}

func (aduo *ApplicationDependencyUpdateOne) sqlSave(ctx context.Context) (_node *ApplicationDependency, err error) {
	if err := aduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicationdependency.Table, applicationdependency.Columns, sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64))
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ApplicationDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationdependency.FieldID)
		for _, f := range fields {
			if !applicationdependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != applicationdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aduo.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationdependency.DeploymentPackageFkTable,
			Columns: []string{applicationdependency.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationdependency.DeploymentPackageFkTable,
			Columns: []string{applicationdependency.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aduo.mutation.SourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.SourceFkTable,
			Columns: []string{applicationdependency.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.SourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.SourceFkTable,
			Columns: []string{applicationdependency.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aduo.mutation.TargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.TargetFkTable,
			Columns: []string{applicationdependency.TargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.TargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.TargetFkTable,
			Columns: []string{applicationdependency.TargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApplicationDependency{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aduo.mutation.done = true
	return _node, nil
}
