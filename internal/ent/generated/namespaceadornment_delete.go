// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespaceadornment"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// NamespaceAdornmentDelete is the builder for deleting a NamespaceAdornment entity.
type NamespaceAdornmentDelete struct {
	config
	hooks    []Hook
	mutation *NamespaceAdornmentMutation
}

// Where appends a list predicates to the NamespaceAdornmentDelete builder.
func (nad *NamespaceAdornmentDelete) Where(ps ...predicate.NamespaceAdornment) *NamespaceAdornmentDelete {
	nad.mutation.Where(ps...)
	return nad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nad *NamespaceAdornmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nad.sqlExec, nad.mutation, nad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nad *NamespaceAdornmentDelete) ExecX(ctx context.Context) int {
	n, err := nad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nad *NamespaceAdornmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(namespaceadornment.Table, sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64))
	if ps := nad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nad.mutation.done = true
	return affected, err
}

// NamespaceAdornmentDeleteOne is the builder for deleting a single NamespaceAdornment entity.
type NamespaceAdornmentDeleteOne struct {
	nad *NamespaceAdornmentDelete
}

// Where appends a list predicates to the NamespaceAdornmentDelete builder.
func (nado *NamespaceAdornmentDeleteOne) Where(ps ...predicate.NamespaceAdornment) *NamespaceAdornmentDeleteOne {
	nado.nad.mutation.Where(ps...)
	return nado
}

// Exec executes the deletion query.
func (nado *NamespaceAdornmentDeleteOne) Exec(ctx context.Context) error {
	n, err := nado.nad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{namespaceadornment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nado *NamespaceAdornmentDeleteOne) ExecX(ctx context.Context) {
	if err := nado.Exec(ctx); err != nil {
		panic(err)
	}
}
