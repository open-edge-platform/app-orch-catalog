// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/endpoint"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/extension"
)

// Endpoint is the model entity for the Endpoint schema.
type Endpoint struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Endpoint service name.
	ServiceName string `json:"service_name,omitempty"`
	// External endpoint path.
	ExternalPath string `json:"external_path,omitempty"`
	// Internal endpoint path.
	InternalPath string `json:"internal_path,omitempty"`
	// Internal endpoint protocol scheme.
	Scheme string `json:"scheme,omitempty"`
	// Authentication type.
	AuthType string `json:"auth_type,omitempty"`
	// Application name.
	AppName string `json:"app_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EndpointQuery when eager-loading is set.
	Edges               EndpointEdges `json:"edges"`
	extension_endpoints *uint64
	selectValues        sql.SelectValues
}

// EndpointEdges holds the relations/edges for other nodes in the graph.
type EndpointEdges struct {
	// Extension can have 0 to many Endpoints
	ExtensionFk *Extension `json:"extension_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExtensionFkOrErr returns the ExtensionFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EndpointEdges) ExtensionFkOrErr() (*Extension, error) {
	if e.loadedTypes[0] {
		if e.ExtensionFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: extension.Label}
		}
		return e.ExtensionFk, nil
	}
	return nil, &NotLoadedError{edge: "extension_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Endpoint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldID:
			values[i] = new(sql.NullInt64)
		case endpoint.FieldServiceName, endpoint.FieldExternalPath, endpoint.FieldInternalPath, endpoint.FieldScheme, endpoint.FieldAuthType, endpoint.FieldAppName:
			values[i] = new(sql.NullString)
		case endpoint.ForeignKeys[0]: // extension_endpoints
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Endpoint fields.
func (e *Endpoint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case endpoint.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_name", values[i])
			} else if value.Valid {
				e.ServiceName = value.String
			}
		case endpoint.FieldExternalPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_path", values[i])
			} else if value.Valid {
				e.ExternalPath = value.String
			}
		case endpoint.FieldInternalPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_path", values[i])
			} else if value.Valid {
				e.InternalPath = value.String
			}
		case endpoint.FieldScheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scheme", values[i])
			} else if value.Valid {
				e.Scheme = value.String
			}
		case endpoint.FieldAuthType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_type", values[i])
			} else if value.Valid {
				e.AuthType = value.String
			}
		case endpoint.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				e.AppName = value.String
			}
		case endpoint.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field extension_endpoints", value)
			} else if value.Valid {
				e.extension_endpoints = new(uint64)
				*e.extension_endpoints = uint64(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Endpoint.
// This includes values selected through modifiers, order, etc.
func (e *Endpoint) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryExtensionFk queries the "extension_fk" edge of the Endpoint entity.
func (e *Endpoint) QueryExtensionFk() *ExtensionQuery {
	return NewEndpointClient(e.config).QueryExtensionFk(e)
}

// Update returns a builder for updating this Endpoint.
// Note that you need to call Endpoint.Unwrap() before calling this method if this Endpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Endpoint) Update() *EndpointUpdateOne {
	return NewEndpointClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Endpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Endpoint) Unwrap() *Endpoint {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("generated: Endpoint is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Endpoint) String() string {
	var builder strings.Builder
	builder.WriteString("Endpoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("service_name=")
	builder.WriteString(e.ServiceName)
	builder.WriteString(", ")
	builder.WriteString("external_path=")
	builder.WriteString(e.ExternalPath)
	builder.WriteString(", ")
	builder.WriteString("internal_path=")
	builder.WriteString(e.InternalPath)
	builder.WriteString(", ")
	builder.WriteString("scheme=")
	builder.WriteString(e.Scheme)
	builder.WriteString(", ")
	builder.WriteString("auth_type=")
	builder.WriteString(e.AuthType)
	builder.WriteString(", ")
	builder.WriteString("app_name=")
	builder.WriteString(e.AppName)
	builder.WriteByte(')')
	return builder.String()
}

// Endpoints is a parsable slice of Endpoint.
type Endpoints []*Endpoint
