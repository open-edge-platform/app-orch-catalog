// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationnamespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifact"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifactreference"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/extension"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespace"
)

// DeploymentPackageCreate is the builder for creating a DeploymentPackage entity.
type DeploymentPackageCreate struct {
	config
	mutation *DeploymentPackageMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dpc *DeploymentPackageCreate) SetName(s string) *DeploymentPackageCreate {
	dpc.mutation.SetName(s)
	return dpc
}

// SetDisplayName sets the "display_name" field.
func (dpc *DeploymentPackageCreate) SetDisplayName(s string) *DeploymentPackageCreate {
	dpc.mutation.SetDisplayName(s)
	return dpc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableDisplayName(s *string) *DeploymentPackageCreate {
	if s != nil {
		dpc.SetDisplayName(*s)
	}
	return dpc
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (dpc *DeploymentPackageCreate) SetDisplayNameLc(s string) *DeploymentPackageCreate {
	dpc.mutation.SetDisplayNameLc(s)
	return dpc
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableDisplayNameLc(s *string) *DeploymentPackageCreate {
	if s != nil {
		dpc.SetDisplayNameLc(*s)
	}
	return dpc
}

// SetDescription sets the "description" field.
func (dpc *DeploymentPackageCreate) SetDescription(s string) *DeploymentPackageCreate {
	dpc.mutation.SetDescription(s)
	return dpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableDescription(s *string) *DeploymentPackageCreate {
	if s != nil {
		dpc.SetDescription(*s)
	}
	return dpc
}

// SetCreateTime sets the "create_time" field.
func (dpc *DeploymentPackageCreate) SetCreateTime(t time.Time) *DeploymentPackageCreate {
	dpc.mutation.SetCreateTime(t)
	return dpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableCreateTime(t *time.Time) *DeploymentPackageCreate {
	if t != nil {
		dpc.SetCreateTime(*t)
	}
	return dpc
}

// SetUpdateTime sets the "update_time" field.
func (dpc *DeploymentPackageCreate) SetUpdateTime(t time.Time) *DeploymentPackageCreate {
	dpc.mutation.SetUpdateTime(t)
	return dpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableUpdateTime(t *time.Time) *DeploymentPackageCreate {
	if t != nil {
		dpc.SetUpdateTime(*t)
	}
	return dpc
}

// SetProjectUUID sets the "project_uuid" field.
func (dpc *DeploymentPackageCreate) SetProjectUUID(s string) *DeploymentPackageCreate {
	dpc.mutation.SetProjectUUID(s)
	return dpc
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableProjectUUID(s *string) *DeploymentPackageCreate {
	if s != nil {
		dpc.SetProjectUUID(*s)
	}
	return dpc
}

// SetVersion sets the "version" field.
func (dpc *DeploymentPackageCreate) SetVersion(s string) *DeploymentPackageCreate {
	dpc.mutation.SetVersion(s)
	return dpc
}

// SetIsDeployed sets the "is_deployed" field.
func (dpc *DeploymentPackageCreate) SetIsDeployed(b bool) *DeploymentPackageCreate {
	dpc.mutation.SetIsDeployed(b)
	return dpc
}

// SetNillableIsDeployed sets the "is_deployed" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableIsDeployed(b *bool) *DeploymentPackageCreate {
	if b != nil {
		dpc.SetIsDeployed(*b)
	}
	return dpc
}

// SetIsVisible sets the "is_visible" field.
func (dpc *DeploymentPackageCreate) SetIsVisible(b bool) *DeploymentPackageCreate {
	dpc.mutation.SetIsVisible(b)
	return dpc
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableIsVisible(b *bool) *DeploymentPackageCreate {
	if b != nil {
		dpc.SetIsVisible(*b)
	}
	return dpc
}

// SetAllowsMultipleDeployments sets the "allows_multiple_deployments" field.
func (dpc *DeploymentPackageCreate) SetAllowsMultipleDeployments(b bool) *DeploymentPackageCreate {
	dpc.mutation.SetAllowsMultipleDeployments(b)
	return dpc
}

// SetNillableAllowsMultipleDeployments sets the "allows_multiple_deployments" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableAllowsMultipleDeployments(b *bool) *DeploymentPackageCreate {
	if b != nil {
		dpc.SetAllowsMultipleDeployments(*b)
	}
	return dpc
}

// SetKind sets the "kind" field.
func (dpc *DeploymentPackageCreate) SetKind(s string) *DeploymentPackageCreate {
	dpc.mutation.SetKind(s)
	return dpc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableKind(s *string) *DeploymentPackageCreate {
	if s != nil {
		dpc.SetKind(*s)
	}
	return dpc
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (dpc *DeploymentPackageCreate) AddDeploymentProfileIDs(ids ...uint64) *DeploymentPackageCreate {
	dpc.mutation.AddDeploymentProfileIDs(ids...)
	return dpc
}

// AddDeploymentProfiles adds the "deployment_profiles" edges to the DeploymentProfile entity.
func (dpc *DeploymentPackageCreate) AddDeploymentProfiles(d ...*DeploymentProfile) *DeploymentPackageCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpc.AddDeploymentProfileIDs(ids...)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (dpc *DeploymentPackageCreate) AddApplicationIDs(ids ...uint64) *DeploymentPackageCreate {
	dpc.mutation.AddApplicationIDs(ids...)
	return dpc
}

// AddApplications adds the "applications" edges to the Application entity.
func (dpc *DeploymentPackageCreate) AddApplications(a ...*Application) *DeploymentPackageCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpc.AddApplicationIDs(ids...)
}

// AddIconIDs adds the "icon" edge to the Artifact entity by IDs.
func (dpc *DeploymentPackageCreate) AddIconIDs(ids ...uint64) *DeploymentPackageCreate {
	dpc.mutation.AddIconIDs(ids...)
	return dpc
}

// AddIcon adds the "icon" edges to the Artifact entity.
func (dpc *DeploymentPackageCreate) AddIcon(a ...*Artifact) *DeploymentPackageCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpc.AddIconIDs(ids...)
}

// AddThumbnailIDs adds the "thumbnail" edge to the Artifact entity by IDs.
func (dpc *DeploymentPackageCreate) AddThumbnailIDs(ids ...uint64) *DeploymentPackageCreate {
	dpc.mutation.AddThumbnailIDs(ids...)
	return dpc
}

// AddThumbnail adds the "thumbnail" edges to the Artifact entity.
func (dpc *DeploymentPackageCreate) AddThumbnail(a ...*Artifact) *DeploymentPackageCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpc.AddThumbnailIDs(ids...)
}

// SetDefaultProfileID sets the "default_profile" edge to the DeploymentProfile entity by ID.
func (dpc *DeploymentPackageCreate) SetDefaultProfileID(id uint64) *DeploymentPackageCreate {
	dpc.mutation.SetDefaultProfileID(id)
	return dpc
}

// SetNillableDefaultProfileID sets the "default_profile" edge to the DeploymentProfile entity by ID if the given value is not nil.
func (dpc *DeploymentPackageCreate) SetNillableDefaultProfileID(id *uint64) *DeploymentPackageCreate {
	if id != nil {
		dpc = dpc.SetDefaultProfileID(*id)
	}
	return dpc
}

// SetDefaultProfile sets the "default_profile" edge to the DeploymentProfile entity.
func (dpc *DeploymentPackageCreate) SetDefaultProfile(d *DeploymentProfile) *DeploymentPackageCreate {
	return dpc.SetDefaultProfileID(d.ID)
}

// AddApplicationDependencyIDs adds the "application_dependencies" edge to the ApplicationDependency entity by IDs.
func (dpc *DeploymentPackageCreate) AddApplicationDependencyIDs(ids ...uint64) *DeploymentPackageCreate {
	dpc.mutation.AddApplicationDependencyIDs(ids...)
	return dpc
}

// AddApplicationDependencies adds the "application_dependencies" edges to the ApplicationDependency entity.
func (dpc *DeploymentPackageCreate) AddApplicationDependencies(a ...*ApplicationDependency) *DeploymentPackageCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpc.AddApplicationDependencyIDs(ids...)
}

// AddApplicationNamespaceIDs adds the "application_namespaces" edge to the ApplicationNamespace entity by IDs.
func (dpc *DeploymentPackageCreate) AddApplicationNamespaceIDs(ids ...uint64) *DeploymentPackageCreate {
	dpc.mutation.AddApplicationNamespaceIDs(ids...)
	return dpc
}

// AddApplicationNamespaces adds the "application_namespaces" edges to the ApplicationNamespace entity.
func (dpc *DeploymentPackageCreate) AddApplicationNamespaces(a ...*ApplicationNamespace) *DeploymentPackageCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpc.AddApplicationNamespaceIDs(ids...)
}

// AddNamespaceIDs adds the "namespaces" edge to the Namespace entity by IDs.
func (dpc *DeploymentPackageCreate) AddNamespaceIDs(ids ...uint64) *DeploymentPackageCreate {
	dpc.mutation.AddNamespaceIDs(ids...)
	return dpc
}

// AddNamespaces adds the "namespaces" edges to the Namespace entity.
func (dpc *DeploymentPackageCreate) AddNamespaces(n ...*Namespace) *DeploymentPackageCreate {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return dpc.AddNamespaceIDs(ids...)
}

// AddExtensionIDs adds the "extensions" edge to the Extension entity by IDs.
func (dpc *DeploymentPackageCreate) AddExtensionIDs(ids ...uint64) *DeploymentPackageCreate {
	dpc.mutation.AddExtensionIDs(ids...)
	return dpc
}

// AddExtensions adds the "extensions" edges to the Extension entity.
func (dpc *DeploymentPackageCreate) AddExtensions(e ...*Extension) *DeploymentPackageCreate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return dpc.AddExtensionIDs(ids...)
}

// AddArtifactIDs adds the "artifacts" edge to the ArtifactReference entity by IDs.
func (dpc *DeploymentPackageCreate) AddArtifactIDs(ids ...uint64) *DeploymentPackageCreate {
	dpc.mutation.AddArtifactIDs(ids...)
	return dpc
}

// AddArtifacts adds the "artifacts" edges to the ArtifactReference entity.
func (dpc *DeploymentPackageCreate) AddArtifacts(a ...*ArtifactReference) *DeploymentPackageCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dpc.AddArtifactIDs(ids...)
}

// Mutation returns the DeploymentPackageMutation object of the builder.
func (dpc *DeploymentPackageCreate) Mutation() *DeploymentPackageMutation {
	return dpc.mutation
}

// Save creates the DeploymentPackage in the database.
func (dpc *DeploymentPackageCreate) Save(ctx context.Context) (*DeploymentPackage, error) {
	dpc.defaults()
	return withHooks(ctx, dpc.sqlSave, dpc.mutation, dpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DeploymentPackageCreate) SaveX(ctx context.Context) *DeploymentPackage {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DeploymentPackageCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DeploymentPackageCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpc *DeploymentPackageCreate) defaults() {
	if _, ok := dpc.mutation.CreateTime(); !ok {
		v := deploymentpackage.DefaultCreateTime()
		dpc.mutation.SetCreateTime(v)
	}
	if _, ok := dpc.mutation.UpdateTime(); !ok {
		v := deploymentpackage.DefaultUpdateTime()
		dpc.mutation.SetUpdateTime(v)
	}
	if _, ok := dpc.mutation.ProjectUUID(); !ok {
		v := deploymentpackage.DefaultProjectUUID
		dpc.mutation.SetProjectUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DeploymentPackageCreate) check() error {
	if _, ok := dpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "DeploymentPackage.name"`)}
	}
	if _, ok := dpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "DeploymentPackage.create_time"`)}
	}
	if _, ok := dpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "DeploymentPackage.update_time"`)}
	}
	if _, ok := dpc.mutation.ProjectUUID(); !ok {
		return &ValidationError{Name: "project_uuid", err: errors.New(`generated: missing required field "DeploymentPackage.project_uuid"`)}
	}
	if _, ok := dpc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`generated: missing required field "DeploymentPackage.version"`)}
	}
	return nil
}

func (dpc *DeploymentPackageCreate) sqlSave(ctx context.Context) (*DeploymentPackage, error) {
	if err := dpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	dpc.mutation.id = &_node.ID
	dpc.mutation.done = true
	return _node, nil
}

func (dpc *DeploymentPackageCreate) createSpec() (*DeploymentPackage, *sqlgraph.CreateSpec) {
	var (
		_node = &DeploymentPackage{config: dpc.config}
		_spec = sqlgraph.NewCreateSpec(deploymentpackage.Table, sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64))
	)
	if value, ok := dpc.mutation.Name(); ok {
		_spec.SetField(deploymentpackage.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dpc.mutation.DisplayName(); ok {
		_spec.SetField(deploymentpackage.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := dpc.mutation.DisplayNameLc(); ok {
		_spec.SetField(deploymentpackage.FieldDisplayNameLc, field.TypeString, value)
		_node.DisplayNameLc = value
	}
	if value, ok := dpc.mutation.Description(); ok {
		_spec.SetField(deploymentpackage.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dpc.mutation.CreateTime(); ok {
		_spec.SetField(deploymentpackage.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dpc.mutation.UpdateTime(); ok {
		_spec.SetField(deploymentpackage.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dpc.mutation.ProjectUUID(); ok {
		_spec.SetField(deploymentpackage.FieldProjectUUID, field.TypeString, value)
		_node.ProjectUUID = value
	}
	if value, ok := dpc.mutation.Version(); ok {
		_spec.SetField(deploymentpackage.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := dpc.mutation.IsDeployed(); ok {
		_spec.SetField(deploymentpackage.FieldIsDeployed, field.TypeBool, value)
		_node.IsDeployed = value
	}
	if value, ok := dpc.mutation.IsVisible(); ok {
		_spec.SetField(deploymentpackage.FieldIsVisible, field.TypeBool, value)
		_node.IsVisible = value
	}
	if value, ok := dpc.mutation.AllowsMultipleDeployments(); ok {
		_spec.SetField(deploymentpackage.FieldAllowsMultipleDeployments, field.TypeBool, value)
		_node.AllowsMultipleDeployments = value
	}
	if value, ok := dpc.mutation.Kind(); ok {
		_spec.SetField(deploymentpackage.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if nodes := dpc.mutation.DeploymentProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.DeploymentProfilesTable,
			Columns: []string{deploymentpackage.DeploymentProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationsTable,
			Columns: deploymentpackage.ApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.IconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.IconTable,
			Columns: deploymentpackage.IconPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.ThumbnailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentpackage.ThumbnailTable,
			Columns: deploymentpackage.ThumbnailPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.DefaultProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentpackage.DefaultProfileTable,
			Columns: []string{deploymentpackage.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deployment_package_default_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.ApplicationDependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationDependenciesTable,
			Columns: []string{deploymentpackage.ApplicationDependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.ApplicationNamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ApplicationNamespacesTable,
			Columns: []string{deploymentpackage.ApplicationNamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.NamespacesTable,
			Columns: []string{deploymentpackage.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.ExtensionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ExtensionsTable,
			Columns: []string{deploymentpackage.ExtensionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.ArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deploymentpackage.ArtifactsTable,
			Columns: []string{deploymentpackage.ArtifactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactreference.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeploymentPackageCreateBulk is the builder for creating many DeploymentPackage entities in bulk.
type DeploymentPackageCreateBulk struct {
	config
	err      error
	builders []*DeploymentPackageCreate
}

// Save creates the DeploymentPackage entities in the database.
func (dpcb *DeploymentPackageCreateBulk) Save(ctx context.Context) ([]*DeploymentPackage, error) {
	if dpcb.err != nil {
		return nil, dpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DeploymentPackage, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeploymentPackageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DeploymentPackageCreateBulk) SaveX(ctx context.Context) []*DeploymentPackage {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DeploymentPackageCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DeploymentPackageCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
