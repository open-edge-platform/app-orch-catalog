// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ApplicationDependencyQuery is the builder for querying ApplicationDependency entities.
type ApplicationDependencyQuery struct {
	config
	ctx                     *QueryContext
	order                   []applicationdependency.OrderOption
	inters                  []Interceptor
	predicates              []predicate.ApplicationDependency
	withDeploymentPackageFk *DeploymentPackageQuery
	withSourceFk            *ApplicationQuery
	withTargetFk            *ApplicationQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ApplicationDependencyQuery builder.
func (adq *ApplicationDependencyQuery) Where(ps ...predicate.ApplicationDependency) *ApplicationDependencyQuery {
	adq.predicates = append(adq.predicates, ps...)
	return adq
}

// Limit the number of records to be returned by this query.
func (adq *ApplicationDependencyQuery) Limit(limit int) *ApplicationDependencyQuery {
	adq.ctx.Limit = &limit
	return adq
}

// Offset to start from.
func (adq *ApplicationDependencyQuery) Offset(offset int) *ApplicationDependencyQuery {
	adq.ctx.Offset = &offset
	return adq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (adq *ApplicationDependencyQuery) Unique(unique bool) *ApplicationDependencyQuery {
	adq.ctx.Unique = &unique
	return adq
}

// Order specifies how the records should be ordered.
func (adq *ApplicationDependencyQuery) Order(o ...applicationdependency.OrderOption) *ApplicationDependencyQuery {
	adq.order = append(adq.order, o...)
	return adq
}

// QueryDeploymentPackageFk chains the current query on the "deployment_package_fk" edge.
func (adq *ApplicationDependencyQuery) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: adq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := adq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := adq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationdependency.Table, applicationdependency.FieldID, selector),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicationdependency.DeploymentPackageFkTable, applicationdependency.DeploymentPackageFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(adq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySourceFk chains the current query on the "source_fk" edge.
func (adq *ApplicationDependencyQuery) QuerySourceFk() *ApplicationQuery {
	query := (&ApplicationClient{config: adq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := adq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := adq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationdependency.Table, applicationdependency.FieldID, selector),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, applicationdependency.SourceFkTable, applicationdependency.SourceFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(adq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTargetFk chains the current query on the "target_fk" edge.
func (adq *ApplicationDependencyQuery) QueryTargetFk() *ApplicationQuery {
	query := (&ApplicationClient{config: adq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := adq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := adq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationdependency.Table, applicationdependency.FieldID, selector),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, applicationdependency.TargetFkTable, applicationdependency.TargetFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(adq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ApplicationDependency entity from the query.
// Returns a *NotFoundError when no ApplicationDependency was found.
func (adq *ApplicationDependencyQuery) First(ctx context.Context) (*ApplicationDependency, error) {
	nodes, err := adq.Limit(1).All(setContextOp(ctx, adq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{applicationdependency.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (adq *ApplicationDependencyQuery) FirstX(ctx context.Context) *ApplicationDependency {
	node, err := adq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ApplicationDependency ID from the query.
// Returns a *NotFoundError when no ApplicationDependency ID was found.
func (adq *ApplicationDependencyQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = adq.Limit(1).IDs(setContextOp(ctx, adq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{applicationdependency.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (adq *ApplicationDependencyQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := adq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ApplicationDependency entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ApplicationDependency entity is found.
// Returns a *NotFoundError when no ApplicationDependency entities are found.
func (adq *ApplicationDependencyQuery) Only(ctx context.Context) (*ApplicationDependency, error) {
	nodes, err := adq.Limit(2).All(setContextOp(ctx, adq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{applicationdependency.Label}
	default:
		return nil, &NotSingularError{applicationdependency.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (adq *ApplicationDependencyQuery) OnlyX(ctx context.Context) *ApplicationDependency {
	node, err := adq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ApplicationDependency ID in the query.
// Returns a *NotSingularError when more than one ApplicationDependency ID is found.
// Returns a *NotFoundError when no entities are found.
func (adq *ApplicationDependencyQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = adq.Limit(2).IDs(setContextOp(ctx, adq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{applicationdependency.Label}
	default:
		err = &NotSingularError{applicationdependency.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (adq *ApplicationDependencyQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := adq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ApplicationDependencies.
func (adq *ApplicationDependencyQuery) All(ctx context.Context) ([]*ApplicationDependency, error) {
	ctx = setContextOp(ctx, adq.ctx, "All")
	if err := adq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ApplicationDependency, *ApplicationDependencyQuery]()
	return withInterceptors[[]*ApplicationDependency](ctx, adq, qr, adq.inters)
}

// AllX is like All, but panics if an error occurs.
func (adq *ApplicationDependencyQuery) AllX(ctx context.Context) []*ApplicationDependency {
	nodes, err := adq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ApplicationDependency IDs.
func (adq *ApplicationDependencyQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if adq.ctx.Unique == nil && adq.path != nil {
		adq.Unique(true)
	}
	ctx = setContextOp(ctx, adq.ctx, "IDs")
	if err = adq.Select(applicationdependency.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (adq *ApplicationDependencyQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := adq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (adq *ApplicationDependencyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, adq.ctx, "Count")
	if err := adq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, adq, querierCount[*ApplicationDependencyQuery](), adq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (adq *ApplicationDependencyQuery) CountX(ctx context.Context) int {
	count, err := adq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (adq *ApplicationDependencyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, adq.ctx, "Exist")
	switch _, err := adq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (adq *ApplicationDependencyQuery) ExistX(ctx context.Context) bool {
	exist, err := adq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ApplicationDependencyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (adq *ApplicationDependencyQuery) Clone() *ApplicationDependencyQuery {
	if adq == nil {
		return nil
	}
	return &ApplicationDependencyQuery{
		config:                  adq.config,
		ctx:                     adq.ctx.Clone(),
		order:                   append([]applicationdependency.OrderOption{}, adq.order...),
		inters:                  append([]Interceptor{}, adq.inters...),
		predicates:              append([]predicate.ApplicationDependency{}, adq.predicates...),
		withDeploymentPackageFk: adq.withDeploymentPackageFk.Clone(),
		withSourceFk:            adq.withSourceFk.Clone(),
		withTargetFk:            adq.withTargetFk.Clone(),
		// clone intermediate query.
		sql:  adq.sql.Clone(),
		path: adq.path,
	}
}

// WithDeploymentPackageFk tells the query-builder to eager-load the nodes that are connected to
// the "deployment_package_fk" edge. The optional arguments are used to configure the query builder of the edge.
func (adq *ApplicationDependencyQuery) WithDeploymentPackageFk(opts ...func(*DeploymentPackageQuery)) *ApplicationDependencyQuery {
	query := (&DeploymentPackageClient{config: adq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	adq.withDeploymentPackageFk = query
	return adq
}

// WithSourceFk tells the query-builder to eager-load the nodes that are connected to
// the "source_fk" edge. The optional arguments are used to configure the query builder of the edge.
func (adq *ApplicationDependencyQuery) WithSourceFk(opts ...func(*ApplicationQuery)) *ApplicationDependencyQuery {
	query := (&ApplicationClient{config: adq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	adq.withSourceFk = query
	return adq
}

// WithTargetFk tells the query-builder to eager-load the nodes that are connected to
// the "target_fk" edge. The optional arguments are used to configure the query builder of the edge.
func (adq *ApplicationDependencyQuery) WithTargetFk(opts ...func(*ApplicationQuery)) *ApplicationDependencyQuery {
	query := (&ApplicationClient{config: adq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	adq.withTargetFk = query
	return adq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (adq *ApplicationDependencyQuery) GroupBy(field string, fields ...string) *ApplicationDependencyGroupBy {
	adq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ApplicationDependencyGroupBy{build: adq}
	grbuild.flds = &adq.ctx.Fields
	grbuild.label = applicationdependency.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (adq *ApplicationDependencyQuery) Select(fields ...string) *ApplicationDependencySelect {
	adq.ctx.Fields = append(adq.ctx.Fields, fields...)
	sbuild := &ApplicationDependencySelect{ApplicationDependencyQuery: adq}
	sbuild.label = applicationdependency.Label
	sbuild.flds, sbuild.scan = &adq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ApplicationDependencySelect configured with the given aggregations.
func (adq *ApplicationDependencyQuery) Aggregate(fns ...AggregateFunc) *ApplicationDependencySelect {
	return adq.Select().Aggregate(fns...)
}

func (adq *ApplicationDependencyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range adq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, adq); err != nil {
				return err
			}
		}
	}
	for _, f := range adq.ctx.Fields {
		if !applicationdependency.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if adq.path != nil {
		prev, err := adq.path(ctx)
		if err != nil {
			return err
		}
		adq.sql = prev
	}
	return nil
}

func (adq *ApplicationDependencyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ApplicationDependency, error) {
	var (
		nodes       = []*ApplicationDependency{}
		withFKs     = adq.withFKs
		_spec       = adq.querySpec()
		loadedTypes = [3]bool{
			adq.withDeploymentPackageFk != nil,
			adq.withSourceFk != nil,
			adq.withTargetFk != nil,
		}
	)
	if adq.withDeploymentPackageFk != nil || adq.withSourceFk != nil || adq.withTargetFk != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, applicationdependency.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ApplicationDependency).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ApplicationDependency{config: adq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, adq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := adq.withDeploymentPackageFk; query != nil {
		if err := adq.loadDeploymentPackageFk(ctx, query, nodes, nil,
			func(n *ApplicationDependency, e *DeploymentPackage) { n.Edges.DeploymentPackageFk = e }); err != nil {
			return nil, err
		}
	}
	if query := adq.withSourceFk; query != nil {
		if err := adq.loadSourceFk(ctx, query, nodes, nil,
			func(n *ApplicationDependency, e *Application) { n.Edges.SourceFk = e }); err != nil {
			return nil, err
		}
	}
	if query := adq.withTargetFk; query != nil {
		if err := adq.loadTargetFk(ctx, query, nodes, nil,
			func(n *ApplicationDependency, e *Application) { n.Edges.TargetFk = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (adq *ApplicationDependencyQuery) loadDeploymentPackageFk(ctx context.Context, query *DeploymentPackageQuery, nodes []*ApplicationDependency, init func(*ApplicationDependency), assign func(*ApplicationDependency, *DeploymentPackage)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*ApplicationDependency)
	for i := range nodes {
		if nodes[i].deployment_package_application_dependencies == nil {
			continue
		}
		fk := *nodes[i].deployment_package_application_dependencies
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deploymentpackage.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "deployment_package_application_dependencies" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (adq *ApplicationDependencyQuery) loadSourceFk(ctx context.Context, query *ApplicationQuery, nodes []*ApplicationDependency, init func(*ApplicationDependency), assign func(*ApplicationDependency, *Application)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*ApplicationDependency)
	for i := range nodes {
		if nodes[i].application_dependency_source_fk == nil {
			continue
		}
		fk := *nodes[i].application_dependency_source_fk
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(application.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "application_dependency_source_fk" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (adq *ApplicationDependencyQuery) loadTargetFk(ctx context.Context, query *ApplicationQuery, nodes []*ApplicationDependency, init func(*ApplicationDependency), assign func(*ApplicationDependency, *Application)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*ApplicationDependency)
	for i := range nodes {
		if nodes[i].application_dependency_target_fk == nil {
			continue
		}
		fk := *nodes[i].application_dependency_target_fk
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(application.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "application_dependency_target_fk" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (adq *ApplicationDependencyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := adq.querySpec()
	_spec.Node.Columns = adq.ctx.Fields
	if len(adq.ctx.Fields) > 0 {
		_spec.Unique = adq.ctx.Unique != nil && *adq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, adq.driver, _spec)
}

func (adq *ApplicationDependencyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(applicationdependency.Table, applicationdependency.Columns, sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64))
	_spec.From = adq.sql
	if unique := adq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if adq.path != nil {
		_spec.Unique = true
	}
	if fields := adq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationdependency.FieldID)
		for i := range fields {
			if fields[i] != applicationdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := adq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := adq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := adq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := adq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (adq *ApplicationDependencyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(adq.driver.Dialect())
	t1 := builder.Table(applicationdependency.Table)
	columns := adq.ctx.Fields
	if len(columns) == 0 {
		columns = applicationdependency.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if adq.sql != nil {
		selector = adq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if adq.ctx.Unique != nil && *adq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range adq.predicates {
		p(selector)
	}
	for _, p := range adq.order {
		p(selector)
	}
	if offset := adq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := adq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ApplicationDependencyGroupBy is the group-by builder for ApplicationDependency entities.
type ApplicationDependencyGroupBy struct {
	selector
	build *ApplicationDependencyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (adgb *ApplicationDependencyGroupBy) Aggregate(fns ...AggregateFunc) *ApplicationDependencyGroupBy {
	adgb.fns = append(adgb.fns, fns...)
	return adgb
}

// Scan applies the selector query and scans the result into the given value.
func (adgb *ApplicationDependencyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, adgb.build.ctx, "GroupBy")
	if err := adgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ApplicationDependencyQuery, *ApplicationDependencyGroupBy](ctx, adgb.build, adgb, adgb.build.inters, v)
}

func (adgb *ApplicationDependencyGroupBy) sqlScan(ctx context.Context, root *ApplicationDependencyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(adgb.fns))
	for _, fn := range adgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*adgb.flds)+len(adgb.fns))
		for _, f := range *adgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*adgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := adgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ApplicationDependencySelect is the builder for selecting fields of ApplicationDependency entities.
type ApplicationDependencySelect struct {
	*ApplicationDependencyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ads *ApplicationDependencySelect) Aggregate(fns ...AggregateFunc) *ApplicationDependencySelect {
	ads.fns = append(ads.fns, fns...)
	return ads
}

// Scan applies the selector query and scans the result into the given value.
func (ads *ApplicationDependencySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ads.ctx, "Select")
	if err := ads.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ApplicationDependencyQuery, *ApplicationDependencySelect](ctx, ads.ApplicationDependencyQuery, ads, ads.inters, v)
}

func (ads *ApplicationDependencySelect) sqlScan(ctx context.Context, root *ApplicationDependencyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ads.fns))
	for _, fn := range ads.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ads.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ads.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
