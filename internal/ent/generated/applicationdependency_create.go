// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
)

// ApplicationDependencyCreate is the builder for creating a ApplicationDependency entity.
type ApplicationDependencyCreate struct {
	config
	mutation *ApplicationDependencyMutation
	hooks    []Hook
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (adc *ApplicationDependencyCreate) SetDeploymentPackageFkID(id uint64) *ApplicationDependencyCreate {
	adc.mutation.SetDeploymentPackageFkID(id)
	return adc
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (adc *ApplicationDependencyCreate) SetDeploymentPackageFk(d *DeploymentPackage) *ApplicationDependencyCreate {
	return adc.SetDeploymentPackageFkID(d.ID)
}

// SetSourceFkID sets the "source_fk" edge to the Application entity by ID.
func (adc *ApplicationDependencyCreate) SetSourceFkID(id uint64) *ApplicationDependencyCreate {
	adc.mutation.SetSourceFkID(id)
	return adc
}

// SetSourceFk sets the "source_fk" edge to the Application entity.
func (adc *ApplicationDependencyCreate) SetSourceFk(a *Application) *ApplicationDependencyCreate {
	return adc.SetSourceFkID(a.ID)
}

// SetTargetFkID sets the "target_fk" edge to the Application entity by ID.
func (adc *ApplicationDependencyCreate) SetTargetFkID(id uint64) *ApplicationDependencyCreate {
	adc.mutation.SetTargetFkID(id)
	return adc
}

// SetTargetFk sets the "target_fk" edge to the Application entity.
func (adc *ApplicationDependencyCreate) SetTargetFk(a *Application) *ApplicationDependencyCreate {
	return adc.SetTargetFkID(a.ID)
}

// Mutation returns the ApplicationDependencyMutation object of the builder.
func (adc *ApplicationDependencyCreate) Mutation() *ApplicationDependencyMutation {
	return adc.mutation
}

// Save creates the ApplicationDependency in the database.
func (adc *ApplicationDependencyCreate) Save(ctx context.Context) (*ApplicationDependency, error) {
	return withHooks(ctx, adc.sqlSave, adc.mutation, adc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (adc *ApplicationDependencyCreate) SaveX(ctx context.Context) *ApplicationDependency {
	v, err := adc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adc *ApplicationDependencyCreate) Exec(ctx context.Context) error {
	_, err := adc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adc *ApplicationDependencyCreate) ExecX(ctx context.Context) {
	if err := adc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adc *ApplicationDependencyCreate) check() error {
	if _, ok := adc.mutation.DeploymentPackageFkID(); !ok {
		return &ValidationError{Name: "deployment_package_fk", err: errors.New(`generated: missing required edge "ApplicationDependency.deployment_package_fk"`)}
	}
	if _, ok := adc.mutation.SourceFkID(); !ok {
		return &ValidationError{Name: "source_fk", err: errors.New(`generated: missing required edge "ApplicationDependency.source_fk"`)}
	}
	if _, ok := adc.mutation.TargetFkID(); !ok {
		return &ValidationError{Name: "target_fk", err: errors.New(`generated: missing required edge "ApplicationDependency.target_fk"`)}
	}
	return nil
}

func (adc *ApplicationDependencyCreate) sqlSave(ctx context.Context) (*ApplicationDependency, error) {
	if err := adc.check(); err != nil {
		return nil, err
	}
	_node, _spec := adc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	adc.mutation.id = &_node.ID
	adc.mutation.done = true
	return _node, nil
}

func (adc *ApplicationDependencyCreate) createSpec() (*ApplicationDependency, *sqlgraph.CreateSpec) {
	var (
		_node = &ApplicationDependency{config: adc.config}
		_spec = sqlgraph.NewCreateSpec(applicationdependency.Table, sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64))
	)
	if nodes := adc.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationdependency.DeploymentPackageFkTable,
			Columns: []string{applicationdependency.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deployment_package_application_dependencies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := adc.mutation.SourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.SourceFkTable,
			Columns: []string{applicationdependency.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.application_dependency_source_fk = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := adc.mutation.TargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationdependency.TargetFkTable,
			Columns: []string{applicationdependency.TargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.application_dependency_target_fk = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicationDependencyCreateBulk is the builder for creating many ApplicationDependency entities in bulk.
type ApplicationDependencyCreateBulk struct {
	config
	builders []*ApplicationDependencyCreate
}

// Save creates the ApplicationDependency entities in the database.
func (adcb *ApplicationDependencyCreateBulk) Save(ctx context.Context) ([]*ApplicationDependency, error) {
	specs := make([]*sqlgraph.CreateSpec, len(adcb.builders))
	nodes := make([]*ApplicationDependency, len(adcb.builders))
	mutators := make([]Mutator, len(adcb.builders))
	for i := range adcb.builders {
		func(i int, root context.Context) {
			builder := adcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicationDependencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adcb *ApplicationDependencyCreateBulk) SaveX(ctx context.Context) []*ApplicationDependency {
	v, err := adcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adcb *ApplicationDependencyCreateBulk) Exec(ctx context.Context) error {
	_, err := adcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adcb *ApplicationDependencyCreateBulk) ExecX(ctx context.Context) {
	if err := adcb.Exec(ctx); err != nil {
		panic(err)
	}
}
