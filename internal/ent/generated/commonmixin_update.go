// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/commonmixin"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// CommonMixinUpdate is the builder for updating CommonMixin entities.
type CommonMixinUpdate struct {
	config
	hooks    []Hook
	mutation *CommonMixinMutation
}

// Where appends a list predicates to the CommonMixinUpdate builder.
func (cmu *CommonMixinUpdate) Where(ps ...predicate.CommonMixin) *CommonMixinUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetName sets the "name" field.
func (cmu *CommonMixinUpdate) SetName(s string) *CommonMixinUpdate {
	cmu.mutation.SetName(s)
	return cmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cmu *CommonMixinUpdate) SetNillableName(s *string) *CommonMixinUpdate {
	if s != nil {
		cmu.SetName(*s)
	}
	return cmu
}

// SetDisplayName sets the "display_name" field.
func (cmu *CommonMixinUpdate) SetDisplayName(s string) *CommonMixinUpdate {
	cmu.mutation.SetDisplayName(s)
	return cmu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cmu *CommonMixinUpdate) SetNillableDisplayName(s *string) *CommonMixinUpdate {
	if s != nil {
		cmu.SetDisplayName(*s)
	}
	return cmu
}

// ClearDisplayName clears the value of the "display_name" field.
func (cmu *CommonMixinUpdate) ClearDisplayName() *CommonMixinUpdate {
	cmu.mutation.ClearDisplayName()
	return cmu
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (cmu *CommonMixinUpdate) SetDisplayNameLc(s string) *CommonMixinUpdate {
	cmu.mutation.SetDisplayNameLc(s)
	return cmu
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (cmu *CommonMixinUpdate) SetNillableDisplayNameLc(s *string) *CommonMixinUpdate {
	if s != nil {
		cmu.SetDisplayNameLc(*s)
	}
	return cmu
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (cmu *CommonMixinUpdate) ClearDisplayNameLc() *CommonMixinUpdate {
	cmu.mutation.ClearDisplayNameLc()
	return cmu
}

// SetDescription sets the "description" field.
func (cmu *CommonMixinUpdate) SetDescription(s string) *CommonMixinUpdate {
	cmu.mutation.SetDescription(s)
	return cmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cmu *CommonMixinUpdate) SetNillableDescription(s *string) *CommonMixinUpdate {
	if s != nil {
		cmu.SetDescription(*s)
	}
	return cmu
}

// ClearDescription clears the value of the "description" field.
func (cmu *CommonMixinUpdate) ClearDescription() *CommonMixinUpdate {
	cmu.mutation.ClearDescription()
	return cmu
}

// SetUpdateTime sets the "update_time" field.
func (cmu *CommonMixinUpdate) SetUpdateTime(t time.Time) *CommonMixinUpdate {
	cmu.mutation.SetUpdateTime(t)
	return cmu
}

// Mutation returns the CommonMixinMutation object of the builder.
func (cmu *CommonMixinUpdate) Mutation() *CommonMixinMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CommonMixinUpdate) Save(ctx context.Context) (int, error) {
	cmu.defaults()
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CommonMixinUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CommonMixinUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CommonMixinUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *CommonMixinUpdate) defaults() {
	if _, ok := cmu.mutation.UpdateTime(); !ok {
		v := commonmixin.UpdateDefaultUpdateTime()
		cmu.mutation.SetUpdateTime(v)
	}
}

func (cmu *CommonMixinUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(commonmixin.Table, commonmixin.Columns, sqlgraph.NewFieldSpec(commonmixin.FieldID, field.TypeUint64))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.Name(); ok {
		_spec.SetField(commonmixin.FieldName, field.TypeString, value)
	}
	if value, ok := cmu.mutation.DisplayName(); ok {
		_spec.SetField(commonmixin.FieldDisplayName, field.TypeString, value)
	}
	if cmu.mutation.DisplayNameCleared() {
		_spec.ClearField(commonmixin.FieldDisplayName, field.TypeString)
	}
	if value, ok := cmu.mutation.DisplayNameLc(); ok {
		_spec.SetField(commonmixin.FieldDisplayNameLc, field.TypeString, value)
	}
	if cmu.mutation.DisplayNameLcCleared() {
		_spec.ClearField(commonmixin.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := cmu.mutation.Description(); ok {
		_spec.SetField(commonmixin.FieldDescription, field.TypeString, value)
	}
	if cmu.mutation.DescriptionCleared() {
		_spec.ClearField(commonmixin.FieldDescription, field.TypeString)
	}
	if value, ok := cmu.mutation.UpdateTime(); ok {
		_spec.SetField(commonmixin.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commonmixin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// CommonMixinUpdateOne is the builder for updating a single CommonMixin entity.
type CommonMixinUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommonMixinMutation
}

// SetName sets the "name" field.
func (cmuo *CommonMixinUpdateOne) SetName(s string) *CommonMixinUpdateOne {
	cmuo.mutation.SetName(s)
	return cmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cmuo *CommonMixinUpdateOne) SetNillableName(s *string) *CommonMixinUpdateOne {
	if s != nil {
		cmuo.SetName(*s)
	}
	return cmuo
}

// SetDisplayName sets the "display_name" field.
func (cmuo *CommonMixinUpdateOne) SetDisplayName(s string) *CommonMixinUpdateOne {
	cmuo.mutation.SetDisplayName(s)
	return cmuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cmuo *CommonMixinUpdateOne) SetNillableDisplayName(s *string) *CommonMixinUpdateOne {
	if s != nil {
		cmuo.SetDisplayName(*s)
	}
	return cmuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (cmuo *CommonMixinUpdateOne) ClearDisplayName() *CommonMixinUpdateOne {
	cmuo.mutation.ClearDisplayName()
	return cmuo
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (cmuo *CommonMixinUpdateOne) SetDisplayNameLc(s string) *CommonMixinUpdateOne {
	cmuo.mutation.SetDisplayNameLc(s)
	return cmuo
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (cmuo *CommonMixinUpdateOne) SetNillableDisplayNameLc(s *string) *CommonMixinUpdateOne {
	if s != nil {
		cmuo.SetDisplayNameLc(*s)
	}
	return cmuo
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (cmuo *CommonMixinUpdateOne) ClearDisplayNameLc() *CommonMixinUpdateOne {
	cmuo.mutation.ClearDisplayNameLc()
	return cmuo
}

// SetDescription sets the "description" field.
func (cmuo *CommonMixinUpdateOne) SetDescription(s string) *CommonMixinUpdateOne {
	cmuo.mutation.SetDescription(s)
	return cmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cmuo *CommonMixinUpdateOne) SetNillableDescription(s *string) *CommonMixinUpdateOne {
	if s != nil {
		cmuo.SetDescription(*s)
	}
	return cmuo
}

// ClearDescription clears the value of the "description" field.
func (cmuo *CommonMixinUpdateOne) ClearDescription() *CommonMixinUpdateOne {
	cmuo.mutation.ClearDescription()
	return cmuo
}

// SetUpdateTime sets the "update_time" field.
func (cmuo *CommonMixinUpdateOne) SetUpdateTime(t time.Time) *CommonMixinUpdateOne {
	cmuo.mutation.SetUpdateTime(t)
	return cmuo
}

// Mutation returns the CommonMixinMutation object of the builder.
func (cmuo *CommonMixinUpdateOne) Mutation() *CommonMixinMutation {
	return cmuo.mutation
}

// Where appends a list predicates to the CommonMixinUpdate builder.
func (cmuo *CommonMixinUpdateOne) Where(ps ...predicate.CommonMixin) *CommonMixinUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CommonMixinUpdateOne) Select(field string, fields ...string) *CommonMixinUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CommonMixin entity.
func (cmuo *CommonMixinUpdateOne) Save(ctx context.Context) (*CommonMixin, error) {
	cmuo.defaults()
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CommonMixinUpdateOne) SaveX(ctx context.Context) *CommonMixin {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CommonMixinUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CommonMixinUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *CommonMixinUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdateTime(); !ok {
		v := commonmixin.UpdateDefaultUpdateTime()
		cmuo.mutation.SetUpdateTime(v)
	}
}

func (cmuo *CommonMixinUpdateOne) sqlSave(ctx context.Context) (_node *CommonMixin, err error) {
	_spec := sqlgraph.NewUpdateSpec(commonmixin.Table, commonmixin.Columns, sqlgraph.NewFieldSpec(commonmixin.FieldID, field.TypeUint64))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CommonMixin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commonmixin.FieldID)
		for _, f := range fields {
			if !commonmixin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != commonmixin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.Name(); ok {
		_spec.SetField(commonmixin.FieldName, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.DisplayName(); ok {
		_spec.SetField(commonmixin.FieldDisplayName, field.TypeString, value)
	}
	if cmuo.mutation.DisplayNameCleared() {
		_spec.ClearField(commonmixin.FieldDisplayName, field.TypeString)
	}
	if value, ok := cmuo.mutation.DisplayNameLc(); ok {
		_spec.SetField(commonmixin.FieldDisplayNameLc, field.TypeString, value)
	}
	if cmuo.mutation.DisplayNameLcCleared() {
		_spec.ClearField(commonmixin.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := cmuo.mutation.Description(); ok {
		_spec.SetField(commonmixin.FieldDescription, field.TypeString, value)
	}
	if cmuo.mutation.DescriptionCleared() {
		_spec.ClearField(commonmixin.FieldDescription, field.TypeString)
	}
	if value, ok := cmuo.mutation.UpdateTime(); ok {
		_spec.SetField(commonmixin.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &CommonMixin{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commonmixin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
