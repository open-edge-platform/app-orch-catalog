// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/ignoredresource"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/registry"
)

// ApplicationCreate is the builder for creating a Application entity.
type ApplicationCreate struct {
	config
	mutation *ApplicationMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *ApplicationCreate) SetName(s string) *ApplicationCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDisplayName sets the "display_name" field.
func (ac *ApplicationCreate) SetDisplayName(s string) *ApplicationCreate {
	ac.mutation.SetDisplayName(s)
	return ac
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableDisplayName(s *string) *ApplicationCreate {
	if s != nil {
		ac.SetDisplayName(*s)
	}
	return ac
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (ac *ApplicationCreate) SetDisplayNameLc(s string) *ApplicationCreate {
	ac.mutation.SetDisplayNameLc(s)
	return ac
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableDisplayNameLc(s *string) *ApplicationCreate {
	if s != nil {
		ac.SetDisplayNameLc(*s)
	}
	return ac
}

// SetDescription sets the "description" field.
func (ac *ApplicationCreate) SetDescription(s string) *ApplicationCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableDescription(s *string) *ApplicationCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetCreateTime sets the "create_time" field.
func (ac *ApplicationCreate) SetCreateTime(t time.Time) *ApplicationCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableCreateTime(t *time.Time) *ApplicationCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *ApplicationCreate) SetUpdateTime(t time.Time) *ApplicationCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableUpdateTime(t *time.Time) *ApplicationCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetProjectUUID sets the "project_uuid" field.
func (ac *ApplicationCreate) SetProjectUUID(s string) *ApplicationCreate {
	ac.mutation.SetProjectUUID(s)
	return ac
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableProjectUUID(s *string) *ApplicationCreate {
	if s != nil {
		ac.SetProjectUUID(*s)
	}
	return ac
}

// SetVersion sets the "version" field.
func (ac *ApplicationCreate) SetVersion(s string) *ApplicationCreate {
	ac.mutation.SetVersion(s)
	return ac
}

// SetChartName sets the "chart_name" field.
func (ac *ApplicationCreate) SetChartName(s string) *ApplicationCreate {
	ac.mutation.SetChartName(s)
	return ac
}

// SetChartVersion sets the "chart_version" field.
func (ac *ApplicationCreate) SetChartVersion(s string) *ApplicationCreate {
	ac.mutation.SetChartVersion(s)
	return ac
}

// SetKind sets the "kind" field.
func (ac *ApplicationCreate) SetKind(s string) *ApplicationCreate {
	ac.mutation.SetKind(s)
	return ac
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableKind(s *string) *ApplicationCreate {
	if s != nil {
		ac.SetKind(*s)
	}
	return ac
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (ac *ApplicationCreate) AddProfileIDs(ids ...uint64) *ApplicationCreate {
	ac.mutation.AddProfileIDs(ids...)
	return ac
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (ac *ApplicationCreate) AddProfiles(p ...*Profile) *ApplicationCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddProfileIDs(ids...)
}

// SetRegistryFkID sets the "registry_fk" edge to the Registry entity by ID.
func (ac *ApplicationCreate) SetRegistryFkID(id uint64) *ApplicationCreate {
	ac.mutation.SetRegistryFkID(id)
	return ac
}

// SetRegistryFk sets the "registry_fk" edge to the Registry entity.
func (ac *ApplicationCreate) SetRegistryFk(r *Registry) *ApplicationCreate {
	return ac.SetRegistryFkID(r.ID)
}

// SetImageRegistryFkID sets the "image_registry_fk" edge to the Registry entity by ID.
func (ac *ApplicationCreate) SetImageRegistryFkID(id uint64) *ApplicationCreate {
	ac.mutation.SetImageRegistryFkID(id)
	return ac
}

// SetNillableImageRegistryFkID sets the "image_registry_fk" edge to the Registry entity by ID if the given value is not nil.
func (ac *ApplicationCreate) SetNillableImageRegistryFkID(id *uint64) *ApplicationCreate {
	if id != nil {
		ac = ac.SetImageRegistryFkID(*id)
	}
	return ac
}

// SetImageRegistryFk sets the "image_registry_fk" edge to the Registry entity.
func (ac *ApplicationCreate) SetImageRegistryFk(r *Registry) *ApplicationCreate {
	return ac.SetImageRegistryFkID(r.ID)
}

// AddDeploymentPackageFkIDs adds the "deployment_package_fk" edge to the DeploymentPackage entity by IDs.
func (ac *ApplicationCreate) AddDeploymentPackageFkIDs(ids ...uint64) *ApplicationCreate {
	ac.mutation.AddDeploymentPackageFkIDs(ids...)
	return ac
}

// AddDeploymentPackageFk adds the "deployment_package_fk" edges to the DeploymentPackage entity.
func (ac *ApplicationCreate) AddDeploymentPackageFk(d ...*DeploymentPackage) *ApplicationCreate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDeploymentPackageFkIDs(ids...)
}

// AddDependencySourceFkIDs adds the "dependency_source_fk" edge to the ApplicationDependency entity by IDs.
func (ac *ApplicationCreate) AddDependencySourceFkIDs(ids ...uint64) *ApplicationCreate {
	ac.mutation.AddDependencySourceFkIDs(ids...)
	return ac
}

// AddDependencySourceFk adds the "dependency_source_fk" edges to the ApplicationDependency entity.
func (ac *ApplicationCreate) AddDependencySourceFk(a ...*ApplicationDependency) *ApplicationCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddDependencySourceFkIDs(ids...)
}

// AddDependencyTargetFkIDs adds the "dependency_target_fk" edge to the ApplicationDependency entity by IDs.
func (ac *ApplicationCreate) AddDependencyTargetFkIDs(ids ...uint64) *ApplicationCreate {
	ac.mutation.AddDependencyTargetFkIDs(ids...)
	return ac
}

// AddDependencyTargetFk adds the "dependency_target_fk" edges to the ApplicationDependency entity.
func (ac *ApplicationCreate) AddDependencyTargetFk(a ...*ApplicationDependency) *ApplicationCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddDependencyTargetFkIDs(ids...)
}

// SetDefaultProfileID sets the "default_profile" edge to the Profile entity by ID.
func (ac *ApplicationCreate) SetDefaultProfileID(id uint64) *ApplicationCreate {
	ac.mutation.SetDefaultProfileID(id)
	return ac
}

// SetNillableDefaultProfileID sets the "default_profile" edge to the Profile entity by ID if the given value is not nil.
func (ac *ApplicationCreate) SetNillableDefaultProfileID(id *uint64) *ApplicationCreate {
	if id != nil {
		ac = ac.SetDefaultProfileID(*id)
	}
	return ac
}

// SetDefaultProfile sets the "default_profile" edge to the Profile entity.
func (ac *ApplicationCreate) SetDefaultProfile(p *Profile) *ApplicationCreate {
	return ac.SetDefaultProfileID(p.ID)
}

// AddIgnoredResourceIDs adds the "ignored_resources" edge to the IgnoredResource entity by IDs.
func (ac *ApplicationCreate) AddIgnoredResourceIDs(ids ...uint64) *ApplicationCreate {
	ac.mutation.AddIgnoredResourceIDs(ids...)
	return ac
}

// AddIgnoredResources adds the "ignored_resources" edges to the IgnoredResource entity.
func (ac *ApplicationCreate) AddIgnoredResources(i ...*IgnoredResource) *ApplicationCreate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ac.AddIgnoredResourceIDs(ids...)
}

// Mutation returns the ApplicationMutation object of the builder.
func (ac *ApplicationCreate) Mutation() *ApplicationMutation {
	return ac.mutation
}

// Save creates the Application in the database.
func (ac *ApplicationCreate) Save(ctx context.Context) (*Application, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ApplicationCreate) SaveX(ctx context.Context) *Application {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ApplicationCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ApplicationCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ApplicationCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := application.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := application.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.ProjectUUID(); !ok {
		v := application.DefaultProjectUUID
		ac.mutation.SetProjectUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ApplicationCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Application.name"`)}
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "Application.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "Application.update_time"`)}
	}
	if _, ok := ac.mutation.ProjectUUID(); !ok {
		return &ValidationError{Name: "project_uuid", err: errors.New(`generated: missing required field "Application.project_uuid"`)}
	}
	if _, ok := ac.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`generated: missing required field "Application.version"`)}
	}
	if _, ok := ac.mutation.ChartName(); !ok {
		return &ValidationError{Name: "chart_name", err: errors.New(`generated: missing required field "Application.chart_name"`)}
	}
	if _, ok := ac.mutation.ChartVersion(); !ok {
		return &ValidationError{Name: "chart_version", err: errors.New(`generated: missing required field "Application.chart_version"`)}
	}
	if _, ok := ac.mutation.RegistryFkID(); !ok {
		return &ValidationError{Name: "registry_fk", err: errors.New(`generated: missing required edge "Application.registry_fk"`)}
	}
	return nil
}

func (ac *ApplicationCreate) sqlSave(ctx context.Context) (*Application, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ApplicationCreate) createSpec() (*Application, *sqlgraph.CreateSpec) {
	var (
		_node = &Application{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(application.Table, sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64))
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.DisplayName(); ok {
		_spec.SetField(application.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := ac.mutation.DisplayNameLc(); ok {
		_spec.SetField(application.FieldDisplayNameLc, field.TypeString, value)
		_node.DisplayNameLc = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(application.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(application.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(application.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.ProjectUUID(); ok {
		_spec.SetField(application.FieldProjectUUID, field.TypeString, value)
		_node.ProjectUUID = value
	}
	if value, ok := ac.mutation.Version(); ok {
		_spec.SetField(application.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ac.mutation.ChartName(); ok {
		_spec.SetField(application.FieldChartName, field.TypeString, value)
		_node.ChartName = value
	}
	if value, ok := ac.mutation.ChartVersion(); ok {
		_spec.SetField(application.FieldChartVersion, field.TypeString, value)
		_node.ChartVersion = value
	}
	if value, ok := ac.mutation.Kind(); ok {
		_spec.SetField(application.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if nodes := ac.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.ProfilesTable,
			Columns: []string{application.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RegistryFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.RegistryFkTable,
			Columns: []string{application.RegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.registry_applications = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ImageRegistryFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ImageRegistryFkTable,
			Columns: []string{application.ImageRegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.registry_application_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   application.DeploymentPackageFkTable,
			Columns: application.DeploymentPackageFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DependencySourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencySourceFkTable,
			Columns: []string{application.DependencySourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DependencyTargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencyTargetFkTable,
			Columns: []string{application.DependencyTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DefaultProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.DefaultProfileTable,
			Columns: []string{application.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.application_default_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.IgnoredResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.IgnoredResourcesTable,
			Columns: []string{application.IgnoredResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicationCreateBulk is the builder for creating many Application entities in bulk.
type ApplicationCreateBulk struct {
	config
	builders []*ApplicationCreate
}

// Save creates the Application entities in the database.
func (acb *ApplicationCreateBulk) Save(ctx context.Context) ([]*Application, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Application, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ApplicationCreateBulk) SaveX(ctx context.Context) []*Application {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
