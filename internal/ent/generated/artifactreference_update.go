// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifact"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifactreference"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ArtifactReferenceUpdate is the builder for updating ArtifactReference entities.
type ArtifactReferenceUpdate struct {
	config
	hooks    []Hook
	mutation *ArtifactReferenceMutation
}

// Where appends a list predicates to the ArtifactReferenceUpdate builder.
func (aru *ArtifactReferenceUpdate) Where(ps ...predicate.ArtifactReference) *ArtifactReferenceUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetPurpose sets the "purpose" field.
func (aru *ArtifactReferenceUpdate) SetPurpose(s string) *ArtifactReferenceUpdate {
	aru.mutation.SetPurpose(s)
	return aru
}

// SetArtifactID sets the "artifact" edge to the Artifact entity by ID.
func (aru *ArtifactReferenceUpdate) SetArtifactID(id uint64) *ArtifactReferenceUpdate {
	aru.mutation.SetArtifactID(id)
	return aru
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (aru *ArtifactReferenceUpdate) SetArtifact(a *Artifact) *ArtifactReferenceUpdate {
	return aru.SetArtifactID(a.ID)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (aru *ArtifactReferenceUpdate) SetDeploymentPackageFkID(id uint64) *ArtifactReferenceUpdate {
	aru.mutation.SetDeploymentPackageFkID(id)
	return aru
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (aru *ArtifactReferenceUpdate) SetDeploymentPackageFk(d *DeploymentPackage) *ArtifactReferenceUpdate {
	return aru.SetDeploymentPackageFkID(d.ID)
}

// Mutation returns the ArtifactReferenceMutation object of the builder.
func (aru *ArtifactReferenceUpdate) Mutation() *ArtifactReferenceMutation {
	return aru.mutation
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (aru *ArtifactReferenceUpdate) ClearArtifact() *ArtifactReferenceUpdate {
	aru.mutation.ClearArtifact()
	return aru
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (aru *ArtifactReferenceUpdate) ClearDeploymentPackageFk() *ArtifactReferenceUpdate {
	aru.mutation.ClearDeploymentPackageFk()
	return aru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *ArtifactReferenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *ArtifactReferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *ArtifactReferenceUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *ArtifactReferenceUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *ArtifactReferenceUpdate) check() error {
	if _, ok := aru.mutation.ArtifactID(); aru.mutation.ArtifactCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ArtifactReference.artifact"`)
	}
	if _, ok := aru.mutation.DeploymentPackageFkID(); aru.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ArtifactReference.deployment_package_fk"`)
	}
	return nil
}

func (aru *ArtifactReferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(artifactreference.Table, artifactreference.Columns, sqlgraph.NewFieldSpec(artifactreference.FieldID, field.TypeUint64))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.Purpose(); ok {
		_spec.SetField(artifactreference.FieldPurpose, field.TypeString, value)
	}
	if aru.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   artifactreference.ArtifactTable,
			Columns: []string{artifactreference.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   artifactreference.ArtifactTable,
			Columns: []string{artifactreference.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifactreference.DeploymentPackageFkTable,
			Columns: []string{artifactreference.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifactreference.DeploymentPackageFkTable,
			Columns: []string{artifactreference.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifactreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// ArtifactReferenceUpdateOne is the builder for updating a single ArtifactReference entity.
type ArtifactReferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtifactReferenceMutation
}

// SetPurpose sets the "purpose" field.
func (aruo *ArtifactReferenceUpdateOne) SetPurpose(s string) *ArtifactReferenceUpdateOne {
	aruo.mutation.SetPurpose(s)
	return aruo
}

// SetArtifactID sets the "artifact" edge to the Artifact entity by ID.
func (aruo *ArtifactReferenceUpdateOne) SetArtifactID(id uint64) *ArtifactReferenceUpdateOne {
	aruo.mutation.SetArtifactID(id)
	return aruo
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (aruo *ArtifactReferenceUpdateOne) SetArtifact(a *Artifact) *ArtifactReferenceUpdateOne {
	return aruo.SetArtifactID(a.ID)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (aruo *ArtifactReferenceUpdateOne) SetDeploymentPackageFkID(id uint64) *ArtifactReferenceUpdateOne {
	aruo.mutation.SetDeploymentPackageFkID(id)
	return aruo
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (aruo *ArtifactReferenceUpdateOne) SetDeploymentPackageFk(d *DeploymentPackage) *ArtifactReferenceUpdateOne {
	return aruo.SetDeploymentPackageFkID(d.ID)
}

// Mutation returns the ArtifactReferenceMutation object of the builder.
func (aruo *ArtifactReferenceUpdateOne) Mutation() *ArtifactReferenceMutation {
	return aruo.mutation
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (aruo *ArtifactReferenceUpdateOne) ClearArtifact() *ArtifactReferenceUpdateOne {
	aruo.mutation.ClearArtifact()
	return aruo
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (aruo *ArtifactReferenceUpdateOne) ClearDeploymentPackageFk() *ArtifactReferenceUpdateOne {
	aruo.mutation.ClearDeploymentPackageFk()
	return aruo
}

// Where appends a list predicates to the ArtifactReferenceUpdate builder.
func (aruo *ArtifactReferenceUpdateOne) Where(ps ...predicate.ArtifactReference) *ArtifactReferenceUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *ArtifactReferenceUpdateOne) Select(field string, fields ...string) *ArtifactReferenceUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated ArtifactReference entity.
func (aruo *ArtifactReferenceUpdateOne) Save(ctx context.Context) (*ArtifactReference, error) {
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *ArtifactReferenceUpdateOne) SaveX(ctx context.Context) *ArtifactReference {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *ArtifactReferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *ArtifactReferenceUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *ArtifactReferenceUpdateOne) check() error {
	if _, ok := aruo.mutation.ArtifactID(); aruo.mutation.ArtifactCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ArtifactReference.artifact"`)
	}
	if _, ok := aruo.mutation.DeploymentPackageFkID(); aruo.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ArtifactReference.deployment_package_fk"`)
	}
	return nil
}

func (aruo *ArtifactReferenceUpdateOne) sqlSave(ctx context.Context) (_node *ArtifactReference, err error) {
	if err := aruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(artifactreference.Table, artifactreference.Columns, sqlgraph.NewFieldSpec(artifactreference.FieldID, field.TypeUint64))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ArtifactReference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artifactreference.FieldID)
		for _, f := range fields {
			if !artifactreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != artifactreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.Purpose(); ok {
		_spec.SetField(artifactreference.FieldPurpose, field.TypeString, value)
	}
	if aruo.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   artifactreference.ArtifactTable,
			Columns: []string{artifactreference.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   artifactreference.ArtifactTable,
			Columns: []string{artifactreference.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifactreference.DeploymentPackageFkTable,
			Columns: []string{artifactreference.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifactreference.DeploymentPackageFkTable,
			Columns: []string{artifactreference.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArtifactReference{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifactreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
