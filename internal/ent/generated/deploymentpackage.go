// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
)

// DeploymentPackage is the model entity for the DeploymentPackage schema.
type DeploymentPackage struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// A unique name. Used in HTTP network paths.
	Name string `json:"name,omitempty"`
	// A display name.
	DisplayName string `json:"display_name,omitempty"`
	// Lowercase display name.
	DisplayNameLc string `json:"display_name_lc,omitempty"`
	// A description. Displayed on user interfaces.
	Description string `json:"description,omitempty"`
	// The creation timestamp.
	CreateTime time.Time `json:"create_time,omitempty"`
	// The last update timestamp.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// UUID of the owner project.
	ProjectUUID string `json:"project_uuid,omitempty"`
	// Version of the Deployment Package. Used in combination with the name to identify a unique Deployment Package within the catalog.
	Version string `json:"version,omitempty"`
	// Indicates whether Deployment Package is deployed and available. Cannot be deleted while true
	IsDeployed bool `json:"is_deployed,omitempty"`
	// Indicates whether Deployment Package should be seen by user. Should not be deployed while false
	IsVisible bool `json:"is_visible,omitempty"`
	// Indicates whether Deployment Package can be deployed multiple times in the same realm.
	AllowsMultipleDeployments bool `json:"allows_multiple_deployments,omitempty"`
	// Deployment package kind; normal, addon, extension
	Kind string `json:"kind,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentPackageQuery when eager-loading is set.
	Edges                              DeploymentPackageEdges `json:"edges"`
	deployment_package_default_profile *uint64
	selectValues                       sql.SelectValues
}

// DeploymentPackageEdges holds the relations/edges for other nodes in the graph.
type DeploymentPackageEdges struct {
	// Deployment Package contains 0 to many Deployment Profiles
	DeploymentProfiles []*DeploymentProfile `json:"deployment_profiles,omitempty"`
	// Deployment Package can refer to 0-many Applications
	Applications []*Application `json:"applications,omitempty"`
	// Deployment Package can refer to an Artifact as Icon
	Icon []*Artifact `json:"icon,omitempty"`
	// Deployment Package can refer to an Artifact as Icon
	Thumbnail []*Artifact `json:"thumbnail,omitempty"`
	// Default Deployment Profile to be used when deploying this Deployment Package
	DefaultProfile *DeploymentProfile `json:"default_profile,omitempty"`
	// Application Dependencies to use when deploying this Deployment Package
	ApplicationDependencies []*ApplicationDependency `json:"application_dependencies,omitempty"`
	// Application Namespaces to use/create for Applications when deploying this Deployment Package
	ApplicationNamespaces []*ApplicationNamespace `json:"application_namespaces,omitempty"`
	// Namespaces to create when deploying this Deployment Package
	Namespaces []*Namespace `json:"namespaces,omitempty"`
	// Extensions to use when deploying this Deployment Package
	Extensions []*Extension `json:"extensions,omitempty"`
	// Various artifacts for use as icon, thumbnail or extensions.
	Artifacts []*ArtifactReference `json:"artifacts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// DeploymentProfilesOrErr returns the DeploymentProfiles value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentPackageEdges) DeploymentProfilesOrErr() ([]*DeploymentProfile, error) {
	if e.loadedTypes[0] {
		return e.DeploymentProfiles, nil
	}
	return nil, &NotLoadedError{edge: "deployment_profiles"}
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentPackageEdges) ApplicationsOrErr() ([]*Application, error) {
	if e.loadedTypes[1] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// IconOrErr returns the Icon value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentPackageEdges) IconOrErr() ([]*Artifact, error) {
	if e.loadedTypes[2] {
		return e.Icon, nil
	}
	return nil, &NotLoadedError{edge: "icon"}
}

// ThumbnailOrErr returns the Thumbnail value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentPackageEdges) ThumbnailOrErr() ([]*Artifact, error) {
	if e.loadedTypes[3] {
		return e.Thumbnail, nil
	}
	return nil, &NotLoadedError{edge: "thumbnail"}
}

// DefaultProfileOrErr returns the DefaultProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentPackageEdges) DefaultProfileOrErr() (*DeploymentProfile, error) {
	if e.loadedTypes[4] {
		if e.DefaultProfile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deploymentprofile.Label}
		}
		return e.DefaultProfile, nil
	}
	return nil, &NotLoadedError{edge: "default_profile"}
}

// ApplicationDependenciesOrErr returns the ApplicationDependencies value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentPackageEdges) ApplicationDependenciesOrErr() ([]*ApplicationDependency, error) {
	if e.loadedTypes[5] {
		return e.ApplicationDependencies, nil
	}
	return nil, &NotLoadedError{edge: "application_dependencies"}
}

// ApplicationNamespacesOrErr returns the ApplicationNamespaces value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentPackageEdges) ApplicationNamespacesOrErr() ([]*ApplicationNamespace, error) {
	if e.loadedTypes[6] {
		return e.ApplicationNamespaces, nil
	}
	return nil, &NotLoadedError{edge: "application_namespaces"}
}

// NamespacesOrErr returns the Namespaces value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentPackageEdges) NamespacesOrErr() ([]*Namespace, error) {
	if e.loadedTypes[7] {
		return e.Namespaces, nil
	}
	return nil, &NotLoadedError{edge: "namespaces"}
}

// ExtensionsOrErr returns the Extensions value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentPackageEdges) ExtensionsOrErr() ([]*Extension, error) {
	if e.loadedTypes[8] {
		return e.Extensions, nil
	}
	return nil, &NotLoadedError{edge: "extensions"}
}

// ArtifactsOrErr returns the Artifacts value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentPackageEdges) ArtifactsOrErr() ([]*ArtifactReference, error) {
	if e.loadedTypes[9] {
		return e.Artifacts, nil
	}
	return nil, &NotLoadedError{edge: "artifacts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeploymentPackage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deploymentpackage.FieldIsDeployed, deploymentpackage.FieldIsVisible, deploymentpackage.FieldAllowsMultipleDeployments:
			values[i] = new(sql.NullBool)
		case deploymentpackage.FieldID:
			values[i] = new(sql.NullInt64)
		case deploymentpackage.FieldName, deploymentpackage.FieldDisplayName, deploymentpackage.FieldDisplayNameLc, deploymentpackage.FieldDescription, deploymentpackage.FieldProjectUUID, deploymentpackage.FieldVersion, deploymentpackage.FieldKind:
			values[i] = new(sql.NullString)
		case deploymentpackage.FieldCreateTime, deploymentpackage.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case deploymentpackage.ForeignKeys[0]: // deployment_package_default_profile
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeploymentPackage fields.
func (dp *DeploymentPackage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deploymentpackage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dp.ID = uint64(value.Int64)
		case deploymentpackage.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dp.Name = value.String
			}
		case deploymentpackage.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				dp.DisplayName = value.String
			}
		case deploymentpackage.FieldDisplayNameLc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name_lc", values[i])
			} else if value.Valid {
				dp.DisplayNameLc = value.String
			}
		case deploymentpackage.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dp.Description = value.String
			}
		case deploymentpackage.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dp.CreateTime = value.Time
			}
		case deploymentpackage.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dp.UpdateTime = value.Time
			}
		case deploymentpackage.FieldProjectUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_uuid", values[i])
			} else if value.Valid {
				dp.ProjectUUID = value.String
			}
		case deploymentpackage.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				dp.Version = value.String
			}
		case deploymentpackage.FieldIsDeployed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deployed", values[i])
			} else if value.Valid {
				dp.IsDeployed = value.Bool
			}
		case deploymentpackage.FieldIsVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_visible", values[i])
			} else if value.Valid {
				dp.IsVisible = value.Bool
			}
		case deploymentpackage.FieldAllowsMultipleDeployments:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allows_multiple_deployments", values[i])
			} else if value.Valid {
				dp.AllowsMultipleDeployments = value.Bool
			}
		case deploymentpackage.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				dp.Kind = value.String
			}
		case deploymentpackage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_package_default_profile", value)
			} else if value.Valid {
				dp.deployment_package_default_profile = new(uint64)
				*dp.deployment_package_default_profile = uint64(value.Int64)
			}
		default:
			dp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeploymentPackage.
// This includes values selected through modifiers, order, etc.
func (dp *DeploymentPackage) Value(name string) (ent.Value, error) {
	return dp.selectValues.Get(name)
}

// QueryDeploymentProfiles queries the "deployment_profiles" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryDeploymentProfiles() *DeploymentProfileQuery {
	return NewDeploymentPackageClient(dp.config).QueryDeploymentProfiles(dp)
}

// QueryApplications queries the "applications" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryApplications() *ApplicationQuery {
	return NewDeploymentPackageClient(dp.config).QueryApplications(dp)
}

// QueryIcon queries the "icon" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryIcon() *ArtifactQuery {
	return NewDeploymentPackageClient(dp.config).QueryIcon(dp)
}

// QueryThumbnail queries the "thumbnail" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryThumbnail() *ArtifactQuery {
	return NewDeploymentPackageClient(dp.config).QueryThumbnail(dp)
}

// QueryDefaultProfile queries the "default_profile" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryDefaultProfile() *DeploymentProfileQuery {
	return NewDeploymentPackageClient(dp.config).QueryDefaultProfile(dp)
}

// QueryApplicationDependencies queries the "application_dependencies" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryApplicationDependencies() *ApplicationDependencyQuery {
	return NewDeploymentPackageClient(dp.config).QueryApplicationDependencies(dp)
}

// QueryApplicationNamespaces queries the "application_namespaces" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryApplicationNamespaces() *ApplicationNamespaceQuery {
	return NewDeploymentPackageClient(dp.config).QueryApplicationNamespaces(dp)
}

// QueryNamespaces queries the "namespaces" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryNamespaces() *NamespaceQuery {
	return NewDeploymentPackageClient(dp.config).QueryNamespaces(dp)
}

// QueryExtensions queries the "extensions" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryExtensions() *ExtensionQuery {
	return NewDeploymentPackageClient(dp.config).QueryExtensions(dp)
}

// QueryArtifacts queries the "artifacts" edge of the DeploymentPackage entity.
func (dp *DeploymentPackage) QueryArtifacts() *ArtifactReferenceQuery {
	return NewDeploymentPackageClient(dp.config).QueryArtifacts(dp)
}

// Update returns a builder for updating this DeploymentPackage.
// Note that you need to call DeploymentPackage.Unwrap() before calling this method if this DeploymentPackage
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DeploymentPackage) Update() *DeploymentPackageUpdateOne {
	return NewDeploymentPackageClient(dp.config).UpdateOne(dp)
}

// Unwrap unwraps the DeploymentPackage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DeploymentPackage) Unwrap() *DeploymentPackage {
	_tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("generated: DeploymentPackage is not a transactional entity")
	}
	dp.config.driver = _tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DeploymentPackage) String() string {
	var builder strings.Builder
	builder.WriteString("DeploymentPackage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dp.ID))
	builder.WriteString("name=")
	builder.WriteString(dp.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(dp.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("display_name_lc=")
	builder.WriteString(dp.DisplayNameLc)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(dp.Description)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(dp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(dp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("project_uuid=")
	builder.WriteString(dp.ProjectUUID)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(dp.Version)
	builder.WriteString(", ")
	builder.WriteString("is_deployed=")
	builder.WriteString(fmt.Sprintf("%v", dp.IsDeployed))
	builder.WriteString(", ")
	builder.WriteString("is_visible=")
	builder.WriteString(fmt.Sprintf("%v", dp.IsVisible))
	builder.WriteString(", ")
	builder.WriteString("allows_multiple_deployments=")
	builder.WriteString(fmt.Sprintf("%v", dp.AllowsMultipleDeployments))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(dp.Kind)
	builder.WriteByte(')')
	return builder.String()
}

// DeploymentPackages is a parsable slice of DeploymentPackage.
type DeploymentPackages []*DeploymentPackage
