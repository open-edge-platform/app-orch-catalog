// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/ignoredresource"
)

// IgnoredResource is the model entity for the IgnoredResource schema.
type IgnoredResource struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Ignored resource name.
	Name string `json:"name,omitempty"`
	// Ignored resource kind.
	Kind string `json:"kind,omitempty"`
	// Ignored resource namespace.
	Namespace string `json:"namespace,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IgnoredResourceQuery when eager-loading is set.
	Edges                         IgnoredResourceEdges `json:"edges"`
	application_ignored_resources *uint64
	selectValues                  sql.SelectValues
}

// IgnoredResourceEdges holds the relations/edges for other nodes in the graph.
type IgnoredResourceEdges struct {
	// Application can have 0 to many IgnoredResources
	ApplicationFk *Application `json:"application_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApplicationFkOrErr returns the ApplicationFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IgnoredResourceEdges) ApplicationFkOrErr() (*Application, error) {
	if e.loadedTypes[0] {
		if e.ApplicationFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: application.Label}
		}
		return e.ApplicationFk, nil
	}
	return nil, &NotLoadedError{edge: "application_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IgnoredResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ignoredresource.FieldID:
			values[i] = new(sql.NullInt64)
		case ignoredresource.FieldName, ignoredresource.FieldKind, ignoredresource.FieldNamespace:
			values[i] = new(sql.NullString)
		case ignoredresource.ForeignKeys[0]: // application_ignored_resources
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IgnoredResource fields.
func (ir *IgnoredResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ignoredresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ir.ID = uint64(value.Int64)
		case ignoredresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ir.Name = value.String
			}
		case ignoredresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				ir.Kind = value.String
			}
		case ignoredresource.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				ir.Namespace = value.String
			}
		case ignoredresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field application_ignored_resources", value)
			} else if value.Valid {
				ir.application_ignored_resources = new(uint64)
				*ir.application_ignored_resources = uint64(value.Int64)
			}
		default:
			ir.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IgnoredResource.
// This includes values selected through modifiers, order, etc.
func (ir *IgnoredResource) Value(name string) (ent.Value, error) {
	return ir.selectValues.Get(name)
}

// QueryApplicationFk queries the "application_fk" edge of the IgnoredResource entity.
func (ir *IgnoredResource) QueryApplicationFk() *ApplicationQuery {
	return NewIgnoredResourceClient(ir.config).QueryApplicationFk(ir)
}

// Update returns a builder for updating this IgnoredResource.
// Note that you need to call IgnoredResource.Unwrap() before calling this method if this IgnoredResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ir *IgnoredResource) Update() *IgnoredResourceUpdateOne {
	return NewIgnoredResourceClient(ir.config).UpdateOne(ir)
}

// Unwrap unwraps the IgnoredResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ir *IgnoredResource) Unwrap() *IgnoredResource {
	_tx, ok := ir.config.driver.(*txDriver)
	if !ok {
		panic("generated: IgnoredResource is not a transactional entity")
	}
	ir.config.driver = _tx.drv
	return ir
}

// String implements the fmt.Stringer.
func (ir *IgnoredResource) String() string {
	var builder strings.Builder
	builder.WriteString("IgnoredResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ir.ID))
	builder.WriteString("name=")
	builder.WriteString(ir.Name)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(ir.Kind)
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(ir.Namespace)
	builder.WriteByte(')')
	return builder.String()
}

// IgnoredResources is a parsable slice of IgnoredResource.
type IgnoredResources []*IgnoredResource
