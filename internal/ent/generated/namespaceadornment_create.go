// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespaceadornment"
)

// NamespaceAdornmentCreate is the builder for creating a NamespaceAdornment entity.
type NamespaceAdornmentCreate struct {
	config
	mutation *NamespaceAdornmentMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (nac *NamespaceAdornmentCreate) SetType(s string) *NamespaceAdornmentCreate {
	nac.mutation.SetType(s)
	return nac
}

// SetKey sets the "key" field.
func (nac *NamespaceAdornmentCreate) SetKey(s string) *NamespaceAdornmentCreate {
	nac.mutation.SetKey(s)
	return nac
}

// SetValue sets the "value" field.
func (nac *NamespaceAdornmentCreate) SetValue(s string) *NamespaceAdornmentCreate {
	nac.mutation.SetValue(s)
	return nac
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (nac *NamespaceAdornmentCreate) SetNillableValue(s *string) *NamespaceAdornmentCreate {
	if s != nil {
		nac.SetValue(*s)
	}
	return nac
}

// SetNamespaceFkID sets the "namespace_fk" edge to the Namespace entity by ID.
func (nac *NamespaceAdornmentCreate) SetNamespaceFkID(id uint64) *NamespaceAdornmentCreate {
	nac.mutation.SetNamespaceFkID(id)
	return nac
}

// SetNamespaceFk sets the "namespace_fk" edge to the Namespace entity.
func (nac *NamespaceAdornmentCreate) SetNamespaceFk(n *Namespace) *NamespaceAdornmentCreate {
	return nac.SetNamespaceFkID(n.ID)
}

// Mutation returns the NamespaceAdornmentMutation object of the builder.
func (nac *NamespaceAdornmentCreate) Mutation() *NamespaceAdornmentMutation {
	return nac.mutation
}

// Save creates the NamespaceAdornment in the database.
func (nac *NamespaceAdornmentCreate) Save(ctx context.Context) (*NamespaceAdornment, error) {
	return withHooks(ctx, nac.sqlSave, nac.mutation, nac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nac *NamespaceAdornmentCreate) SaveX(ctx context.Context) *NamespaceAdornment {
	v, err := nac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nac *NamespaceAdornmentCreate) Exec(ctx context.Context) error {
	_, err := nac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nac *NamespaceAdornmentCreate) ExecX(ctx context.Context) {
	if err := nac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nac *NamespaceAdornmentCreate) check() error {
	if _, ok := nac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`generated: missing required field "NamespaceAdornment.type"`)}
	}
	if _, ok := nac.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`generated: missing required field "NamespaceAdornment.key"`)}
	}
	if _, ok := nac.mutation.NamespaceFkID(); !ok {
		return &ValidationError{Name: "namespace_fk", err: errors.New(`generated: missing required edge "NamespaceAdornment.namespace_fk"`)}
	}
	return nil
}

func (nac *NamespaceAdornmentCreate) sqlSave(ctx context.Context) (*NamespaceAdornment, error) {
	if err := nac.check(); err != nil {
		return nil, err
	}
	_node, _spec := nac.createSpec()
	if err := sqlgraph.CreateNode(ctx, nac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	nac.mutation.id = &_node.ID
	nac.mutation.done = true
	return _node, nil
}

func (nac *NamespaceAdornmentCreate) createSpec() (*NamespaceAdornment, *sqlgraph.CreateSpec) {
	var (
		_node = &NamespaceAdornment{config: nac.config}
		_spec = sqlgraph.NewCreateSpec(namespaceadornment.Table, sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64))
	)
	if value, ok := nac.mutation.GetType(); ok {
		_spec.SetField(namespaceadornment.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := nac.mutation.Key(); ok {
		_spec.SetField(namespaceadornment.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := nac.mutation.Value(); ok {
		_spec.SetField(namespaceadornment.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := nac.mutation.NamespaceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespaceadornment.NamespaceFkTable,
			Columns: []string{namespaceadornment.NamespaceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.namespace_adornments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NamespaceAdornmentCreateBulk is the builder for creating many NamespaceAdornment entities in bulk.
type NamespaceAdornmentCreateBulk struct {
	config
	err      error
	builders []*NamespaceAdornmentCreate
}

// Save creates the NamespaceAdornment entities in the database.
func (nacb *NamespaceAdornmentCreateBulk) Save(ctx context.Context) ([]*NamespaceAdornment, error) {
	if nacb.err != nil {
		return nil, nacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nacb.builders))
	nodes := make([]*NamespaceAdornment, len(nacb.builders))
	mutators := make([]Mutator, len(nacb.builders))
	for i := range nacb.builders {
		func(i int, root context.Context) {
			builder := nacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NamespaceAdornmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nacb *NamespaceAdornmentCreateBulk) SaveX(ctx context.Context) []*NamespaceAdornment {
	v, err := nacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nacb *NamespaceAdornmentCreateBulk) Exec(ctx context.Context) error {
	_, err := nacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nacb *NamespaceAdornmentCreateBulk) ExecX(ctx context.Context) {
	if err := nacb.Exec(ctx); err != nil {
		panic(err)
	}
}
