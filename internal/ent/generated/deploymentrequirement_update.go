// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentrequirement"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// DeploymentRequirementUpdate is the builder for updating DeploymentRequirement entities.
type DeploymentRequirementUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentRequirementMutation
}

// Where appends a list predicates to the DeploymentRequirementUpdate builder.
func (dru *DeploymentRequirementUpdate) Where(ps ...predicate.DeploymentRequirement) *DeploymentRequirementUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetProfileFkID sets the "profile_fk" edge to the Profile entity by ID.
func (dru *DeploymentRequirementUpdate) SetProfileFkID(id uint64) *DeploymentRequirementUpdate {
	dru.mutation.SetProfileFkID(id)
	return dru
}

// SetProfileFk sets the "profile_fk" edge to the Profile entity.
func (dru *DeploymentRequirementUpdate) SetProfileFk(p *Profile) *DeploymentRequirementUpdate {
	return dru.SetProfileFkID(p.ID)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (dru *DeploymentRequirementUpdate) SetDeploymentPackageFkID(id uint64) *DeploymentRequirementUpdate {
	dru.mutation.SetDeploymentPackageFkID(id)
	return dru
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (dru *DeploymentRequirementUpdate) SetDeploymentPackageFk(d *DeploymentPackage) *DeploymentRequirementUpdate {
	return dru.SetDeploymentPackageFkID(d.ID)
}

// SetDeploymentProfileFkID sets the "deployment_profile_fk" edge to the DeploymentProfile entity by ID.
func (dru *DeploymentRequirementUpdate) SetDeploymentProfileFkID(id uint64) *DeploymentRequirementUpdate {
	dru.mutation.SetDeploymentProfileFkID(id)
	return dru
}

// SetNillableDeploymentProfileFkID sets the "deployment_profile_fk" edge to the DeploymentProfile entity by ID if the given value is not nil.
func (dru *DeploymentRequirementUpdate) SetNillableDeploymentProfileFkID(id *uint64) *DeploymentRequirementUpdate {
	if id != nil {
		dru = dru.SetDeploymentProfileFkID(*id)
	}
	return dru
}

// SetDeploymentProfileFk sets the "deployment_profile_fk" edge to the DeploymentProfile entity.
func (dru *DeploymentRequirementUpdate) SetDeploymentProfileFk(d *DeploymentProfile) *DeploymentRequirementUpdate {
	return dru.SetDeploymentProfileFkID(d.ID)
}

// Mutation returns the DeploymentRequirementMutation object of the builder.
func (dru *DeploymentRequirementUpdate) Mutation() *DeploymentRequirementMutation {
	return dru.mutation
}

// ClearProfileFk clears the "profile_fk" edge to the Profile entity.
func (dru *DeploymentRequirementUpdate) ClearProfileFk() *DeploymentRequirementUpdate {
	dru.mutation.ClearProfileFk()
	return dru
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (dru *DeploymentRequirementUpdate) ClearDeploymentPackageFk() *DeploymentRequirementUpdate {
	dru.mutation.ClearDeploymentPackageFk()
	return dru
}

// ClearDeploymentProfileFk clears the "deployment_profile_fk" edge to the DeploymentProfile entity.
func (dru *DeploymentRequirementUpdate) ClearDeploymentProfileFk() *DeploymentRequirementUpdate {
	dru.mutation.ClearDeploymentProfileFk()
	return dru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DeploymentRequirementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DeploymentRequirementUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DeploymentRequirementUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DeploymentRequirementUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dru *DeploymentRequirementUpdate) check() error {
	if _, ok := dru.mutation.ProfileFkID(); dru.mutation.ProfileFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "DeploymentRequirement.profile_fk"`)
	}
	if _, ok := dru.mutation.DeploymentPackageFkID(); dru.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "DeploymentRequirement.deployment_package_fk"`)
	}
	return nil
}

func (dru *DeploymentRequirementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deploymentrequirement.Table, deploymentrequirement.Columns, sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dru.mutation.ProfileFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentrequirement.ProfileFkTable,
			Columns: []string{deploymentrequirement.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.ProfileFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentrequirement.ProfileFkTable,
			Columns: []string{deploymentrequirement.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentPackageFkTable,
			Columns: []string{deploymentrequirement.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentPackageFkTable,
			Columns: []string{deploymentrequirement.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.DeploymentProfileFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentProfileFkTable,
			Columns: []string{deploymentrequirement.DeploymentProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.DeploymentProfileFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentProfileFkTable,
			Columns: []string{deploymentrequirement.DeploymentProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentrequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DeploymentRequirementUpdateOne is the builder for updating a single DeploymentRequirement entity.
type DeploymentRequirementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentRequirementMutation
}

// SetProfileFkID sets the "profile_fk" edge to the Profile entity by ID.
func (druo *DeploymentRequirementUpdateOne) SetProfileFkID(id uint64) *DeploymentRequirementUpdateOne {
	druo.mutation.SetProfileFkID(id)
	return druo
}

// SetProfileFk sets the "profile_fk" edge to the Profile entity.
func (druo *DeploymentRequirementUpdateOne) SetProfileFk(p *Profile) *DeploymentRequirementUpdateOne {
	return druo.SetProfileFkID(p.ID)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (druo *DeploymentRequirementUpdateOne) SetDeploymentPackageFkID(id uint64) *DeploymentRequirementUpdateOne {
	druo.mutation.SetDeploymentPackageFkID(id)
	return druo
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (druo *DeploymentRequirementUpdateOne) SetDeploymentPackageFk(d *DeploymentPackage) *DeploymentRequirementUpdateOne {
	return druo.SetDeploymentPackageFkID(d.ID)
}

// SetDeploymentProfileFkID sets the "deployment_profile_fk" edge to the DeploymentProfile entity by ID.
func (druo *DeploymentRequirementUpdateOne) SetDeploymentProfileFkID(id uint64) *DeploymentRequirementUpdateOne {
	druo.mutation.SetDeploymentProfileFkID(id)
	return druo
}

// SetNillableDeploymentProfileFkID sets the "deployment_profile_fk" edge to the DeploymentProfile entity by ID if the given value is not nil.
func (druo *DeploymentRequirementUpdateOne) SetNillableDeploymentProfileFkID(id *uint64) *DeploymentRequirementUpdateOne {
	if id != nil {
		druo = druo.SetDeploymentProfileFkID(*id)
	}
	return druo
}

// SetDeploymentProfileFk sets the "deployment_profile_fk" edge to the DeploymentProfile entity.
func (druo *DeploymentRequirementUpdateOne) SetDeploymentProfileFk(d *DeploymentProfile) *DeploymentRequirementUpdateOne {
	return druo.SetDeploymentProfileFkID(d.ID)
}

// Mutation returns the DeploymentRequirementMutation object of the builder.
func (druo *DeploymentRequirementUpdateOne) Mutation() *DeploymentRequirementMutation {
	return druo.mutation
}

// ClearProfileFk clears the "profile_fk" edge to the Profile entity.
func (druo *DeploymentRequirementUpdateOne) ClearProfileFk() *DeploymentRequirementUpdateOne {
	druo.mutation.ClearProfileFk()
	return druo
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (druo *DeploymentRequirementUpdateOne) ClearDeploymentPackageFk() *DeploymentRequirementUpdateOne {
	druo.mutation.ClearDeploymentPackageFk()
	return druo
}

// ClearDeploymentProfileFk clears the "deployment_profile_fk" edge to the DeploymentProfile entity.
func (druo *DeploymentRequirementUpdateOne) ClearDeploymentProfileFk() *DeploymentRequirementUpdateOne {
	druo.mutation.ClearDeploymentProfileFk()
	return druo
}

// Where appends a list predicates to the DeploymentRequirementUpdate builder.
func (druo *DeploymentRequirementUpdateOne) Where(ps ...predicate.DeploymentRequirement) *DeploymentRequirementUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DeploymentRequirementUpdateOne) Select(field string, fields ...string) *DeploymentRequirementUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DeploymentRequirement entity.
func (druo *DeploymentRequirementUpdateOne) Save(ctx context.Context) (*DeploymentRequirement, error) {
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DeploymentRequirementUpdateOne) SaveX(ctx context.Context) *DeploymentRequirement {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DeploymentRequirementUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DeploymentRequirementUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (druo *DeploymentRequirementUpdateOne) check() error {
	if _, ok := druo.mutation.ProfileFkID(); druo.mutation.ProfileFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "DeploymentRequirement.profile_fk"`)
	}
	if _, ok := druo.mutation.DeploymentPackageFkID(); druo.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "DeploymentRequirement.deployment_package_fk"`)
	}
	return nil
}

func (druo *DeploymentRequirementUpdateOne) sqlSave(ctx context.Context) (_node *DeploymentRequirement, err error) {
	if err := druo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deploymentrequirement.Table, deploymentrequirement.Columns, sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DeploymentRequirement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentrequirement.FieldID)
		for _, f := range fields {
			if !deploymentrequirement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != deploymentrequirement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if druo.mutation.ProfileFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentrequirement.ProfileFkTable,
			Columns: []string{deploymentrequirement.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.ProfileFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentrequirement.ProfileFkTable,
			Columns: []string{deploymentrequirement.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentPackageFkTable,
			Columns: []string{deploymentrequirement.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentPackageFkTable,
			Columns: []string{deploymentrequirement.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.DeploymentProfileFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentProfileFkTable,
			Columns: []string{deploymentrequirement.DeploymentProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.DeploymentProfileFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentrequirement.DeploymentProfileFkTable,
			Columns: []string{deploymentrequirement.DeploymentProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeploymentRequirement{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentrequirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
