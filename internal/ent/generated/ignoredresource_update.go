// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/ignoredresource"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// IgnoredResourceUpdate is the builder for updating IgnoredResource entities.
type IgnoredResourceUpdate struct {
	config
	hooks    []Hook
	mutation *IgnoredResourceMutation
}

// Where appends a list predicates to the IgnoredResourceUpdate builder.
func (iru *IgnoredResourceUpdate) Where(ps ...predicate.IgnoredResource) *IgnoredResourceUpdate {
	iru.mutation.Where(ps...)
	return iru
}

// SetName sets the "name" field.
func (iru *IgnoredResourceUpdate) SetName(s string) *IgnoredResourceUpdate {
	iru.mutation.SetName(s)
	return iru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iru *IgnoredResourceUpdate) SetNillableName(s *string) *IgnoredResourceUpdate {
	if s != nil {
		iru.SetName(*s)
	}
	return iru
}

// SetKind sets the "kind" field.
func (iru *IgnoredResourceUpdate) SetKind(s string) *IgnoredResourceUpdate {
	iru.mutation.SetKind(s)
	return iru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (iru *IgnoredResourceUpdate) SetNillableKind(s *string) *IgnoredResourceUpdate {
	if s != nil {
		iru.SetKind(*s)
	}
	return iru
}

// SetNamespace sets the "namespace" field.
func (iru *IgnoredResourceUpdate) SetNamespace(s string) *IgnoredResourceUpdate {
	iru.mutation.SetNamespace(s)
	return iru
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (iru *IgnoredResourceUpdate) SetNillableNamespace(s *string) *IgnoredResourceUpdate {
	if s != nil {
		iru.SetNamespace(*s)
	}
	return iru
}

// ClearNamespace clears the value of the "namespace" field.
func (iru *IgnoredResourceUpdate) ClearNamespace() *IgnoredResourceUpdate {
	iru.mutation.ClearNamespace()
	return iru
}

// SetApplicationFkID sets the "application_fk" edge to the Application entity by ID.
func (iru *IgnoredResourceUpdate) SetApplicationFkID(id uint64) *IgnoredResourceUpdate {
	iru.mutation.SetApplicationFkID(id)
	return iru
}

// SetApplicationFk sets the "application_fk" edge to the Application entity.
func (iru *IgnoredResourceUpdate) SetApplicationFk(a *Application) *IgnoredResourceUpdate {
	return iru.SetApplicationFkID(a.ID)
}

// Mutation returns the IgnoredResourceMutation object of the builder.
func (iru *IgnoredResourceUpdate) Mutation() *IgnoredResourceMutation {
	return iru.mutation
}

// ClearApplicationFk clears the "application_fk" edge to the Application entity.
func (iru *IgnoredResourceUpdate) ClearApplicationFk() *IgnoredResourceUpdate {
	iru.mutation.ClearApplicationFk()
	return iru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iru *IgnoredResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iru.sqlSave, iru.mutation, iru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iru *IgnoredResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := iru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iru *IgnoredResourceUpdate) Exec(ctx context.Context) error {
	_, err := iru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iru *IgnoredResourceUpdate) ExecX(ctx context.Context) {
	if err := iru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iru *IgnoredResourceUpdate) check() error {
	if _, ok := iru.mutation.ApplicationFkID(); iru.mutation.ApplicationFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "IgnoredResource.application_fk"`)
	}
	return nil
}

func (iru *IgnoredResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ignoredresource.Table, ignoredresource.Columns, sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64))
	if ps := iru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iru.mutation.Name(); ok {
		_spec.SetField(ignoredresource.FieldName, field.TypeString, value)
	}
	if value, ok := iru.mutation.Kind(); ok {
		_spec.SetField(ignoredresource.FieldKind, field.TypeString, value)
	}
	if value, ok := iru.mutation.Namespace(); ok {
		_spec.SetField(ignoredresource.FieldNamespace, field.TypeString, value)
	}
	if iru.mutation.NamespaceCleared() {
		_spec.ClearField(ignoredresource.FieldNamespace, field.TypeString)
	}
	if iru.mutation.ApplicationFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoredresource.ApplicationFkTable,
			Columns: []string{ignoredresource.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.ApplicationFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoredresource.ApplicationFkTable,
			Columns: []string{ignoredresource.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ignoredresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iru.mutation.done = true
	return n, nil
}

// IgnoredResourceUpdateOne is the builder for updating a single IgnoredResource entity.
type IgnoredResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IgnoredResourceMutation
}

// SetName sets the "name" field.
func (iruo *IgnoredResourceUpdateOne) SetName(s string) *IgnoredResourceUpdateOne {
	iruo.mutation.SetName(s)
	return iruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iruo *IgnoredResourceUpdateOne) SetNillableName(s *string) *IgnoredResourceUpdateOne {
	if s != nil {
		iruo.SetName(*s)
	}
	return iruo
}

// SetKind sets the "kind" field.
func (iruo *IgnoredResourceUpdateOne) SetKind(s string) *IgnoredResourceUpdateOne {
	iruo.mutation.SetKind(s)
	return iruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (iruo *IgnoredResourceUpdateOne) SetNillableKind(s *string) *IgnoredResourceUpdateOne {
	if s != nil {
		iruo.SetKind(*s)
	}
	return iruo
}

// SetNamespace sets the "namespace" field.
func (iruo *IgnoredResourceUpdateOne) SetNamespace(s string) *IgnoredResourceUpdateOne {
	iruo.mutation.SetNamespace(s)
	return iruo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (iruo *IgnoredResourceUpdateOne) SetNillableNamespace(s *string) *IgnoredResourceUpdateOne {
	if s != nil {
		iruo.SetNamespace(*s)
	}
	return iruo
}

// ClearNamespace clears the value of the "namespace" field.
func (iruo *IgnoredResourceUpdateOne) ClearNamespace() *IgnoredResourceUpdateOne {
	iruo.mutation.ClearNamespace()
	return iruo
}

// SetApplicationFkID sets the "application_fk" edge to the Application entity by ID.
func (iruo *IgnoredResourceUpdateOne) SetApplicationFkID(id uint64) *IgnoredResourceUpdateOne {
	iruo.mutation.SetApplicationFkID(id)
	return iruo
}

// SetApplicationFk sets the "application_fk" edge to the Application entity.
func (iruo *IgnoredResourceUpdateOne) SetApplicationFk(a *Application) *IgnoredResourceUpdateOne {
	return iruo.SetApplicationFkID(a.ID)
}

// Mutation returns the IgnoredResourceMutation object of the builder.
func (iruo *IgnoredResourceUpdateOne) Mutation() *IgnoredResourceMutation {
	return iruo.mutation
}

// ClearApplicationFk clears the "application_fk" edge to the Application entity.
func (iruo *IgnoredResourceUpdateOne) ClearApplicationFk() *IgnoredResourceUpdateOne {
	iruo.mutation.ClearApplicationFk()
	return iruo
}

// Where appends a list predicates to the IgnoredResourceUpdate builder.
func (iruo *IgnoredResourceUpdateOne) Where(ps ...predicate.IgnoredResource) *IgnoredResourceUpdateOne {
	iruo.mutation.Where(ps...)
	return iruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iruo *IgnoredResourceUpdateOne) Select(field string, fields ...string) *IgnoredResourceUpdateOne {
	iruo.fields = append([]string{field}, fields...)
	return iruo
}

// Save executes the query and returns the updated IgnoredResource entity.
func (iruo *IgnoredResourceUpdateOne) Save(ctx context.Context) (*IgnoredResource, error) {
	return withHooks(ctx, iruo.sqlSave, iruo.mutation, iruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iruo *IgnoredResourceUpdateOne) SaveX(ctx context.Context) *IgnoredResource {
	node, err := iruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iruo *IgnoredResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := iruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iruo *IgnoredResourceUpdateOne) ExecX(ctx context.Context) {
	if err := iruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iruo *IgnoredResourceUpdateOne) check() error {
	if _, ok := iruo.mutation.ApplicationFkID(); iruo.mutation.ApplicationFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "IgnoredResource.application_fk"`)
	}
	return nil
}

func (iruo *IgnoredResourceUpdateOne) sqlSave(ctx context.Context) (_node *IgnoredResource, err error) {
	if err := iruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ignoredresource.Table, ignoredresource.Columns, sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64))
	id, ok := iruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "IgnoredResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ignoredresource.FieldID)
		for _, f := range fields {
			if !ignoredresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != ignoredresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iruo.mutation.Name(); ok {
		_spec.SetField(ignoredresource.FieldName, field.TypeString, value)
	}
	if value, ok := iruo.mutation.Kind(); ok {
		_spec.SetField(ignoredresource.FieldKind, field.TypeString, value)
	}
	if value, ok := iruo.mutation.Namespace(); ok {
		_spec.SetField(ignoredresource.FieldNamespace, field.TypeString, value)
	}
	if iruo.mutation.NamespaceCleared() {
		_spec.ClearField(ignoredresource.FieldNamespace, field.TypeString)
	}
	if iruo.mutation.ApplicationFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoredresource.ApplicationFkTable,
			Columns: []string{ignoredresource.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.ApplicationFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoredresource.ApplicationFkTable,
			Columns: []string{ignoredresource.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IgnoredResource{config: iruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ignoredresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iruo.mutation.done = true
	return _node, nil
}
