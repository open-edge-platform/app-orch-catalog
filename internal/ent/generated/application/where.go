// Code generated by ent, DO NOT EDIT.

package application

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameLc applies equality check predicate on the "display_name_lc" field. It's identical to DisplayNameLcEQ.
func DisplayNameLc(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldDisplayNameLc, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldDescription, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldUpdateTime, v))
}

// ProjectUUID applies equality check predicate on the "project_uuid" field. It's identical to ProjectUUIDEQ.
func ProjectUUID(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldProjectUUID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldVersion, v))
}

// ChartName applies equality check predicate on the "chart_name" field. It's identical to ChartNameEQ.
func ChartName(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldChartName, v))
}

// ChartVersion applies equality check predicate on the "chart_version" field. It's identical to ChartVersionEQ.
func ChartVersion(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldChartVersion, v))
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldKind, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.Application {
	return predicate.Application(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.Application {
	return predicate.Application(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldDisplayName, v))
}

// DisplayNameLcEQ applies the EQ predicate on the "display_name_lc" field.
func DisplayNameLcEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldDisplayNameLc, v))
}

// DisplayNameLcNEQ applies the NEQ predicate on the "display_name_lc" field.
func DisplayNameLcNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldDisplayNameLc, v))
}

// DisplayNameLcIn applies the In predicate on the "display_name_lc" field.
func DisplayNameLcIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldDisplayNameLc, vs...))
}

// DisplayNameLcNotIn applies the NotIn predicate on the "display_name_lc" field.
func DisplayNameLcNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldDisplayNameLc, vs...))
}

// DisplayNameLcGT applies the GT predicate on the "display_name_lc" field.
func DisplayNameLcGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldDisplayNameLc, v))
}

// DisplayNameLcGTE applies the GTE predicate on the "display_name_lc" field.
func DisplayNameLcGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldDisplayNameLc, v))
}

// DisplayNameLcLT applies the LT predicate on the "display_name_lc" field.
func DisplayNameLcLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldDisplayNameLc, v))
}

// DisplayNameLcLTE applies the LTE predicate on the "display_name_lc" field.
func DisplayNameLcLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldDisplayNameLc, v))
}

// DisplayNameLcContains applies the Contains predicate on the "display_name_lc" field.
func DisplayNameLcContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldDisplayNameLc, v))
}

// DisplayNameLcHasPrefix applies the HasPrefix predicate on the "display_name_lc" field.
func DisplayNameLcHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldDisplayNameLc, v))
}

// DisplayNameLcHasSuffix applies the HasSuffix predicate on the "display_name_lc" field.
func DisplayNameLcHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldDisplayNameLc, v))
}

// DisplayNameLcIsNil applies the IsNil predicate on the "display_name_lc" field.
func DisplayNameLcIsNil() predicate.Application {
	return predicate.Application(sql.FieldIsNull(FieldDisplayNameLc))
}

// DisplayNameLcNotNil applies the NotNil predicate on the "display_name_lc" field.
func DisplayNameLcNotNil() predicate.Application {
	return predicate.Application(sql.FieldNotNull(FieldDisplayNameLc))
}

// DisplayNameLcEqualFold applies the EqualFold predicate on the "display_name_lc" field.
func DisplayNameLcEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldDisplayNameLc, v))
}

// DisplayNameLcContainsFold applies the ContainsFold predicate on the "display_name_lc" field.
func DisplayNameLcContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldDisplayNameLc, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Application {
	return predicate.Application(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Application {
	return predicate.Application(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldDescription, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldUpdateTime, v))
}

// ProjectUUIDEQ applies the EQ predicate on the "project_uuid" field.
func ProjectUUIDEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldProjectUUID, v))
}

// ProjectUUIDNEQ applies the NEQ predicate on the "project_uuid" field.
func ProjectUUIDNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldProjectUUID, v))
}

// ProjectUUIDIn applies the In predicate on the "project_uuid" field.
func ProjectUUIDIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldProjectUUID, vs...))
}

// ProjectUUIDNotIn applies the NotIn predicate on the "project_uuid" field.
func ProjectUUIDNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldProjectUUID, vs...))
}

// ProjectUUIDGT applies the GT predicate on the "project_uuid" field.
func ProjectUUIDGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldProjectUUID, v))
}

// ProjectUUIDGTE applies the GTE predicate on the "project_uuid" field.
func ProjectUUIDGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldProjectUUID, v))
}

// ProjectUUIDLT applies the LT predicate on the "project_uuid" field.
func ProjectUUIDLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldProjectUUID, v))
}

// ProjectUUIDLTE applies the LTE predicate on the "project_uuid" field.
func ProjectUUIDLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldProjectUUID, v))
}

// ProjectUUIDContains applies the Contains predicate on the "project_uuid" field.
func ProjectUUIDContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldProjectUUID, v))
}

// ProjectUUIDHasPrefix applies the HasPrefix predicate on the "project_uuid" field.
func ProjectUUIDHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldProjectUUID, v))
}

// ProjectUUIDHasSuffix applies the HasSuffix predicate on the "project_uuid" field.
func ProjectUUIDHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldProjectUUID, v))
}

// ProjectUUIDEqualFold applies the EqualFold predicate on the "project_uuid" field.
func ProjectUUIDEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldProjectUUID, v))
}

// ProjectUUIDContainsFold applies the ContainsFold predicate on the "project_uuid" field.
func ProjectUUIDContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldProjectUUID, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldVersion, v))
}

// ChartNameEQ applies the EQ predicate on the "chart_name" field.
func ChartNameEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldChartName, v))
}

// ChartNameNEQ applies the NEQ predicate on the "chart_name" field.
func ChartNameNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldChartName, v))
}

// ChartNameIn applies the In predicate on the "chart_name" field.
func ChartNameIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldChartName, vs...))
}

// ChartNameNotIn applies the NotIn predicate on the "chart_name" field.
func ChartNameNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldChartName, vs...))
}

// ChartNameGT applies the GT predicate on the "chart_name" field.
func ChartNameGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldChartName, v))
}

// ChartNameGTE applies the GTE predicate on the "chart_name" field.
func ChartNameGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldChartName, v))
}

// ChartNameLT applies the LT predicate on the "chart_name" field.
func ChartNameLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldChartName, v))
}

// ChartNameLTE applies the LTE predicate on the "chart_name" field.
func ChartNameLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldChartName, v))
}

// ChartNameContains applies the Contains predicate on the "chart_name" field.
func ChartNameContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldChartName, v))
}

// ChartNameHasPrefix applies the HasPrefix predicate on the "chart_name" field.
func ChartNameHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldChartName, v))
}

// ChartNameHasSuffix applies the HasSuffix predicate on the "chart_name" field.
func ChartNameHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldChartName, v))
}

// ChartNameEqualFold applies the EqualFold predicate on the "chart_name" field.
func ChartNameEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldChartName, v))
}

// ChartNameContainsFold applies the ContainsFold predicate on the "chart_name" field.
func ChartNameContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldChartName, v))
}

// ChartVersionEQ applies the EQ predicate on the "chart_version" field.
func ChartVersionEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldChartVersion, v))
}

// ChartVersionNEQ applies the NEQ predicate on the "chart_version" field.
func ChartVersionNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldChartVersion, v))
}

// ChartVersionIn applies the In predicate on the "chart_version" field.
func ChartVersionIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldChartVersion, vs...))
}

// ChartVersionNotIn applies the NotIn predicate on the "chart_version" field.
func ChartVersionNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldChartVersion, vs...))
}

// ChartVersionGT applies the GT predicate on the "chart_version" field.
func ChartVersionGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldChartVersion, v))
}

// ChartVersionGTE applies the GTE predicate on the "chart_version" field.
func ChartVersionGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldChartVersion, v))
}

// ChartVersionLT applies the LT predicate on the "chart_version" field.
func ChartVersionLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldChartVersion, v))
}

// ChartVersionLTE applies the LTE predicate on the "chart_version" field.
func ChartVersionLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldChartVersion, v))
}

// ChartVersionContains applies the Contains predicate on the "chart_version" field.
func ChartVersionContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldChartVersion, v))
}

// ChartVersionHasPrefix applies the HasPrefix predicate on the "chart_version" field.
func ChartVersionHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldChartVersion, v))
}

// ChartVersionHasSuffix applies the HasSuffix predicate on the "chart_version" field.
func ChartVersionHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldChartVersion, v))
}

// ChartVersionEqualFold applies the EqualFold predicate on the "chart_version" field.
func ChartVersionEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldChartVersion, v))
}

// ChartVersionContainsFold applies the ContainsFold predicate on the "chart_version" field.
func ChartVersionContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldChartVersion, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldKind, vs...))
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldKind, v))
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldKind, v))
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldKind, v))
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldKind, v))
}

// KindContains applies the Contains predicate on the "kind" field.
func KindContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldKind, v))
}

// KindHasPrefix applies the HasPrefix predicate on the "kind" field.
func KindHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldKind, v))
}

// KindHasSuffix applies the HasSuffix predicate on the "kind" field.
func KindHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldKind, v))
}

// KindIsNil applies the IsNil predicate on the "kind" field.
func KindIsNil() predicate.Application {
	return predicate.Application(sql.FieldIsNull(FieldKind))
}

// KindNotNil applies the NotNil predicate on the "kind" field.
func KindNotNil() predicate.Application {
	return predicate.Application(sql.FieldNotNull(FieldKind))
}

// KindEqualFold applies the EqualFold predicate on the "kind" field.
func KindEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldKind, v))
}

// KindContainsFold applies the ContainsFold predicate on the "kind" field.
func KindContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldKind, v))
}

// HasProfiles applies the HasEdge predicate on the "profiles" edge.
func HasProfiles() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProfilesTable, ProfilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfilesWith applies the HasEdge predicate on the "profiles" edge with a given conditions (other predicates).
func HasProfilesWith(preds ...predicate.Profile) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newProfilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRegistryFk applies the HasEdge predicate on the "registry_fk" edge.
func HasRegistryFk() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RegistryFkTable, RegistryFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegistryFkWith applies the HasEdge predicate on the "registry_fk" edge with a given conditions (other predicates).
func HasRegistryFkWith(preds ...predicate.Registry) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newRegistryFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImageRegistryFk applies the HasEdge predicate on the "image_registry_fk" edge.
func HasImageRegistryFk() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ImageRegistryFkTable, ImageRegistryFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImageRegistryFkWith applies the HasEdge predicate on the "image_registry_fk" edge with a given conditions (other predicates).
func HasImageRegistryFkWith(preds ...predicate.Registry) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newImageRegistryFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeploymentPackageFk applies the HasEdge predicate on the "deployment_package_fk" edge.
func HasDeploymentPackageFk() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DeploymentPackageFkTable, DeploymentPackageFkPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentPackageFkWith applies the HasEdge predicate on the "deployment_package_fk" edge with a given conditions (other predicates).
func HasDeploymentPackageFkWith(preds ...predicate.DeploymentPackage) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newDeploymentPackageFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependencySourceFk applies the HasEdge predicate on the "dependency_source_fk" edge.
func HasDependencySourceFk() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DependencySourceFkTable, DependencySourceFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependencySourceFkWith applies the HasEdge predicate on the "dependency_source_fk" edge with a given conditions (other predicates).
func HasDependencySourceFkWith(preds ...predicate.ApplicationDependency) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newDependencySourceFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependencyTargetFk applies the HasEdge predicate on the "dependency_target_fk" edge.
func HasDependencyTargetFk() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DependencyTargetFkTable, DependencyTargetFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependencyTargetFkWith applies the HasEdge predicate on the "dependency_target_fk" edge with a given conditions (other predicates).
func HasDependencyTargetFkWith(preds ...predicate.ApplicationDependency) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newDependencyTargetFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefaultProfile applies the HasEdge predicate on the "default_profile" edge.
func HasDefaultProfile() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DefaultProfileTable, DefaultProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultProfileWith applies the HasEdge predicate on the "default_profile" edge with a given conditions (other predicates).
func HasDefaultProfileWith(preds ...predicate.Profile) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newDefaultProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIgnoredResources applies the HasEdge predicate on the "ignored_resources" edge.
func HasIgnoredResources() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IgnoredResourcesTable, IgnoredResourcesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIgnoredResourcesWith applies the HasEdge predicate on the "ignored_resources" edge with a given conditions (other predicates).
func HasIgnoredResourcesWith(preds ...predicate.IgnoredResource) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newIgnoredResourcesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Application) predicate.Application {
	return predicate.Application(sql.NotPredicates(p))
}
