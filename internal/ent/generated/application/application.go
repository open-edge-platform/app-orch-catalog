// Code generated by ent, DO NOT EDIT.

package application

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the application type in the database.
	Label = "application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDisplayNameLc holds the string denoting the display_name_lc field in the database.
	FieldDisplayNameLc = "display_name_lc"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldProjectUUID holds the string denoting the project_uuid field in the database.
	FieldProjectUUID = "project_uuid"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldChartName holds the string denoting the chart_name field in the database.
	FieldChartName = "chart_name"
	// FieldChartVersion holds the string denoting the chart_version field in the database.
	FieldChartVersion = "chart_version"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// EdgeProfiles holds the string denoting the profiles edge name in mutations.
	EdgeProfiles = "profiles"
	// EdgeRegistryFk holds the string denoting the registry_fk edge name in mutations.
	EdgeRegistryFk = "registry_fk"
	// EdgeImageRegistryFk holds the string denoting the image_registry_fk edge name in mutations.
	EdgeImageRegistryFk = "image_registry_fk"
	// EdgeDeploymentPackageFk holds the string denoting the deployment_package_fk edge name in mutations.
	EdgeDeploymentPackageFk = "deployment_package_fk"
	// EdgeDependencySourceFk holds the string denoting the dependency_source_fk edge name in mutations.
	EdgeDependencySourceFk = "dependency_source_fk"
	// EdgeDependencyTargetFk holds the string denoting the dependency_target_fk edge name in mutations.
	EdgeDependencyTargetFk = "dependency_target_fk"
	// EdgeDefaultProfile holds the string denoting the default_profile edge name in mutations.
	EdgeDefaultProfile = "default_profile"
	// EdgeIgnoredResources holds the string denoting the ignored_resources edge name in mutations.
	EdgeIgnoredResources = "ignored_resources"
	// Table holds the table name of the application in the database.
	Table = "applications"
	// ProfilesTable is the table that holds the profiles relation/edge.
	ProfilesTable = "profiles"
	// ProfilesInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfilesInverseTable = "profiles"
	// ProfilesColumn is the table column denoting the profiles relation/edge.
	ProfilesColumn = "application_profiles"
	// RegistryFkTable is the table that holds the registry_fk relation/edge.
	RegistryFkTable = "applications"
	// RegistryFkInverseTable is the table name for the Registry entity.
	// It exists in this package in order to avoid circular dependency with the "registry" package.
	RegistryFkInverseTable = "registries"
	// RegistryFkColumn is the table column denoting the registry_fk relation/edge.
	RegistryFkColumn = "registry_applications"
	// ImageRegistryFkTable is the table that holds the image_registry_fk relation/edge.
	ImageRegistryFkTable = "applications"
	// ImageRegistryFkInverseTable is the table name for the Registry entity.
	// It exists in this package in order to avoid circular dependency with the "registry" package.
	ImageRegistryFkInverseTable = "registries"
	// ImageRegistryFkColumn is the table column denoting the image_registry_fk relation/edge.
	ImageRegistryFkColumn = "registry_application_images"
	// DeploymentPackageFkTable is the table that holds the deployment_package_fk relation/edge. The primary key declared below.
	DeploymentPackageFkTable = "deployment_package_applications"
	// DeploymentPackageFkInverseTable is the table name for the DeploymentPackage entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentpackage" package.
	DeploymentPackageFkInverseTable = "deployment_packages"
	// DependencySourceFkTable is the table that holds the dependency_source_fk relation/edge.
	DependencySourceFkTable = "application_dependencies"
	// DependencySourceFkInverseTable is the table name for the ApplicationDependency entity.
	// It exists in this package in order to avoid circular dependency with the "applicationdependency" package.
	DependencySourceFkInverseTable = "application_dependencies"
	// DependencySourceFkColumn is the table column denoting the dependency_source_fk relation/edge.
	DependencySourceFkColumn = "application_dependency_source_fk"
	// DependencyTargetFkTable is the table that holds the dependency_target_fk relation/edge.
	DependencyTargetFkTable = "application_dependencies"
	// DependencyTargetFkInverseTable is the table name for the ApplicationDependency entity.
	// It exists in this package in order to avoid circular dependency with the "applicationdependency" package.
	DependencyTargetFkInverseTable = "application_dependencies"
	// DependencyTargetFkColumn is the table column denoting the dependency_target_fk relation/edge.
	DependencyTargetFkColumn = "application_dependency_target_fk"
	// DefaultProfileTable is the table that holds the default_profile relation/edge.
	DefaultProfileTable = "applications"
	// DefaultProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	DefaultProfileInverseTable = "profiles"
	// DefaultProfileColumn is the table column denoting the default_profile relation/edge.
	DefaultProfileColumn = "application_default_profile"
	// IgnoredResourcesTable is the table that holds the ignored_resources relation/edge.
	IgnoredResourcesTable = "ignored_resources"
	// IgnoredResourcesInverseTable is the table name for the IgnoredResource entity.
	// It exists in this package in order to avoid circular dependency with the "ignoredresource" package.
	IgnoredResourcesInverseTable = "ignored_resources"
	// IgnoredResourcesColumn is the table column denoting the ignored_resources relation/edge.
	IgnoredResourcesColumn = "application_ignored_resources"
)

// Columns holds all SQL columns for application fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDisplayNameLc,
	FieldDescription,
	FieldCreateTime,
	FieldUpdateTime,
	FieldProjectUUID,
	FieldVersion,
	FieldChartName,
	FieldChartVersion,
	FieldKind,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "applications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"application_default_profile",
	"registry_applications",
	"registry_application_images",
}

var (
	// DeploymentPackageFkPrimaryKey and DeploymentPackageFkColumn2 are the table columns denoting the
	// primary key for the deployment_package_fk relation (M2M).
	DeploymentPackageFkPrimaryKey = []string{"deployment_package_id", "application_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultProjectUUID holds the default value on creation for the "project_uuid" field.
	DefaultProjectUUID string
)

// OrderOption defines the ordering options for the Application queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDisplayNameLc orders the results by the display_name_lc field.
func ByDisplayNameLc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayNameLc, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByProjectUUID orders the results by the project_uuid field.
func ByProjectUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectUUID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByChartName orders the results by the chart_name field.
func ByChartName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChartName, opts...).ToFunc()
}

// ByChartVersion orders the results by the chart_version field.
func ByChartVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChartVersion, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByProfilesCount orders the results by profiles count.
func ByProfilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfilesStep(), opts...)
	}
}

// ByProfiles orders the results by profiles terms.
func ByProfiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRegistryFkField orders the results by registry_fk field.
func ByRegistryFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegistryFkStep(), sql.OrderByField(field, opts...))
	}
}

// ByImageRegistryFkField orders the results by image_registry_fk field.
func ByImageRegistryFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageRegistryFkStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeploymentPackageFkCount orders the results by deployment_package_fk count.
func ByDeploymentPackageFkCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeploymentPackageFkStep(), opts...)
	}
}

// ByDeploymentPackageFk orders the results by deployment_package_fk terms.
func ByDeploymentPackageFk(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentPackageFkStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependencySourceFkCount orders the results by dependency_source_fk count.
func ByDependencySourceFkCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependencySourceFkStep(), opts...)
	}
}

// ByDependencySourceFk orders the results by dependency_source_fk terms.
func ByDependencySourceFk(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependencySourceFkStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependencyTargetFkCount orders the results by dependency_target_fk count.
func ByDependencyTargetFkCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependencyTargetFkStep(), opts...)
	}
}

// ByDependencyTargetFk orders the results by dependency_target_fk terms.
func ByDependencyTargetFk(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependencyTargetFkStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDefaultProfileField orders the results by default_profile field.
func ByDefaultProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDefaultProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByIgnoredResourcesCount orders the results by ignored_resources count.
func ByIgnoredResourcesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIgnoredResourcesStep(), opts...)
	}
}

// ByIgnoredResources orders the results by ignored_resources terms.
func ByIgnoredResources(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIgnoredResourcesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProfilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProfilesTable, ProfilesColumn),
	)
}
func newRegistryFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegistryFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RegistryFkTable, RegistryFkColumn),
	)
}
func newImageRegistryFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageRegistryFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ImageRegistryFkTable, ImageRegistryFkColumn),
	)
}
func newDeploymentPackageFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentPackageFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DeploymentPackageFkTable, DeploymentPackageFkPrimaryKey...),
	)
}
func newDependencySourceFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependencySourceFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DependencySourceFkTable, DependencySourceFkColumn),
	)
}
func newDependencyTargetFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependencyTargetFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DependencyTargetFkTable, DependencyTargetFkColumn),
	)
}
func newDefaultProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DefaultProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DefaultProfileTable, DefaultProfileColumn),
	)
}
func newIgnoredResourcesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IgnoredResourcesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IgnoredResourcesTable, IgnoredResourcesColumn),
	)
}
