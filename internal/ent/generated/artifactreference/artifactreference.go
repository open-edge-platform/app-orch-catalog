// Code generated by ent, DO NOT EDIT.

package artifactreference

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the artifactreference type in the database.
	Label = "artifact_reference"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPurpose holds the string denoting the purpose field in the database.
	FieldPurpose = "purpose"
	// EdgeArtifact holds the string denoting the artifact edge name in mutations.
	EdgeArtifact = "artifact"
	// EdgeDeploymentPackageFk holds the string denoting the deployment_package_fk edge name in mutations.
	EdgeDeploymentPackageFk = "deployment_package_fk"
	// Table holds the table name of the artifactreference in the database.
	Table = "artifact_references"
	// ArtifactTable is the table that holds the artifact relation/edge.
	ArtifactTable = "artifact_references"
	// ArtifactInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	ArtifactInverseTable = "artifacts"
	// ArtifactColumn is the table column denoting the artifact relation/edge.
	ArtifactColumn = "artifact_reference_artifact"
	// DeploymentPackageFkTable is the table that holds the deployment_package_fk relation/edge.
	DeploymentPackageFkTable = "artifact_references"
	// DeploymentPackageFkInverseTable is the table name for the DeploymentPackage entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentpackage" package.
	DeploymentPackageFkInverseTable = "deployment_packages"
	// DeploymentPackageFkColumn is the table column denoting the deployment_package_fk relation/edge.
	DeploymentPackageFkColumn = "deployment_package_artifacts"
)

// Columns holds all SQL columns for artifactreference fields.
var Columns = []string{
	FieldID,
	FieldPurpose,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "artifact_references"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"artifact_reference_artifact",
	"deployment_package_artifacts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ArtifactReference queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPurpose orders the results by the purpose field.
func ByPurpose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPurpose, opts...).ToFunc()
}

// ByArtifactField orders the results by artifact field.
func ByArtifactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtifactStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeploymentPackageFkField orders the results by deployment_package_fk field.
func ByDeploymentPackageFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentPackageFkStep(), sql.OrderByField(field, opts...))
	}
}
func newArtifactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtifactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ArtifactTable, ArtifactColumn),
	)
}
func newDeploymentPackageFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentPackageFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeploymentPackageFkTable, DeploymentPackageFkColumn),
	)
}
