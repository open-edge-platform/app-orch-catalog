// Code generated by ent, DO NOT EDIT.

package artifactreference

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldLTE(FieldID, id))
}

// Purpose applies equality check predicate on the "purpose" field. It's identical to PurposeEQ.
func Purpose(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldEQ(FieldPurpose, v))
}

// PurposeEQ applies the EQ predicate on the "purpose" field.
func PurposeEQ(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldEQ(FieldPurpose, v))
}

// PurposeNEQ applies the NEQ predicate on the "purpose" field.
func PurposeNEQ(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldNEQ(FieldPurpose, v))
}

// PurposeIn applies the In predicate on the "purpose" field.
func PurposeIn(vs ...string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldIn(FieldPurpose, vs...))
}

// PurposeNotIn applies the NotIn predicate on the "purpose" field.
func PurposeNotIn(vs ...string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldNotIn(FieldPurpose, vs...))
}

// PurposeGT applies the GT predicate on the "purpose" field.
func PurposeGT(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldGT(FieldPurpose, v))
}

// PurposeGTE applies the GTE predicate on the "purpose" field.
func PurposeGTE(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldGTE(FieldPurpose, v))
}

// PurposeLT applies the LT predicate on the "purpose" field.
func PurposeLT(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldLT(FieldPurpose, v))
}

// PurposeLTE applies the LTE predicate on the "purpose" field.
func PurposeLTE(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldLTE(FieldPurpose, v))
}

// PurposeContains applies the Contains predicate on the "purpose" field.
func PurposeContains(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldContains(FieldPurpose, v))
}

// PurposeHasPrefix applies the HasPrefix predicate on the "purpose" field.
func PurposeHasPrefix(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldHasPrefix(FieldPurpose, v))
}

// PurposeHasSuffix applies the HasSuffix predicate on the "purpose" field.
func PurposeHasSuffix(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldHasSuffix(FieldPurpose, v))
}

// PurposeEqualFold applies the EqualFold predicate on the "purpose" field.
func PurposeEqualFold(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldEqualFold(FieldPurpose, v))
}

// PurposeContainsFold applies the ContainsFold predicate on the "purpose" field.
func PurposeContainsFold(v string) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.FieldContainsFold(FieldPurpose, v))
}

// HasArtifact applies the HasEdge predicate on the "artifact" edge.
func HasArtifact() predicate.ArtifactReference {
	return predicate.ArtifactReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ArtifactTable, ArtifactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtifactWith applies the HasEdge predicate on the "artifact" edge with a given conditions (other predicates).
func HasArtifactWith(preds ...predicate.Artifact) predicate.ArtifactReference {
	return predicate.ArtifactReference(func(s *sql.Selector) {
		step := newArtifactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeploymentPackageFk applies the HasEdge predicate on the "deployment_package_fk" edge.
func HasDeploymentPackageFk() predicate.ArtifactReference {
	return predicate.ArtifactReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeploymentPackageFkTable, DeploymentPackageFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentPackageFkWith applies the HasEdge predicate on the "deployment_package_fk" edge with a given conditions (other predicates).
func HasDeploymentPackageFkWith(preds ...predicate.DeploymentPackage) predicate.ArtifactReference {
	return predicate.ArtifactReference(func(s *sql.Selector) {
		step := newDeploymentPackageFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ArtifactReference) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ArtifactReference) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ArtifactReference) predicate.ArtifactReference {
	return predicate.ArtifactReference(sql.NotPredicates(p))
}
