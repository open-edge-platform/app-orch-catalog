// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationnamespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ApplicationNamespaceQuery is the builder for querying ApplicationNamespace entities.
type ApplicationNamespaceQuery struct {
	config
	ctx                     *QueryContext
	order                   []applicationnamespace.OrderOption
	inters                  []Interceptor
	predicates              []predicate.ApplicationNamespace
	withDeploymentPackageFk *DeploymentPackageQuery
	withSourceFk            *ApplicationQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ApplicationNamespaceQuery builder.
func (anq *ApplicationNamespaceQuery) Where(ps ...predicate.ApplicationNamespace) *ApplicationNamespaceQuery {
	anq.predicates = append(anq.predicates, ps...)
	return anq
}

// Limit the number of records to be returned by this query.
func (anq *ApplicationNamespaceQuery) Limit(limit int) *ApplicationNamespaceQuery {
	anq.ctx.Limit = &limit
	return anq
}

// Offset to start from.
func (anq *ApplicationNamespaceQuery) Offset(offset int) *ApplicationNamespaceQuery {
	anq.ctx.Offset = &offset
	return anq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (anq *ApplicationNamespaceQuery) Unique(unique bool) *ApplicationNamespaceQuery {
	anq.ctx.Unique = &unique
	return anq
}

// Order specifies how the records should be ordered.
func (anq *ApplicationNamespaceQuery) Order(o ...applicationnamespace.OrderOption) *ApplicationNamespaceQuery {
	anq.order = append(anq.order, o...)
	return anq
}

// QueryDeploymentPackageFk chains the current query on the "deployment_package_fk" edge.
func (anq *ApplicationNamespaceQuery) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: anq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := anq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := anq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationnamespace.Table, applicationnamespace.FieldID, selector),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicationnamespace.DeploymentPackageFkTable, applicationnamespace.DeploymentPackageFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(anq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySourceFk chains the current query on the "source_fk" edge.
func (anq *ApplicationNamespaceQuery) QuerySourceFk() *ApplicationQuery {
	query := (&ApplicationClient{config: anq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := anq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := anq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationnamespace.Table, applicationnamespace.FieldID, selector),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, applicationnamespace.SourceFkTable, applicationnamespace.SourceFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(anq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ApplicationNamespace entity from the query.
// Returns a *NotFoundError when no ApplicationNamespace was found.
func (anq *ApplicationNamespaceQuery) First(ctx context.Context) (*ApplicationNamespace, error) {
	nodes, err := anq.Limit(1).All(setContextOp(ctx, anq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{applicationnamespace.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (anq *ApplicationNamespaceQuery) FirstX(ctx context.Context) *ApplicationNamespace {
	node, err := anq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ApplicationNamespace ID from the query.
// Returns a *NotFoundError when no ApplicationNamespace ID was found.
func (anq *ApplicationNamespaceQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = anq.Limit(1).IDs(setContextOp(ctx, anq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{applicationnamespace.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (anq *ApplicationNamespaceQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := anq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ApplicationNamespace entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ApplicationNamespace entity is found.
// Returns a *NotFoundError when no ApplicationNamespace entities are found.
func (anq *ApplicationNamespaceQuery) Only(ctx context.Context) (*ApplicationNamespace, error) {
	nodes, err := anq.Limit(2).All(setContextOp(ctx, anq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{applicationnamespace.Label}
	default:
		return nil, &NotSingularError{applicationnamespace.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (anq *ApplicationNamespaceQuery) OnlyX(ctx context.Context) *ApplicationNamespace {
	node, err := anq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ApplicationNamespace ID in the query.
// Returns a *NotSingularError when more than one ApplicationNamespace ID is found.
// Returns a *NotFoundError when no entities are found.
func (anq *ApplicationNamespaceQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = anq.Limit(2).IDs(setContextOp(ctx, anq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{applicationnamespace.Label}
	default:
		err = &NotSingularError{applicationnamespace.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (anq *ApplicationNamespaceQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := anq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ApplicationNamespaces.
func (anq *ApplicationNamespaceQuery) All(ctx context.Context) ([]*ApplicationNamespace, error) {
	ctx = setContextOp(ctx, anq.ctx, "All")
	if err := anq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ApplicationNamespace, *ApplicationNamespaceQuery]()
	return withInterceptors[[]*ApplicationNamespace](ctx, anq, qr, anq.inters)
}

// AllX is like All, but panics if an error occurs.
func (anq *ApplicationNamespaceQuery) AllX(ctx context.Context) []*ApplicationNamespace {
	nodes, err := anq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ApplicationNamespace IDs.
func (anq *ApplicationNamespaceQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if anq.ctx.Unique == nil && anq.path != nil {
		anq.Unique(true)
	}
	ctx = setContextOp(ctx, anq.ctx, "IDs")
	if err = anq.Select(applicationnamespace.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (anq *ApplicationNamespaceQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := anq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (anq *ApplicationNamespaceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, anq.ctx, "Count")
	if err := anq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, anq, querierCount[*ApplicationNamespaceQuery](), anq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (anq *ApplicationNamespaceQuery) CountX(ctx context.Context) int {
	count, err := anq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (anq *ApplicationNamespaceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, anq.ctx, "Exist")
	switch _, err := anq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (anq *ApplicationNamespaceQuery) ExistX(ctx context.Context) bool {
	exist, err := anq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ApplicationNamespaceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (anq *ApplicationNamespaceQuery) Clone() *ApplicationNamespaceQuery {
	if anq == nil {
		return nil
	}
	return &ApplicationNamespaceQuery{
		config:                  anq.config,
		ctx:                     anq.ctx.Clone(),
		order:                   append([]applicationnamespace.OrderOption{}, anq.order...),
		inters:                  append([]Interceptor{}, anq.inters...),
		predicates:              append([]predicate.ApplicationNamespace{}, anq.predicates...),
		withDeploymentPackageFk: anq.withDeploymentPackageFk.Clone(),
		withSourceFk:            anq.withSourceFk.Clone(),
		// clone intermediate query.
		sql:  anq.sql.Clone(),
		path: anq.path,
	}
}

// WithDeploymentPackageFk tells the query-builder to eager-load the nodes that are connected to
// the "deployment_package_fk" edge. The optional arguments are used to configure the query builder of the edge.
func (anq *ApplicationNamespaceQuery) WithDeploymentPackageFk(opts ...func(*DeploymentPackageQuery)) *ApplicationNamespaceQuery {
	query := (&DeploymentPackageClient{config: anq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	anq.withDeploymentPackageFk = query
	return anq
}

// WithSourceFk tells the query-builder to eager-load the nodes that are connected to
// the "source_fk" edge. The optional arguments are used to configure the query builder of the edge.
func (anq *ApplicationNamespaceQuery) WithSourceFk(opts ...func(*ApplicationQuery)) *ApplicationNamespaceQuery {
	query := (&ApplicationClient{config: anq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	anq.withSourceFk = query
	return anq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ApplicationNamespace.Query().
//		GroupBy(applicationnamespace.FieldNamespace).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (anq *ApplicationNamespaceQuery) GroupBy(field string, fields ...string) *ApplicationNamespaceGroupBy {
	anq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ApplicationNamespaceGroupBy{build: anq}
	grbuild.flds = &anq.ctx.Fields
	grbuild.label = applicationnamespace.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.ApplicationNamespace.Query().
//		Select(applicationnamespace.FieldNamespace).
//		Scan(ctx, &v)
func (anq *ApplicationNamespaceQuery) Select(fields ...string) *ApplicationNamespaceSelect {
	anq.ctx.Fields = append(anq.ctx.Fields, fields...)
	sbuild := &ApplicationNamespaceSelect{ApplicationNamespaceQuery: anq}
	sbuild.label = applicationnamespace.Label
	sbuild.flds, sbuild.scan = &anq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ApplicationNamespaceSelect configured with the given aggregations.
func (anq *ApplicationNamespaceQuery) Aggregate(fns ...AggregateFunc) *ApplicationNamespaceSelect {
	return anq.Select().Aggregate(fns...)
}

func (anq *ApplicationNamespaceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range anq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, anq); err != nil {
				return err
			}
		}
	}
	for _, f := range anq.ctx.Fields {
		if !applicationnamespace.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if anq.path != nil {
		prev, err := anq.path(ctx)
		if err != nil {
			return err
		}
		anq.sql = prev
	}
	return nil
}

func (anq *ApplicationNamespaceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ApplicationNamespace, error) {
	var (
		nodes       = []*ApplicationNamespace{}
		withFKs     = anq.withFKs
		_spec       = anq.querySpec()
		loadedTypes = [2]bool{
			anq.withDeploymentPackageFk != nil,
			anq.withSourceFk != nil,
		}
	)
	if anq.withDeploymentPackageFk != nil || anq.withSourceFk != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, applicationnamespace.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ApplicationNamespace).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ApplicationNamespace{config: anq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, anq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := anq.withDeploymentPackageFk; query != nil {
		if err := anq.loadDeploymentPackageFk(ctx, query, nodes, nil,
			func(n *ApplicationNamespace, e *DeploymentPackage) { n.Edges.DeploymentPackageFk = e }); err != nil {
			return nil, err
		}
	}
	if query := anq.withSourceFk; query != nil {
		if err := anq.loadSourceFk(ctx, query, nodes, nil,
			func(n *ApplicationNamespace, e *Application) { n.Edges.SourceFk = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (anq *ApplicationNamespaceQuery) loadDeploymentPackageFk(ctx context.Context, query *DeploymentPackageQuery, nodes []*ApplicationNamespace, init func(*ApplicationNamespace), assign func(*ApplicationNamespace, *DeploymentPackage)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*ApplicationNamespace)
	for i := range nodes {
		if nodes[i].deployment_package_application_namespaces == nil {
			continue
		}
		fk := *nodes[i].deployment_package_application_namespaces
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deploymentpackage.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "deployment_package_application_namespaces" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (anq *ApplicationNamespaceQuery) loadSourceFk(ctx context.Context, query *ApplicationQuery, nodes []*ApplicationNamespace, init func(*ApplicationNamespace), assign func(*ApplicationNamespace, *Application)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*ApplicationNamespace)
	for i := range nodes {
		if nodes[i].application_namespace_source_fk == nil {
			continue
		}
		fk := *nodes[i].application_namespace_source_fk
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(application.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "application_namespace_source_fk" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (anq *ApplicationNamespaceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := anq.querySpec()
	_spec.Node.Columns = anq.ctx.Fields
	if len(anq.ctx.Fields) > 0 {
		_spec.Unique = anq.ctx.Unique != nil && *anq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, anq.driver, _spec)
}

func (anq *ApplicationNamespaceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(applicationnamespace.Table, applicationnamespace.Columns, sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64))
	_spec.From = anq.sql
	if unique := anq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if anq.path != nil {
		_spec.Unique = true
	}
	if fields := anq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationnamespace.FieldID)
		for i := range fields {
			if fields[i] != applicationnamespace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := anq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := anq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := anq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := anq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (anq *ApplicationNamespaceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(anq.driver.Dialect())
	t1 := builder.Table(applicationnamespace.Table)
	columns := anq.ctx.Fields
	if len(columns) == 0 {
		columns = applicationnamespace.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if anq.sql != nil {
		selector = anq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if anq.ctx.Unique != nil && *anq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range anq.predicates {
		p(selector)
	}
	for _, p := range anq.order {
		p(selector)
	}
	if offset := anq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := anq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ApplicationNamespaceGroupBy is the group-by builder for ApplicationNamespace entities.
type ApplicationNamespaceGroupBy struct {
	selector
	build *ApplicationNamespaceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (angb *ApplicationNamespaceGroupBy) Aggregate(fns ...AggregateFunc) *ApplicationNamespaceGroupBy {
	angb.fns = append(angb.fns, fns...)
	return angb
}

// Scan applies the selector query and scans the result into the given value.
func (angb *ApplicationNamespaceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, angb.build.ctx, "GroupBy")
	if err := angb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ApplicationNamespaceQuery, *ApplicationNamespaceGroupBy](ctx, angb.build, angb, angb.build.inters, v)
}

func (angb *ApplicationNamespaceGroupBy) sqlScan(ctx context.Context, root *ApplicationNamespaceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(angb.fns))
	for _, fn := range angb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*angb.flds)+len(angb.fns))
		for _, f := range *angb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*angb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := angb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ApplicationNamespaceSelect is the builder for selecting fields of ApplicationNamespace entities.
type ApplicationNamespaceSelect struct {
	*ApplicationNamespaceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ans *ApplicationNamespaceSelect) Aggregate(fns ...AggregateFunc) *ApplicationNamespaceSelect {
	ans.fns = append(ans.fns, fns...)
	return ans
}

// Scan applies the selector query and scans the result into the given value.
func (ans *ApplicationNamespaceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ans.ctx, "Select")
	if err := ans.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ApplicationNamespaceQuery, *ApplicationNamespaceSelect](ctx, ans.ApplicationNamespaceQuery, ans, ans.inters, v)
}

func (ans *ApplicationNamespaceSelect) sqlScan(ctx context.Context, root *ApplicationNamespaceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ans.fns))
	for _, fn := range ans.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ans.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ans.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
