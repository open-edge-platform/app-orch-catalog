// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/endpoint"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/extension"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// EndpointUpdate is the builder for updating Endpoint entities.
type EndpointUpdate struct {
	config
	hooks    []Hook
	mutation *EndpointMutation
}

// Where appends a list predicates to the EndpointUpdate builder.
func (eu *EndpointUpdate) Where(ps ...predicate.Endpoint) *EndpointUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetServiceName sets the "service_name" field.
func (eu *EndpointUpdate) SetServiceName(s string) *EndpointUpdate {
	eu.mutation.SetServiceName(s)
	return eu
}

// SetExternalPath sets the "external_path" field.
func (eu *EndpointUpdate) SetExternalPath(s string) *EndpointUpdate {
	eu.mutation.SetExternalPath(s)
	return eu
}

// SetInternalPath sets the "internal_path" field.
func (eu *EndpointUpdate) SetInternalPath(s string) *EndpointUpdate {
	eu.mutation.SetInternalPath(s)
	return eu
}

// SetScheme sets the "scheme" field.
func (eu *EndpointUpdate) SetScheme(s string) *EndpointUpdate {
	eu.mutation.SetScheme(s)
	return eu
}

// SetAuthType sets the "auth_type" field.
func (eu *EndpointUpdate) SetAuthType(s string) *EndpointUpdate {
	eu.mutation.SetAuthType(s)
	return eu
}

// SetAppName sets the "app_name" field.
func (eu *EndpointUpdate) SetAppName(s string) *EndpointUpdate {
	eu.mutation.SetAppName(s)
	return eu
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableAppName(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetAppName(*s)
	}
	return eu
}

// ClearAppName clears the value of the "app_name" field.
func (eu *EndpointUpdate) ClearAppName() *EndpointUpdate {
	eu.mutation.ClearAppName()
	return eu
}

// SetExtensionFkID sets the "extension_fk" edge to the Extension entity by ID.
func (eu *EndpointUpdate) SetExtensionFkID(id uint64) *EndpointUpdate {
	eu.mutation.SetExtensionFkID(id)
	return eu
}

// SetExtensionFk sets the "extension_fk" edge to the Extension entity.
func (eu *EndpointUpdate) SetExtensionFk(e *Extension) *EndpointUpdate {
	return eu.SetExtensionFkID(e.ID)
}

// Mutation returns the EndpointMutation object of the builder.
func (eu *EndpointUpdate) Mutation() *EndpointMutation {
	return eu.mutation
}

// ClearExtensionFk clears the "extension_fk" edge to the Extension entity.
func (eu *EndpointUpdate) ClearExtensionFk() *EndpointUpdate {
	eu.mutation.ClearExtensionFk()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EndpointUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EndpointUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EndpointUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EndpointUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EndpointUpdate) check() error {
	if _, ok := eu.mutation.ExtensionFkID(); eu.mutation.ExtensionFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Endpoint.extension_fk"`)
	}
	return nil
}

func (eu *EndpointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(endpoint.Table, endpoint.Columns, sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeUint64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ServiceName(); ok {
		_spec.SetField(endpoint.FieldServiceName, field.TypeString, value)
	}
	if value, ok := eu.mutation.ExternalPath(); ok {
		_spec.SetField(endpoint.FieldExternalPath, field.TypeString, value)
	}
	if value, ok := eu.mutation.InternalPath(); ok {
		_spec.SetField(endpoint.FieldInternalPath, field.TypeString, value)
	}
	if value, ok := eu.mutation.Scheme(); ok {
		_spec.SetField(endpoint.FieldScheme, field.TypeString, value)
	}
	if value, ok := eu.mutation.AuthType(); ok {
		_spec.SetField(endpoint.FieldAuthType, field.TypeString, value)
	}
	if value, ok := eu.mutation.AppName(); ok {
		_spec.SetField(endpoint.FieldAppName, field.TypeString, value)
	}
	if eu.mutation.AppNameCleared() {
		_spec.ClearField(endpoint.FieldAppName, field.TypeString)
	}
	if eu.mutation.ExtensionFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpoint.ExtensionFkTable,
			Columns: []string{endpoint.ExtensionFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExtensionFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpoint.ExtensionFkTable,
			Columns: []string{endpoint.ExtensionFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EndpointUpdateOne is the builder for updating a single Endpoint entity.
type EndpointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EndpointMutation
}

// SetServiceName sets the "service_name" field.
func (euo *EndpointUpdateOne) SetServiceName(s string) *EndpointUpdateOne {
	euo.mutation.SetServiceName(s)
	return euo
}

// SetExternalPath sets the "external_path" field.
func (euo *EndpointUpdateOne) SetExternalPath(s string) *EndpointUpdateOne {
	euo.mutation.SetExternalPath(s)
	return euo
}

// SetInternalPath sets the "internal_path" field.
func (euo *EndpointUpdateOne) SetInternalPath(s string) *EndpointUpdateOne {
	euo.mutation.SetInternalPath(s)
	return euo
}

// SetScheme sets the "scheme" field.
func (euo *EndpointUpdateOne) SetScheme(s string) *EndpointUpdateOne {
	euo.mutation.SetScheme(s)
	return euo
}

// SetAuthType sets the "auth_type" field.
func (euo *EndpointUpdateOne) SetAuthType(s string) *EndpointUpdateOne {
	euo.mutation.SetAuthType(s)
	return euo
}

// SetAppName sets the "app_name" field.
func (euo *EndpointUpdateOne) SetAppName(s string) *EndpointUpdateOne {
	euo.mutation.SetAppName(s)
	return euo
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableAppName(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetAppName(*s)
	}
	return euo
}

// ClearAppName clears the value of the "app_name" field.
func (euo *EndpointUpdateOne) ClearAppName() *EndpointUpdateOne {
	euo.mutation.ClearAppName()
	return euo
}

// SetExtensionFkID sets the "extension_fk" edge to the Extension entity by ID.
func (euo *EndpointUpdateOne) SetExtensionFkID(id uint64) *EndpointUpdateOne {
	euo.mutation.SetExtensionFkID(id)
	return euo
}

// SetExtensionFk sets the "extension_fk" edge to the Extension entity.
func (euo *EndpointUpdateOne) SetExtensionFk(e *Extension) *EndpointUpdateOne {
	return euo.SetExtensionFkID(e.ID)
}

// Mutation returns the EndpointMutation object of the builder.
func (euo *EndpointUpdateOne) Mutation() *EndpointMutation {
	return euo.mutation
}

// ClearExtensionFk clears the "extension_fk" edge to the Extension entity.
func (euo *EndpointUpdateOne) ClearExtensionFk() *EndpointUpdateOne {
	euo.mutation.ClearExtensionFk()
	return euo
}

// Where appends a list predicates to the EndpointUpdate builder.
func (euo *EndpointUpdateOne) Where(ps ...predicate.Endpoint) *EndpointUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EndpointUpdateOne) Select(field string, fields ...string) *EndpointUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Endpoint entity.
func (euo *EndpointUpdateOne) Save(ctx context.Context) (*Endpoint, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EndpointUpdateOne) SaveX(ctx context.Context) *Endpoint {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EndpointUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EndpointUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EndpointUpdateOne) check() error {
	if _, ok := euo.mutation.ExtensionFkID(); euo.mutation.ExtensionFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Endpoint.extension_fk"`)
	}
	return nil
}

func (euo *EndpointUpdateOne) sqlSave(ctx context.Context) (_node *Endpoint, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(endpoint.Table, endpoint.Columns, sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeUint64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Endpoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, endpoint.FieldID)
		for _, f := range fields {
			if !endpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != endpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ServiceName(); ok {
		_spec.SetField(endpoint.FieldServiceName, field.TypeString, value)
	}
	if value, ok := euo.mutation.ExternalPath(); ok {
		_spec.SetField(endpoint.FieldExternalPath, field.TypeString, value)
	}
	if value, ok := euo.mutation.InternalPath(); ok {
		_spec.SetField(endpoint.FieldInternalPath, field.TypeString, value)
	}
	if value, ok := euo.mutation.Scheme(); ok {
		_spec.SetField(endpoint.FieldScheme, field.TypeString, value)
	}
	if value, ok := euo.mutation.AuthType(); ok {
		_spec.SetField(endpoint.FieldAuthType, field.TypeString, value)
	}
	if value, ok := euo.mutation.AppName(); ok {
		_spec.SetField(endpoint.FieldAppName, field.TypeString, value)
	}
	if euo.mutation.AppNameCleared() {
		_spec.ClearField(endpoint.FieldAppName, field.TypeString)
	}
	if euo.mutation.ExtensionFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpoint.ExtensionFkTable,
			Columns: []string{endpoint.ExtensionFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExtensionFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpoint.ExtensionFkTable,
			Columns: []string{endpoint.ExtensionFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Endpoint{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
