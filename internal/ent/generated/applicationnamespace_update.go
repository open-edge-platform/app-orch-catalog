// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationnamespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ApplicationNamespaceUpdate is the builder for updating ApplicationNamespace entities.
type ApplicationNamespaceUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationNamespaceMutation
}

// Where appends a list predicates to the ApplicationNamespaceUpdate builder.
func (anu *ApplicationNamespaceUpdate) Where(ps ...predicate.ApplicationNamespace) *ApplicationNamespaceUpdate {
	anu.mutation.Where(ps...)
	return anu
}

// SetNamespace sets the "namespace" field.
func (anu *ApplicationNamespaceUpdate) SetNamespace(s string) *ApplicationNamespaceUpdate {
	anu.mutation.SetNamespace(s)
	return anu
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (anu *ApplicationNamespaceUpdate) SetNillableNamespace(s *string) *ApplicationNamespaceUpdate {
	if s != nil {
		anu.SetNamespace(*s)
	}
	return anu
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (anu *ApplicationNamespaceUpdate) SetDeploymentPackageFkID(id uint64) *ApplicationNamespaceUpdate {
	anu.mutation.SetDeploymentPackageFkID(id)
	return anu
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (anu *ApplicationNamespaceUpdate) SetDeploymentPackageFk(d *DeploymentPackage) *ApplicationNamespaceUpdate {
	return anu.SetDeploymentPackageFkID(d.ID)
}

// SetSourceFkID sets the "source_fk" edge to the Application entity by ID.
func (anu *ApplicationNamespaceUpdate) SetSourceFkID(id uint64) *ApplicationNamespaceUpdate {
	anu.mutation.SetSourceFkID(id)
	return anu
}

// SetSourceFk sets the "source_fk" edge to the Application entity.
func (anu *ApplicationNamespaceUpdate) SetSourceFk(a *Application) *ApplicationNamespaceUpdate {
	return anu.SetSourceFkID(a.ID)
}

// Mutation returns the ApplicationNamespaceMutation object of the builder.
func (anu *ApplicationNamespaceUpdate) Mutation() *ApplicationNamespaceMutation {
	return anu.mutation
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (anu *ApplicationNamespaceUpdate) ClearDeploymentPackageFk() *ApplicationNamespaceUpdate {
	anu.mutation.ClearDeploymentPackageFk()
	return anu
}

// ClearSourceFk clears the "source_fk" edge to the Application entity.
func (anu *ApplicationNamespaceUpdate) ClearSourceFk() *ApplicationNamespaceUpdate {
	anu.mutation.ClearSourceFk()
	return anu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (anu *ApplicationNamespaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, anu.sqlSave, anu.mutation, anu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (anu *ApplicationNamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := anu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (anu *ApplicationNamespaceUpdate) Exec(ctx context.Context) error {
	_, err := anu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anu *ApplicationNamespaceUpdate) ExecX(ctx context.Context) {
	if err := anu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anu *ApplicationNamespaceUpdate) check() error {
	if _, ok := anu.mutation.DeploymentPackageFkID(); anu.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationNamespace.deployment_package_fk"`)
	}
	if _, ok := anu.mutation.SourceFkID(); anu.mutation.SourceFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationNamespace.source_fk"`)
	}
	return nil
}

func (anu *ApplicationNamespaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := anu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicationnamespace.Table, applicationnamespace.Columns, sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64))
	if ps := anu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anu.mutation.Namespace(); ok {
		_spec.SetField(applicationnamespace.FieldNamespace, field.TypeString, value)
	}
	if anu.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationnamespace.DeploymentPackageFkTable,
			Columns: []string{applicationnamespace.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := anu.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationnamespace.DeploymentPackageFkTable,
			Columns: []string{applicationnamespace.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if anu.mutation.SourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationnamespace.SourceFkTable,
			Columns: []string{applicationnamespace.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := anu.mutation.SourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationnamespace.SourceFkTable,
			Columns: []string{applicationnamespace.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, anu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationnamespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	anu.mutation.done = true
	return n, nil
}

// ApplicationNamespaceUpdateOne is the builder for updating a single ApplicationNamespace entity.
type ApplicationNamespaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationNamespaceMutation
}

// SetNamespace sets the "namespace" field.
func (anuo *ApplicationNamespaceUpdateOne) SetNamespace(s string) *ApplicationNamespaceUpdateOne {
	anuo.mutation.SetNamespace(s)
	return anuo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (anuo *ApplicationNamespaceUpdateOne) SetNillableNamespace(s *string) *ApplicationNamespaceUpdateOne {
	if s != nil {
		anuo.SetNamespace(*s)
	}
	return anuo
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (anuo *ApplicationNamespaceUpdateOne) SetDeploymentPackageFkID(id uint64) *ApplicationNamespaceUpdateOne {
	anuo.mutation.SetDeploymentPackageFkID(id)
	return anuo
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (anuo *ApplicationNamespaceUpdateOne) SetDeploymentPackageFk(d *DeploymentPackage) *ApplicationNamespaceUpdateOne {
	return anuo.SetDeploymentPackageFkID(d.ID)
}

// SetSourceFkID sets the "source_fk" edge to the Application entity by ID.
func (anuo *ApplicationNamespaceUpdateOne) SetSourceFkID(id uint64) *ApplicationNamespaceUpdateOne {
	anuo.mutation.SetSourceFkID(id)
	return anuo
}

// SetSourceFk sets the "source_fk" edge to the Application entity.
func (anuo *ApplicationNamespaceUpdateOne) SetSourceFk(a *Application) *ApplicationNamespaceUpdateOne {
	return anuo.SetSourceFkID(a.ID)
}

// Mutation returns the ApplicationNamespaceMutation object of the builder.
func (anuo *ApplicationNamespaceUpdateOne) Mutation() *ApplicationNamespaceMutation {
	return anuo.mutation
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (anuo *ApplicationNamespaceUpdateOne) ClearDeploymentPackageFk() *ApplicationNamespaceUpdateOne {
	anuo.mutation.ClearDeploymentPackageFk()
	return anuo
}

// ClearSourceFk clears the "source_fk" edge to the Application entity.
func (anuo *ApplicationNamespaceUpdateOne) ClearSourceFk() *ApplicationNamespaceUpdateOne {
	anuo.mutation.ClearSourceFk()
	return anuo
}

// Where appends a list predicates to the ApplicationNamespaceUpdate builder.
func (anuo *ApplicationNamespaceUpdateOne) Where(ps ...predicate.ApplicationNamespace) *ApplicationNamespaceUpdateOne {
	anuo.mutation.Where(ps...)
	return anuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (anuo *ApplicationNamespaceUpdateOne) Select(field string, fields ...string) *ApplicationNamespaceUpdateOne {
	anuo.fields = append([]string{field}, fields...)
	return anuo
}

// Save executes the query and returns the updated ApplicationNamespace entity.
func (anuo *ApplicationNamespaceUpdateOne) Save(ctx context.Context) (*ApplicationNamespace, error) {
	return withHooks(ctx, anuo.sqlSave, anuo.mutation, anuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (anuo *ApplicationNamespaceUpdateOne) SaveX(ctx context.Context) *ApplicationNamespace {
	node, err := anuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (anuo *ApplicationNamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := anuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anuo *ApplicationNamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := anuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anuo *ApplicationNamespaceUpdateOne) check() error {
	if _, ok := anuo.mutation.DeploymentPackageFkID(); anuo.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationNamespace.deployment_package_fk"`)
	}
	if _, ok := anuo.mutation.SourceFkID(); anuo.mutation.SourceFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ApplicationNamespace.source_fk"`)
	}
	return nil
}

func (anuo *ApplicationNamespaceUpdateOne) sqlSave(ctx context.Context) (_node *ApplicationNamespace, err error) {
	if err := anuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicationnamespace.Table, applicationnamespace.Columns, sqlgraph.NewFieldSpec(applicationnamespace.FieldID, field.TypeUint64))
	id, ok := anuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ApplicationNamespace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := anuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationnamespace.FieldID)
		for _, f := range fields {
			if !applicationnamespace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != applicationnamespace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := anuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anuo.mutation.Namespace(); ok {
		_spec.SetField(applicationnamespace.FieldNamespace, field.TypeString, value)
	}
	if anuo.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationnamespace.DeploymentPackageFkTable,
			Columns: []string{applicationnamespace.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := anuo.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationnamespace.DeploymentPackageFkTable,
			Columns: []string{applicationnamespace.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if anuo.mutation.SourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationnamespace.SourceFkTable,
			Columns: []string{applicationnamespace.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := anuo.mutation.SourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   applicationnamespace.SourceFkTable,
			Columns: []string{applicationnamespace.SourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApplicationNamespace{config: anuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, anuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationnamespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	anuo.mutation.done = true
	return _node, nil
}
