// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/registry"
)

// RegistryUpdate is the builder for updating Registry entities.
type RegistryUpdate struct {
	config
	hooks    []Hook
	mutation *RegistryMutation
}

// Where appends a list predicates to the RegistryUpdate builder.
func (ru *RegistryUpdate) Where(ps ...predicate.Registry) *RegistryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RegistryUpdate) SetName(s string) *RegistryUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetDisplayName sets the "display_name" field.
func (ru *RegistryUpdate) SetDisplayName(s string) *RegistryUpdate {
	ru.mutation.SetDisplayName(s)
	return ru
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ru *RegistryUpdate) SetNillableDisplayName(s *string) *RegistryUpdate {
	if s != nil {
		ru.SetDisplayName(*s)
	}
	return ru
}

// ClearDisplayName clears the value of the "display_name" field.
func (ru *RegistryUpdate) ClearDisplayName() *RegistryUpdate {
	ru.mutation.ClearDisplayName()
	return ru
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (ru *RegistryUpdate) SetDisplayNameLc(s string) *RegistryUpdate {
	ru.mutation.SetDisplayNameLc(s)
	return ru
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (ru *RegistryUpdate) SetNillableDisplayNameLc(s *string) *RegistryUpdate {
	if s != nil {
		ru.SetDisplayNameLc(*s)
	}
	return ru
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (ru *RegistryUpdate) ClearDisplayNameLc() *RegistryUpdate {
	ru.mutation.ClearDisplayNameLc()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RegistryUpdate) SetDescription(s string) *RegistryUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RegistryUpdate) SetNillableDescription(s *string) *RegistryUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RegistryUpdate) ClearDescription() *RegistryUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *RegistryUpdate) SetUpdateTime(t time.Time) *RegistryUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetProjectUUID sets the "project_uuid" field.
func (ru *RegistryUpdate) SetProjectUUID(s string) *RegistryUpdate {
	ru.mutation.SetProjectUUID(s)
	return ru
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (ru *RegistryUpdate) SetNillableProjectUUID(s *string) *RegistryUpdate {
	if s != nil {
		ru.SetProjectUUID(*s)
	}
	return ru
}

// SetAuthToken sets the "auth_token" field.
func (ru *RegistryUpdate) SetAuthToken(s string) *RegistryUpdate {
	ru.mutation.SetAuthToken(s)
	return ru
}

// SetNillableAuthToken sets the "auth_token" field if the given value is not nil.
func (ru *RegistryUpdate) SetNillableAuthToken(s *string) *RegistryUpdate {
	if s != nil {
		ru.SetAuthToken(*s)
	}
	return ru
}

// ClearAuthToken clears the value of the "auth_token" field.
func (ru *RegistryUpdate) ClearAuthToken() *RegistryUpdate {
	ru.mutation.ClearAuthToken()
	return ru
}

// SetType sets the "type" field.
func (ru *RegistryUpdate) SetType(s string) *RegistryUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetAPIType sets the "api_type" field.
func (ru *RegistryUpdate) SetAPIType(s string) *RegistryUpdate {
	ru.mutation.SetAPIType(s)
	return ru
}

// SetNillableAPIType sets the "api_type" field if the given value is not nil.
func (ru *RegistryUpdate) SetNillableAPIType(s *string) *RegistryUpdate {
	if s != nil {
		ru.SetAPIType(*s)
	}
	return ru
}

// ClearAPIType clears the value of the "api_type" field.
func (ru *RegistryUpdate) ClearAPIType() *RegistryUpdate {
	ru.mutation.ClearAPIType()
	return ru
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (ru *RegistryUpdate) AddApplicationIDs(ids ...uint64) *RegistryUpdate {
	ru.mutation.AddApplicationIDs(ids...)
	return ru
}

// AddApplications adds the "applications" edges to the Application entity.
func (ru *RegistryUpdate) AddApplications(a ...*Application) *RegistryUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddApplicationIDs(ids...)
}

// AddApplicationImageIDs adds the "application_images" edge to the Application entity by IDs.
func (ru *RegistryUpdate) AddApplicationImageIDs(ids ...uint64) *RegistryUpdate {
	ru.mutation.AddApplicationImageIDs(ids...)
	return ru
}

// AddApplicationImages adds the "application_images" edges to the Application entity.
func (ru *RegistryUpdate) AddApplicationImages(a ...*Application) *RegistryUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddApplicationImageIDs(ids...)
}

// Mutation returns the RegistryMutation object of the builder.
func (ru *RegistryUpdate) Mutation() *RegistryMutation {
	return ru.mutation
}

// ClearApplications clears all "applications" edges to the Application entity.
func (ru *RegistryUpdate) ClearApplications() *RegistryUpdate {
	ru.mutation.ClearApplications()
	return ru
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (ru *RegistryUpdate) RemoveApplicationIDs(ids ...uint64) *RegistryUpdate {
	ru.mutation.RemoveApplicationIDs(ids...)
	return ru
}

// RemoveApplications removes "applications" edges to Application entities.
func (ru *RegistryUpdate) RemoveApplications(a ...*Application) *RegistryUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveApplicationIDs(ids...)
}

// ClearApplicationImages clears all "application_images" edges to the Application entity.
func (ru *RegistryUpdate) ClearApplicationImages() *RegistryUpdate {
	ru.mutation.ClearApplicationImages()
	return ru
}

// RemoveApplicationImageIDs removes the "application_images" edge to Application entities by IDs.
func (ru *RegistryUpdate) RemoveApplicationImageIDs(ids ...uint64) *RegistryUpdate {
	ru.mutation.RemoveApplicationImageIDs(ids...)
	return ru
}

// RemoveApplicationImages removes "application_images" edges to Application entities.
func (ru *RegistryUpdate) RemoveApplicationImages(a ...*Application) *RegistryUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveApplicationImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RegistryUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegistryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegistryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegistryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RegistryUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := registry.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

func (ru *RegistryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(registry.Table, registry.Columns, sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(registry.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.DisplayName(); ok {
		_spec.SetField(registry.FieldDisplayName, field.TypeString, value)
	}
	if ru.mutation.DisplayNameCleared() {
		_spec.ClearField(registry.FieldDisplayName, field.TypeString)
	}
	if value, ok := ru.mutation.DisplayNameLc(); ok {
		_spec.SetField(registry.FieldDisplayNameLc, field.TypeString, value)
	}
	if ru.mutation.DisplayNameLcCleared() {
		_spec.ClearField(registry.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(registry.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(registry.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(registry.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.ProjectUUID(); ok {
		_spec.SetField(registry.FieldProjectUUID, field.TypeString, value)
	}
	if value, ok := ru.mutation.AuthToken(); ok {
		_spec.SetField(registry.FieldAuthToken, field.TypeString, value)
	}
	if ru.mutation.AuthTokenCleared() {
		_spec.ClearField(registry.FieldAuthToken, field.TypeString)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(registry.FieldType, field.TypeString, value)
	}
	if value, ok := ru.mutation.APIType(); ok {
		_spec.SetField(registry.FieldAPIType, field.TypeString, value)
	}
	if ru.mutation.APITypeCleared() {
		_spec.ClearField(registry.FieldAPIType, field.TypeString)
	}
	if ru.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationsTable,
			Columns: []string{registry.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !ru.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationsTable,
			Columns: []string{registry.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationsTable,
			Columns: []string{registry.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ApplicationImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationImagesTable,
			Columns: []string{registry.ApplicationImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedApplicationImagesIDs(); len(nodes) > 0 && !ru.mutation.ApplicationImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationImagesTable,
			Columns: []string{registry.ApplicationImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ApplicationImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationImagesTable,
			Columns: []string{registry.ApplicationImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RegistryUpdateOne is the builder for updating a single Registry entity.
type RegistryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegistryMutation
}

// SetName sets the "name" field.
func (ruo *RegistryUpdateOne) SetName(s string) *RegistryUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetDisplayName sets the "display_name" field.
func (ruo *RegistryUpdateOne) SetDisplayName(s string) *RegistryUpdateOne {
	ruo.mutation.SetDisplayName(s)
	return ruo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ruo *RegistryUpdateOne) SetNillableDisplayName(s *string) *RegistryUpdateOne {
	if s != nil {
		ruo.SetDisplayName(*s)
	}
	return ruo
}

// ClearDisplayName clears the value of the "display_name" field.
func (ruo *RegistryUpdateOne) ClearDisplayName() *RegistryUpdateOne {
	ruo.mutation.ClearDisplayName()
	return ruo
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (ruo *RegistryUpdateOne) SetDisplayNameLc(s string) *RegistryUpdateOne {
	ruo.mutation.SetDisplayNameLc(s)
	return ruo
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (ruo *RegistryUpdateOne) SetNillableDisplayNameLc(s *string) *RegistryUpdateOne {
	if s != nil {
		ruo.SetDisplayNameLc(*s)
	}
	return ruo
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (ruo *RegistryUpdateOne) ClearDisplayNameLc() *RegistryUpdateOne {
	ruo.mutation.ClearDisplayNameLc()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RegistryUpdateOne) SetDescription(s string) *RegistryUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RegistryUpdateOne) SetNillableDescription(s *string) *RegistryUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RegistryUpdateOne) ClearDescription() *RegistryUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetUpdateTime sets the "update_time" field.
func (ruo *RegistryUpdateOne) SetUpdateTime(t time.Time) *RegistryUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetProjectUUID sets the "project_uuid" field.
func (ruo *RegistryUpdateOne) SetProjectUUID(s string) *RegistryUpdateOne {
	ruo.mutation.SetProjectUUID(s)
	return ruo
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (ruo *RegistryUpdateOne) SetNillableProjectUUID(s *string) *RegistryUpdateOne {
	if s != nil {
		ruo.SetProjectUUID(*s)
	}
	return ruo
}

// SetAuthToken sets the "auth_token" field.
func (ruo *RegistryUpdateOne) SetAuthToken(s string) *RegistryUpdateOne {
	ruo.mutation.SetAuthToken(s)
	return ruo
}

// SetNillableAuthToken sets the "auth_token" field if the given value is not nil.
func (ruo *RegistryUpdateOne) SetNillableAuthToken(s *string) *RegistryUpdateOne {
	if s != nil {
		ruo.SetAuthToken(*s)
	}
	return ruo
}

// ClearAuthToken clears the value of the "auth_token" field.
func (ruo *RegistryUpdateOne) ClearAuthToken() *RegistryUpdateOne {
	ruo.mutation.ClearAuthToken()
	return ruo
}

// SetType sets the "type" field.
func (ruo *RegistryUpdateOne) SetType(s string) *RegistryUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetAPIType sets the "api_type" field.
func (ruo *RegistryUpdateOne) SetAPIType(s string) *RegistryUpdateOne {
	ruo.mutation.SetAPIType(s)
	return ruo
}

// SetNillableAPIType sets the "api_type" field if the given value is not nil.
func (ruo *RegistryUpdateOne) SetNillableAPIType(s *string) *RegistryUpdateOne {
	if s != nil {
		ruo.SetAPIType(*s)
	}
	return ruo
}

// ClearAPIType clears the value of the "api_type" field.
func (ruo *RegistryUpdateOne) ClearAPIType() *RegistryUpdateOne {
	ruo.mutation.ClearAPIType()
	return ruo
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (ruo *RegistryUpdateOne) AddApplicationIDs(ids ...uint64) *RegistryUpdateOne {
	ruo.mutation.AddApplicationIDs(ids...)
	return ruo
}

// AddApplications adds the "applications" edges to the Application entity.
func (ruo *RegistryUpdateOne) AddApplications(a ...*Application) *RegistryUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddApplicationIDs(ids...)
}

// AddApplicationImageIDs adds the "application_images" edge to the Application entity by IDs.
func (ruo *RegistryUpdateOne) AddApplicationImageIDs(ids ...uint64) *RegistryUpdateOne {
	ruo.mutation.AddApplicationImageIDs(ids...)
	return ruo
}

// AddApplicationImages adds the "application_images" edges to the Application entity.
func (ruo *RegistryUpdateOne) AddApplicationImages(a ...*Application) *RegistryUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddApplicationImageIDs(ids...)
}

// Mutation returns the RegistryMutation object of the builder.
func (ruo *RegistryUpdateOne) Mutation() *RegistryMutation {
	return ruo.mutation
}

// ClearApplications clears all "applications" edges to the Application entity.
func (ruo *RegistryUpdateOne) ClearApplications() *RegistryUpdateOne {
	ruo.mutation.ClearApplications()
	return ruo
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (ruo *RegistryUpdateOne) RemoveApplicationIDs(ids ...uint64) *RegistryUpdateOne {
	ruo.mutation.RemoveApplicationIDs(ids...)
	return ruo
}

// RemoveApplications removes "applications" edges to Application entities.
func (ruo *RegistryUpdateOne) RemoveApplications(a ...*Application) *RegistryUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveApplicationIDs(ids...)
}

// ClearApplicationImages clears all "application_images" edges to the Application entity.
func (ruo *RegistryUpdateOne) ClearApplicationImages() *RegistryUpdateOne {
	ruo.mutation.ClearApplicationImages()
	return ruo
}

// RemoveApplicationImageIDs removes the "application_images" edge to Application entities by IDs.
func (ruo *RegistryUpdateOne) RemoveApplicationImageIDs(ids ...uint64) *RegistryUpdateOne {
	ruo.mutation.RemoveApplicationImageIDs(ids...)
	return ruo
}

// RemoveApplicationImages removes "application_images" edges to Application entities.
func (ruo *RegistryUpdateOne) RemoveApplicationImages(a ...*Application) *RegistryUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveApplicationImageIDs(ids...)
}

// Where appends a list predicates to the RegistryUpdate builder.
func (ruo *RegistryUpdateOne) Where(ps ...predicate.Registry) *RegistryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RegistryUpdateOne) Select(field string, fields ...string) *RegistryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Registry entity.
func (ruo *RegistryUpdateOne) Save(ctx context.Context) (*Registry, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegistryUpdateOne) SaveX(ctx context.Context) *Registry {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RegistryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegistryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RegistryUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := registry.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

func (ruo *RegistryUpdateOne) sqlSave(ctx context.Context) (_node *Registry, err error) {
	_spec := sqlgraph.NewUpdateSpec(registry.Table, registry.Columns, sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Registry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, registry.FieldID)
		for _, f := range fields {
			if !registry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != registry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(registry.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DisplayName(); ok {
		_spec.SetField(registry.FieldDisplayName, field.TypeString, value)
	}
	if ruo.mutation.DisplayNameCleared() {
		_spec.ClearField(registry.FieldDisplayName, field.TypeString)
	}
	if value, ok := ruo.mutation.DisplayNameLc(); ok {
		_spec.SetField(registry.FieldDisplayNameLc, field.TypeString, value)
	}
	if ruo.mutation.DisplayNameLcCleared() {
		_spec.ClearField(registry.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(registry.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(registry.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(registry.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.ProjectUUID(); ok {
		_spec.SetField(registry.FieldProjectUUID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.AuthToken(); ok {
		_spec.SetField(registry.FieldAuthToken, field.TypeString, value)
	}
	if ruo.mutation.AuthTokenCleared() {
		_spec.ClearField(registry.FieldAuthToken, field.TypeString)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(registry.FieldType, field.TypeString, value)
	}
	if value, ok := ruo.mutation.APIType(); ok {
		_spec.SetField(registry.FieldAPIType, field.TypeString, value)
	}
	if ruo.mutation.APITypeCleared() {
		_spec.ClearField(registry.FieldAPIType, field.TypeString)
	}
	if ruo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationsTable,
			Columns: []string{registry.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !ruo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationsTable,
			Columns: []string{registry.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationsTable,
			Columns: []string{registry.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ApplicationImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationImagesTable,
			Columns: []string{registry.ApplicationImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedApplicationImagesIDs(); len(nodes) > 0 && !ruo.mutation.ApplicationImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationImagesTable,
			Columns: []string{registry.ApplicationImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ApplicationImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationImagesTable,
			Columns: []string{registry.ApplicationImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Registry{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
