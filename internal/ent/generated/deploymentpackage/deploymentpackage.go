// Code generated by ent, DO NOT EDIT.

package deploymentpackage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deploymentpackage type in the database.
	Label = "deployment_package"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDisplayNameLc holds the string denoting the display_name_lc field in the database.
	FieldDisplayNameLc = "display_name_lc"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldProjectUUID holds the string denoting the project_uuid field in the database.
	FieldProjectUUID = "project_uuid"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldIsDeployed holds the string denoting the is_deployed field in the database.
	FieldIsDeployed = "is_deployed"
	// FieldIsVisible holds the string denoting the is_visible field in the database.
	FieldIsVisible = "is_visible"
	// FieldAllowsMultipleDeployments holds the string denoting the allows_multiple_deployments field in the database.
	FieldAllowsMultipleDeployments = "allows_multiple_deployments"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// EdgeDeploymentProfiles holds the string denoting the deployment_profiles edge name in mutations.
	EdgeDeploymentProfiles = "deployment_profiles"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// EdgeIcon holds the string denoting the icon edge name in mutations.
	EdgeIcon = "icon"
	// EdgeThumbnail holds the string denoting the thumbnail edge name in mutations.
	EdgeThumbnail = "thumbnail"
	// EdgeDefaultProfile holds the string denoting the default_profile edge name in mutations.
	EdgeDefaultProfile = "default_profile"
	// EdgeApplicationDependencies holds the string denoting the application_dependencies edge name in mutations.
	EdgeApplicationDependencies = "application_dependencies"
	// EdgeApplicationNamespaces holds the string denoting the application_namespaces edge name in mutations.
	EdgeApplicationNamespaces = "application_namespaces"
	// EdgeNamespaces holds the string denoting the namespaces edge name in mutations.
	EdgeNamespaces = "namespaces"
	// EdgeExtensions holds the string denoting the extensions edge name in mutations.
	EdgeExtensions = "extensions"
	// EdgeArtifacts holds the string denoting the artifacts edge name in mutations.
	EdgeArtifacts = "artifacts"
	// Table holds the table name of the deploymentpackage in the database.
	Table = "deployment_packages"
	// DeploymentProfilesTable is the table that holds the deployment_profiles relation/edge.
	DeploymentProfilesTable = "deployment_profiles"
	// DeploymentProfilesInverseTable is the table name for the DeploymentProfile entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentprofile" package.
	DeploymentProfilesInverseTable = "deployment_profiles"
	// DeploymentProfilesColumn is the table column denoting the deployment_profiles relation/edge.
	DeploymentProfilesColumn = "deployment_package_deployment_profiles"
	// ApplicationsTable is the table that holds the applications relation/edge. The primary key declared below.
	ApplicationsTable = "deployment_package_applications"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "applications"
	// IconTable is the table that holds the icon relation/edge. The primary key declared below.
	IconTable = "deployment_package_icon"
	// IconInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	IconInverseTable = "artifacts"
	// ThumbnailTable is the table that holds the thumbnail relation/edge. The primary key declared below.
	ThumbnailTable = "deployment_package_thumbnail"
	// ThumbnailInverseTable is the table name for the Artifact entity.
	// It exists in this package in order to avoid circular dependency with the "artifact" package.
	ThumbnailInverseTable = "artifacts"
	// DefaultProfileTable is the table that holds the default_profile relation/edge.
	DefaultProfileTable = "deployment_packages"
	// DefaultProfileInverseTable is the table name for the DeploymentProfile entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentprofile" package.
	DefaultProfileInverseTable = "deployment_profiles"
	// DefaultProfileColumn is the table column denoting the default_profile relation/edge.
	DefaultProfileColumn = "deployment_package_default_profile"
	// ApplicationDependenciesTable is the table that holds the application_dependencies relation/edge.
	ApplicationDependenciesTable = "application_dependencies"
	// ApplicationDependenciesInverseTable is the table name for the ApplicationDependency entity.
	// It exists in this package in order to avoid circular dependency with the "applicationdependency" package.
	ApplicationDependenciesInverseTable = "application_dependencies"
	// ApplicationDependenciesColumn is the table column denoting the application_dependencies relation/edge.
	ApplicationDependenciesColumn = "deployment_package_application_dependencies"
	// ApplicationNamespacesTable is the table that holds the application_namespaces relation/edge.
	ApplicationNamespacesTable = "application_namespaces"
	// ApplicationNamespacesInverseTable is the table name for the ApplicationNamespace entity.
	// It exists in this package in order to avoid circular dependency with the "applicationnamespace" package.
	ApplicationNamespacesInverseTable = "application_namespaces"
	// ApplicationNamespacesColumn is the table column denoting the application_namespaces relation/edge.
	ApplicationNamespacesColumn = "deployment_package_application_namespaces"
	// NamespacesTable is the table that holds the namespaces relation/edge.
	NamespacesTable = "namespaces"
	// NamespacesInverseTable is the table name for the Namespace entity.
	// It exists in this package in order to avoid circular dependency with the "namespace" package.
	NamespacesInverseTable = "namespaces"
	// NamespacesColumn is the table column denoting the namespaces relation/edge.
	NamespacesColumn = "deployment_package_namespaces"
	// ExtensionsTable is the table that holds the extensions relation/edge.
	ExtensionsTable = "extensions"
	// ExtensionsInverseTable is the table name for the Extension entity.
	// It exists in this package in order to avoid circular dependency with the "extension" package.
	ExtensionsInverseTable = "extensions"
	// ExtensionsColumn is the table column denoting the extensions relation/edge.
	ExtensionsColumn = "deployment_package_extensions"
	// ArtifactsTable is the table that holds the artifacts relation/edge.
	ArtifactsTable = "artifact_references"
	// ArtifactsInverseTable is the table name for the ArtifactReference entity.
	// It exists in this package in order to avoid circular dependency with the "artifactreference" package.
	ArtifactsInverseTable = "artifact_references"
	// ArtifactsColumn is the table column denoting the artifacts relation/edge.
	ArtifactsColumn = "deployment_package_artifacts"
)

// Columns holds all SQL columns for deploymentpackage fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDisplayNameLc,
	FieldDescription,
	FieldCreateTime,
	FieldUpdateTime,
	FieldProjectUUID,
	FieldVersion,
	FieldIsDeployed,
	FieldIsVisible,
	FieldAllowsMultipleDeployments,
	FieldKind,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "deployment_packages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"deployment_package_default_profile",
}

var (
	// ApplicationsPrimaryKey and ApplicationsColumn2 are the table columns denoting the
	// primary key for the applications relation (M2M).
	ApplicationsPrimaryKey = []string{"deployment_package_id", "application_id"}
	// IconPrimaryKey and IconColumn2 are the table columns denoting the
	// primary key for the icon relation (M2M).
	IconPrimaryKey = []string{"deployment_package_id", "artifact_id"}
	// ThumbnailPrimaryKey and ThumbnailColumn2 are the table columns denoting the
	// primary key for the thumbnail relation (M2M).
	ThumbnailPrimaryKey = []string{"deployment_package_id", "artifact_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultProjectUUID holds the default value on creation for the "project_uuid" field.
	DefaultProjectUUID string
)

// OrderOption defines the ordering options for the DeploymentPackage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDisplayNameLc orders the results by the display_name_lc field.
func ByDisplayNameLc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayNameLc, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByProjectUUID orders the results by the project_uuid field.
func ByProjectUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectUUID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByIsDeployed orders the results by the is_deployed field.
func ByIsDeployed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeployed, opts...).ToFunc()
}

// ByIsVisible orders the results by the is_visible field.
func ByIsVisible(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVisible, opts...).ToFunc()
}

// ByAllowsMultipleDeployments orders the results by the allows_multiple_deployments field.
func ByAllowsMultipleDeployments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowsMultipleDeployments, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByDeploymentProfilesCount orders the results by deployment_profiles count.
func ByDeploymentProfilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeploymentProfilesStep(), opts...)
	}
}

// ByDeploymentProfiles orders the results by deployment_profiles terms.
func ByDeploymentProfiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentProfilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApplicationsCount orders the results by applications count.
func ByApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationsStep(), opts...)
	}
}

// ByApplications orders the results by applications terms.
func ByApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIconCount orders the results by icon count.
func ByIconCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIconStep(), opts...)
	}
}

// ByIcon orders the results by icon terms.
func ByIcon(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIconStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByThumbnailCount orders the results by thumbnail count.
func ByThumbnailCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newThumbnailStep(), opts...)
	}
}

// ByThumbnail orders the results by thumbnail terms.
func ByThumbnail(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newThumbnailStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDefaultProfileField orders the results by default_profile field.
func ByDefaultProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDefaultProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByApplicationDependenciesCount orders the results by application_dependencies count.
func ByApplicationDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationDependenciesStep(), opts...)
	}
}

// ByApplicationDependencies orders the results by application_dependencies terms.
func ByApplicationDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApplicationNamespacesCount orders the results by application_namespaces count.
func ByApplicationNamespacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationNamespacesStep(), opts...)
	}
}

// ByApplicationNamespaces orders the results by application_namespaces terms.
func ByApplicationNamespaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationNamespacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNamespacesCount orders the results by namespaces count.
func ByNamespacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNamespacesStep(), opts...)
	}
}

// ByNamespaces orders the results by namespaces terms.
func ByNamespaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNamespacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExtensionsCount orders the results by extensions count.
func ByExtensionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExtensionsStep(), opts...)
	}
}

// ByExtensions orders the results by extensions terms.
func ByExtensions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExtensionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArtifactsCount orders the results by artifacts count.
func ByArtifactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArtifactsStep(), opts...)
	}
}

// ByArtifacts orders the results by artifacts terms.
func ByArtifacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtifactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeploymentProfilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentProfilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeploymentProfilesTable, DeploymentProfilesColumn),
	)
}
func newApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ApplicationsTable, ApplicationsPrimaryKey...),
	)
}
func newIconStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IconInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IconTable, IconPrimaryKey...),
	)
}
func newThumbnailStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ThumbnailInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ThumbnailTable, ThumbnailPrimaryKey...),
	)
}
func newDefaultProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DefaultProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DefaultProfileTable, DefaultProfileColumn),
	)
}
func newApplicationDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationDependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationDependenciesTable, ApplicationDependenciesColumn),
	)
}
func newApplicationNamespacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationNamespacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationNamespacesTable, ApplicationNamespacesColumn),
	)
}
func newNamespacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NamespacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NamespacesTable, NamespacesColumn),
	)
}
func newExtensionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExtensionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExtensionsTable, ExtensionsColumn),
	)
}
func newArtifactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtifactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArtifactsTable, ArtifactsColumn),
	)
}
