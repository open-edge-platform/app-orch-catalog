// Code generated by ent, DO NOT EDIT.

package namespaceadornment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the namespaceadornment type in the database.
	Label = "namespace_adornment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeNamespaceFk holds the string denoting the namespace_fk edge name in mutations.
	EdgeNamespaceFk = "namespace_fk"
	// Table holds the table name of the namespaceadornment in the database.
	Table = "namespace_adornments"
	// NamespaceFkTable is the table that holds the namespace_fk relation/edge.
	NamespaceFkTable = "namespace_adornments"
	// NamespaceFkInverseTable is the table name for the Namespace entity.
	// It exists in this package in order to avoid circular dependency with the "namespace" package.
	NamespaceFkInverseTable = "namespaces"
	// NamespaceFkColumn is the table column denoting the namespace_fk relation/edge.
	NamespaceFkColumn = "namespace_adornments"
)

// Columns holds all SQL columns for namespaceadornment fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldKey,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "namespace_adornments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"namespace_adornments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the NamespaceAdornment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByNamespaceFkField orders the results by namespace_fk field.
func ByNamespaceFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNamespaceFkStep(), sql.OrderByField(field, opts...))
	}
}
func newNamespaceFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NamespaceFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NamespaceFkTable, NamespaceFkColumn),
	)
}
