// Code generated by ent, DO NOT EDIT.

package applicationdependency

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the applicationdependency type in the database.
	Label = "application_dependency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeDeploymentPackageFk holds the string denoting the deployment_package_fk edge name in mutations.
	EdgeDeploymentPackageFk = "deployment_package_fk"
	// EdgeSourceFk holds the string denoting the source_fk edge name in mutations.
	EdgeSourceFk = "source_fk"
	// EdgeTargetFk holds the string denoting the target_fk edge name in mutations.
	EdgeTargetFk = "target_fk"
	// Table holds the table name of the applicationdependency in the database.
	Table = "application_dependencies"
	// DeploymentPackageFkTable is the table that holds the deployment_package_fk relation/edge.
	DeploymentPackageFkTable = "application_dependencies"
	// DeploymentPackageFkInverseTable is the table name for the DeploymentPackage entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentpackage" package.
	DeploymentPackageFkInverseTable = "deployment_packages"
	// DeploymentPackageFkColumn is the table column denoting the deployment_package_fk relation/edge.
	DeploymentPackageFkColumn = "deployment_package_application_dependencies"
	// SourceFkTable is the table that holds the source_fk relation/edge.
	SourceFkTable = "application_dependencies"
	// SourceFkInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	SourceFkInverseTable = "applications"
	// SourceFkColumn is the table column denoting the source_fk relation/edge.
	SourceFkColumn = "application_dependency_source_fk"
	// TargetFkTable is the table that holds the target_fk relation/edge.
	TargetFkTable = "application_dependencies"
	// TargetFkInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	TargetFkInverseTable = "applications"
	// TargetFkColumn is the table column denoting the target_fk relation/edge.
	TargetFkColumn = "application_dependency_target_fk"
)

// Columns holds all SQL columns for applicationdependency fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "application_dependencies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"application_dependency_source_fk",
	"application_dependency_target_fk",
	"deployment_package_application_dependencies",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ApplicationDependency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeploymentPackageFkField orders the results by deployment_package_fk field.
func ByDeploymentPackageFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentPackageFkStep(), sql.OrderByField(field, opts...))
	}
}

// BySourceFkField orders the results by source_fk field.
func BySourceFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceFkStep(), sql.OrderByField(field, opts...))
	}
}

// ByTargetFkField orders the results by target_fk field.
func ByTargetFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetFkStep(), sql.OrderByField(field, opts...))
	}
}
func newDeploymentPackageFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentPackageFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeploymentPackageFkTable, DeploymentPackageFkColumn),
	)
}
func newSourceFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SourceFkTable, SourceFkColumn),
	)
}
func newTargetFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TargetFkTable, TargetFkColumn),
	)
}
