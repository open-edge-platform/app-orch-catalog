// Code generated by ent, DO NOT EDIT.

package applicationdependency

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.FieldLTE(FieldID, id))
}

// HasDeploymentPackageFk applies the HasEdge predicate on the "deployment_package_fk" edge.
func HasDeploymentPackageFk() predicate.ApplicationDependency {
	return predicate.ApplicationDependency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeploymentPackageFkTable, DeploymentPackageFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentPackageFkWith applies the HasEdge predicate on the "deployment_package_fk" edge with a given conditions (other predicates).
func HasDeploymentPackageFkWith(preds ...predicate.DeploymentPackage) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(func(s *sql.Selector) {
		step := newDeploymentPackageFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSourceFk applies the HasEdge predicate on the "source_fk" edge.
func HasSourceFk() predicate.ApplicationDependency {
	return predicate.ApplicationDependency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SourceFkTable, SourceFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceFkWith applies the HasEdge predicate on the "source_fk" edge with a given conditions (other predicates).
func HasSourceFkWith(preds ...predicate.Application) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(func(s *sql.Selector) {
		step := newSourceFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetFk applies the HasEdge predicate on the "target_fk" edge.
func HasTargetFk() predicate.ApplicationDependency {
	return predicate.ApplicationDependency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetFkTable, TargetFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetFkWith applies the HasEdge predicate on the "target_fk" edge with a given conditions (other predicates).
func HasTargetFkWith(preds ...predicate.Application) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(func(s *sql.Selector) {
		step := newTargetFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApplicationDependency) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApplicationDependency) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApplicationDependency) predicate.ApplicationDependency {
	return predicate.ApplicationDependency(sql.NotPredicates(p))
}
