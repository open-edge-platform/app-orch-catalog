// Code generated by ent, DO NOT EDIT.

package registry

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameLc applies equality check predicate on the "display_name_lc" field. It's identical to DisplayNameLcEQ.
func DisplayNameLc(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldDisplayNameLc, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldDescription, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldUpdateTime, v))
}

// ProjectUUID applies equality check predicate on the "project_uuid" field. It's identical to ProjectUUIDEQ.
func ProjectUUID(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldProjectUUID, v))
}

// AuthToken applies equality check predicate on the "auth_token" field. It's identical to AuthTokenEQ.
func AuthToken(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldAuthToken, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldType, v))
}

// APIType applies equality check predicate on the "api_type" field. It's identical to APITypeEQ.
func APIType(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldAPIType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.Registry {
	return predicate.Registry(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.Registry {
	return predicate.Registry(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContainsFold(FieldDisplayName, v))
}

// DisplayNameLcEQ applies the EQ predicate on the "display_name_lc" field.
func DisplayNameLcEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldDisplayNameLc, v))
}

// DisplayNameLcNEQ applies the NEQ predicate on the "display_name_lc" field.
func DisplayNameLcNEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldDisplayNameLc, v))
}

// DisplayNameLcIn applies the In predicate on the "display_name_lc" field.
func DisplayNameLcIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldDisplayNameLc, vs...))
}

// DisplayNameLcNotIn applies the NotIn predicate on the "display_name_lc" field.
func DisplayNameLcNotIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldDisplayNameLc, vs...))
}

// DisplayNameLcGT applies the GT predicate on the "display_name_lc" field.
func DisplayNameLcGT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldDisplayNameLc, v))
}

// DisplayNameLcGTE applies the GTE predicate on the "display_name_lc" field.
func DisplayNameLcGTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldDisplayNameLc, v))
}

// DisplayNameLcLT applies the LT predicate on the "display_name_lc" field.
func DisplayNameLcLT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldDisplayNameLc, v))
}

// DisplayNameLcLTE applies the LTE predicate on the "display_name_lc" field.
func DisplayNameLcLTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldDisplayNameLc, v))
}

// DisplayNameLcContains applies the Contains predicate on the "display_name_lc" field.
func DisplayNameLcContains(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContains(FieldDisplayNameLc, v))
}

// DisplayNameLcHasPrefix applies the HasPrefix predicate on the "display_name_lc" field.
func DisplayNameLcHasPrefix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasPrefix(FieldDisplayNameLc, v))
}

// DisplayNameLcHasSuffix applies the HasSuffix predicate on the "display_name_lc" field.
func DisplayNameLcHasSuffix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasSuffix(FieldDisplayNameLc, v))
}

// DisplayNameLcIsNil applies the IsNil predicate on the "display_name_lc" field.
func DisplayNameLcIsNil() predicate.Registry {
	return predicate.Registry(sql.FieldIsNull(FieldDisplayNameLc))
}

// DisplayNameLcNotNil applies the NotNil predicate on the "display_name_lc" field.
func DisplayNameLcNotNil() predicate.Registry {
	return predicate.Registry(sql.FieldNotNull(FieldDisplayNameLc))
}

// DisplayNameLcEqualFold applies the EqualFold predicate on the "display_name_lc" field.
func DisplayNameLcEqualFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEqualFold(FieldDisplayNameLc, v))
}

// DisplayNameLcContainsFold applies the ContainsFold predicate on the "display_name_lc" field.
func DisplayNameLcContainsFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContainsFold(FieldDisplayNameLc, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Registry {
	return predicate.Registry(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Registry {
	return predicate.Registry(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContainsFold(FieldDescription, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldUpdateTime, v))
}

// ProjectUUIDEQ applies the EQ predicate on the "project_uuid" field.
func ProjectUUIDEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldProjectUUID, v))
}

// ProjectUUIDNEQ applies the NEQ predicate on the "project_uuid" field.
func ProjectUUIDNEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldProjectUUID, v))
}

// ProjectUUIDIn applies the In predicate on the "project_uuid" field.
func ProjectUUIDIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldProjectUUID, vs...))
}

// ProjectUUIDNotIn applies the NotIn predicate on the "project_uuid" field.
func ProjectUUIDNotIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldProjectUUID, vs...))
}

// ProjectUUIDGT applies the GT predicate on the "project_uuid" field.
func ProjectUUIDGT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldProjectUUID, v))
}

// ProjectUUIDGTE applies the GTE predicate on the "project_uuid" field.
func ProjectUUIDGTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldProjectUUID, v))
}

// ProjectUUIDLT applies the LT predicate on the "project_uuid" field.
func ProjectUUIDLT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldProjectUUID, v))
}

// ProjectUUIDLTE applies the LTE predicate on the "project_uuid" field.
func ProjectUUIDLTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldProjectUUID, v))
}

// ProjectUUIDContains applies the Contains predicate on the "project_uuid" field.
func ProjectUUIDContains(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContains(FieldProjectUUID, v))
}

// ProjectUUIDHasPrefix applies the HasPrefix predicate on the "project_uuid" field.
func ProjectUUIDHasPrefix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasPrefix(FieldProjectUUID, v))
}

// ProjectUUIDHasSuffix applies the HasSuffix predicate on the "project_uuid" field.
func ProjectUUIDHasSuffix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasSuffix(FieldProjectUUID, v))
}

// ProjectUUIDEqualFold applies the EqualFold predicate on the "project_uuid" field.
func ProjectUUIDEqualFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEqualFold(FieldProjectUUID, v))
}

// ProjectUUIDContainsFold applies the ContainsFold predicate on the "project_uuid" field.
func ProjectUUIDContainsFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContainsFold(FieldProjectUUID, v))
}

// AuthTokenEQ applies the EQ predicate on the "auth_token" field.
func AuthTokenEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldAuthToken, v))
}

// AuthTokenNEQ applies the NEQ predicate on the "auth_token" field.
func AuthTokenNEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldAuthToken, v))
}

// AuthTokenIn applies the In predicate on the "auth_token" field.
func AuthTokenIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldAuthToken, vs...))
}

// AuthTokenNotIn applies the NotIn predicate on the "auth_token" field.
func AuthTokenNotIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldAuthToken, vs...))
}

// AuthTokenGT applies the GT predicate on the "auth_token" field.
func AuthTokenGT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldAuthToken, v))
}

// AuthTokenGTE applies the GTE predicate on the "auth_token" field.
func AuthTokenGTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldAuthToken, v))
}

// AuthTokenLT applies the LT predicate on the "auth_token" field.
func AuthTokenLT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldAuthToken, v))
}

// AuthTokenLTE applies the LTE predicate on the "auth_token" field.
func AuthTokenLTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldAuthToken, v))
}

// AuthTokenContains applies the Contains predicate on the "auth_token" field.
func AuthTokenContains(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContains(FieldAuthToken, v))
}

// AuthTokenHasPrefix applies the HasPrefix predicate on the "auth_token" field.
func AuthTokenHasPrefix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasPrefix(FieldAuthToken, v))
}

// AuthTokenHasSuffix applies the HasSuffix predicate on the "auth_token" field.
func AuthTokenHasSuffix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasSuffix(FieldAuthToken, v))
}

// AuthTokenIsNil applies the IsNil predicate on the "auth_token" field.
func AuthTokenIsNil() predicate.Registry {
	return predicate.Registry(sql.FieldIsNull(FieldAuthToken))
}

// AuthTokenNotNil applies the NotNil predicate on the "auth_token" field.
func AuthTokenNotNil() predicate.Registry {
	return predicate.Registry(sql.FieldNotNull(FieldAuthToken))
}

// AuthTokenEqualFold applies the EqualFold predicate on the "auth_token" field.
func AuthTokenEqualFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEqualFold(FieldAuthToken, v))
}

// AuthTokenContainsFold applies the ContainsFold predicate on the "auth_token" field.
func AuthTokenContainsFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContainsFold(FieldAuthToken, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContainsFold(FieldType, v))
}

// APITypeEQ applies the EQ predicate on the "api_type" field.
func APITypeEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEQ(FieldAPIType, v))
}

// APITypeNEQ applies the NEQ predicate on the "api_type" field.
func APITypeNEQ(v string) predicate.Registry {
	return predicate.Registry(sql.FieldNEQ(FieldAPIType, v))
}

// APITypeIn applies the In predicate on the "api_type" field.
func APITypeIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldIn(FieldAPIType, vs...))
}

// APITypeNotIn applies the NotIn predicate on the "api_type" field.
func APITypeNotIn(vs ...string) predicate.Registry {
	return predicate.Registry(sql.FieldNotIn(FieldAPIType, vs...))
}

// APITypeGT applies the GT predicate on the "api_type" field.
func APITypeGT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGT(FieldAPIType, v))
}

// APITypeGTE applies the GTE predicate on the "api_type" field.
func APITypeGTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldGTE(FieldAPIType, v))
}

// APITypeLT applies the LT predicate on the "api_type" field.
func APITypeLT(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLT(FieldAPIType, v))
}

// APITypeLTE applies the LTE predicate on the "api_type" field.
func APITypeLTE(v string) predicate.Registry {
	return predicate.Registry(sql.FieldLTE(FieldAPIType, v))
}

// APITypeContains applies the Contains predicate on the "api_type" field.
func APITypeContains(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContains(FieldAPIType, v))
}

// APITypeHasPrefix applies the HasPrefix predicate on the "api_type" field.
func APITypeHasPrefix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasPrefix(FieldAPIType, v))
}

// APITypeHasSuffix applies the HasSuffix predicate on the "api_type" field.
func APITypeHasSuffix(v string) predicate.Registry {
	return predicate.Registry(sql.FieldHasSuffix(FieldAPIType, v))
}

// APITypeIsNil applies the IsNil predicate on the "api_type" field.
func APITypeIsNil() predicate.Registry {
	return predicate.Registry(sql.FieldIsNull(FieldAPIType))
}

// APITypeNotNil applies the NotNil predicate on the "api_type" field.
func APITypeNotNil() predicate.Registry {
	return predicate.Registry(sql.FieldNotNull(FieldAPIType))
}

// APITypeEqualFold applies the EqualFold predicate on the "api_type" field.
func APITypeEqualFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldEqualFold(FieldAPIType, v))
}

// APITypeContainsFold applies the ContainsFold predicate on the "api_type" field.
func APITypeContainsFold(v string) predicate.Registry {
	return predicate.Registry(sql.FieldContainsFold(FieldAPIType, v))
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.Registry {
	return predicate.Registry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.Registry {
	return predicate.Registry(func(s *sql.Selector) {
		step := newApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApplicationImages applies the HasEdge predicate on the "application_images" edge.
func HasApplicationImages() predicate.Registry {
	return predicate.Registry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationImagesTable, ApplicationImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationImagesWith applies the HasEdge predicate on the "application_images" edge with a given conditions (other predicates).
func HasApplicationImagesWith(preds ...predicate.Application) predicate.Registry {
	return predicate.Registry(func(s *sql.Selector) {
		step := newApplicationImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Registry) predicate.Registry {
	return predicate.Registry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Registry) predicate.Registry {
	return predicate.Registry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Registry) predicate.Registry {
	return predicate.Registry(sql.NotPredicates(p))
}
