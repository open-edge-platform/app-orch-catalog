// Code generated by ent, DO NOT EDIT.

package registry

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the registry type in the database.
	Label = "registry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDisplayNameLc holds the string denoting the display_name_lc field in the database.
	FieldDisplayNameLc = "display_name_lc"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldProjectUUID holds the string denoting the project_uuid field in the database.
	FieldProjectUUID = "project_uuid"
	// FieldAuthToken holds the string denoting the auth_token field in the database.
	FieldAuthToken = "auth_token"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldAPIType holds the string denoting the api_type field in the database.
	FieldAPIType = "api_type"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// EdgeApplicationImages holds the string denoting the application_images edge name in mutations.
	EdgeApplicationImages = "application_images"
	// Table holds the table name of the registry in the database.
	Table = "registries"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "applications"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "applications"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "registry_applications"
	// ApplicationImagesTable is the table that holds the application_images relation/edge.
	ApplicationImagesTable = "applications"
	// ApplicationImagesInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationImagesInverseTable = "applications"
	// ApplicationImagesColumn is the table column denoting the application_images relation/edge.
	ApplicationImagesColumn = "registry_application_images"
)

// Columns holds all SQL columns for registry fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDisplayNameLc,
	FieldDescription,
	FieldCreateTime,
	FieldUpdateTime,
	FieldProjectUUID,
	FieldAuthToken,
	FieldType,
	FieldAPIType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultProjectUUID holds the default value on creation for the "project_uuid" field.
	DefaultProjectUUID string
)

// OrderOption defines the ordering options for the Registry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDisplayNameLc orders the results by the display_name_lc field.
func ByDisplayNameLc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayNameLc, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByProjectUUID orders the results by the project_uuid field.
func ByProjectUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectUUID, opts...).ToFunc()
}

// ByAuthToken orders the results by the auth_token field.
func ByAuthToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthToken, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByAPIType orders the results by the api_type field.
func ByAPIType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIType, opts...).ToFunc()
}

// ByApplicationsCount orders the results by applications count.
func ByApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationsStep(), opts...)
	}
}

// ByApplications orders the results by applications terms.
func ByApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApplicationImagesCount orders the results by application_images count.
func ByApplicationImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationImagesStep(), opts...)
	}
}

// ByApplicationImages orders the results by application_images terms.
func ByApplicationImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
	)
}
func newApplicationImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationImagesTable, ApplicationImagesColumn),
	)
}
