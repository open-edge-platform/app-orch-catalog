// Code generated by ent, DO NOT EDIT.

package deploymentrequirement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.FieldLTE(FieldID, id))
}

// HasProfileFk applies the HasEdge predicate on the "profile_fk" edge.
func HasProfileFk() predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileFkTable, ProfileFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileFkWith applies the HasEdge predicate on the "profile_fk" edge with a given conditions (other predicates).
func HasProfileFkWith(preds ...predicate.Profile) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(func(s *sql.Selector) {
		step := newProfileFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeploymentPackageFk applies the HasEdge predicate on the "deployment_package_fk" edge.
func HasDeploymentPackageFk() predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DeploymentPackageFkTable, DeploymentPackageFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentPackageFkWith applies the HasEdge predicate on the "deployment_package_fk" edge with a given conditions (other predicates).
func HasDeploymentPackageFkWith(preds ...predicate.DeploymentPackage) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(func(s *sql.Selector) {
		step := newDeploymentPackageFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeploymentProfileFk applies the HasEdge predicate on the "deployment_profile_fk" edge.
func HasDeploymentProfileFk() predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DeploymentProfileFkTable, DeploymentProfileFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentProfileFkWith applies the HasEdge predicate on the "deployment_profile_fk" edge with a given conditions (other predicates).
func HasDeploymentProfileFkWith(preds ...predicate.DeploymentProfile) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(func(s *sql.Selector) {
		step := newDeploymentProfileFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeploymentRequirement) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeploymentRequirement) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeploymentRequirement) predicate.DeploymentRequirement {
	return predicate.DeploymentRequirement(sql.NotPredicates(p))
}
