// Code generated by ent, DO NOT EDIT.

package artifact

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the artifact type in the database.
	Label = "artifact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDisplayNameLc holds the string denoting the display_name_lc field in the database.
	FieldDisplayNameLc = "display_name_lc"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldProjectUUID holds the string denoting the project_uuid field in the database.
	FieldProjectUUID = "project_uuid"
	// FieldMimeType holds the string denoting the mime_type field in the database.
	FieldMimeType = "mime_type"
	// FieldArtifact holds the string denoting the artifact field in the database.
	FieldArtifact = "artifact"
	// EdgeCaIconFk holds the string denoting the ca_icon_fk edge name in mutations.
	EdgeCaIconFk = "ca_icon_fk"
	// EdgeCaThumbnailFk holds the string denoting the ca_thumbnail_fk edge name in mutations.
	EdgeCaThumbnailFk = "ca_thumbnail_fk"
	// Table holds the table name of the artifact in the database.
	Table = "artifacts"
	// CaIconFkTable is the table that holds the ca_icon_fk relation/edge. The primary key declared below.
	CaIconFkTable = "deployment_package_icon"
	// CaIconFkInverseTable is the table name for the DeploymentPackage entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentpackage" package.
	CaIconFkInverseTable = "deployment_packages"
	// CaThumbnailFkTable is the table that holds the ca_thumbnail_fk relation/edge. The primary key declared below.
	CaThumbnailFkTable = "deployment_package_thumbnail"
	// CaThumbnailFkInverseTable is the table name for the DeploymentPackage entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentpackage" package.
	CaThumbnailFkInverseTable = "deployment_packages"
)

// Columns holds all SQL columns for artifact fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDisplayNameLc,
	FieldDescription,
	FieldCreateTime,
	FieldUpdateTime,
	FieldProjectUUID,
	FieldMimeType,
	FieldArtifact,
}

var (
	// CaIconFkPrimaryKey and CaIconFkColumn2 are the table columns denoting the
	// primary key for the ca_icon_fk relation (M2M).
	CaIconFkPrimaryKey = []string{"deployment_package_id", "artifact_id"}
	// CaThumbnailFkPrimaryKey and CaThumbnailFkColumn2 are the table columns denoting the
	// primary key for the ca_thumbnail_fk relation (M2M).
	CaThumbnailFkPrimaryKey = []string{"deployment_package_id", "artifact_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultProjectUUID holds the default value on creation for the "project_uuid" field.
	DefaultProjectUUID string
)

// OrderOption defines the ordering options for the Artifact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDisplayNameLc orders the results by the display_name_lc field.
func ByDisplayNameLc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayNameLc, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByProjectUUID orders the results by the project_uuid field.
func ByProjectUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectUUID, opts...).ToFunc()
}

// ByMimeType orders the results by the mime_type field.
func ByMimeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMimeType, opts...).ToFunc()
}

// ByCaIconFkCount orders the results by ca_icon_fk count.
func ByCaIconFkCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCaIconFkStep(), opts...)
	}
}

// ByCaIconFk orders the results by ca_icon_fk terms.
func ByCaIconFk(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCaIconFkStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCaThumbnailFkCount orders the results by ca_thumbnail_fk count.
func ByCaThumbnailFkCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCaThumbnailFkStep(), opts...)
	}
}

// ByCaThumbnailFk orders the results by ca_thumbnail_fk terms.
func ByCaThumbnailFk(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCaThumbnailFkStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCaIconFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CaIconFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CaIconFkTable, CaIconFkPrimaryKey...),
	)
}
func newCaThumbnailFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CaThumbnailFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CaThumbnailFkTable, CaThumbnailFkPrimaryKey...),
	)
}
