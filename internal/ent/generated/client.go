// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationnamespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifact"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifactreference"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/commonmixin"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentrequirement"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/endpoint"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/extension"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/ignoredresource"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespaceadornment"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/parametertemplate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/registry"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Application is the client for interacting with the Application builders.
	Application *ApplicationClient
	// ApplicationDependency is the client for interacting with the ApplicationDependency builders.
	ApplicationDependency *ApplicationDependencyClient
	// ApplicationNamespace is the client for interacting with the ApplicationNamespace builders.
	ApplicationNamespace *ApplicationNamespaceClient
	// Artifact is the client for interacting with the Artifact builders.
	Artifact *ArtifactClient
	// ArtifactReference is the client for interacting with the ArtifactReference builders.
	ArtifactReference *ArtifactReferenceClient
	// CommonMixin is the client for interacting with the CommonMixin builders.
	CommonMixin *CommonMixinClient
	// DeploymentPackage is the client for interacting with the DeploymentPackage builders.
	DeploymentPackage *DeploymentPackageClient
	// DeploymentProfile is the client for interacting with the DeploymentProfile builders.
	DeploymentProfile *DeploymentProfileClient
	// DeploymentRequirement is the client for interacting with the DeploymentRequirement builders.
	DeploymentRequirement *DeploymentRequirementClient
	// Endpoint is the client for interacting with the Endpoint builders.
	Endpoint *EndpointClient
	// Extension is the client for interacting with the Extension builders.
	Extension *ExtensionClient
	// IgnoredResource is the client for interacting with the IgnoredResource builders.
	IgnoredResource *IgnoredResourceClient
	// Namespace is the client for interacting with the Namespace builders.
	Namespace *NamespaceClient
	// NamespaceAdornment is the client for interacting with the NamespaceAdornment builders.
	NamespaceAdornment *NamespaceAdornmentClient
	// ParameterTemplate is the client for interacting with the ParameterTemplate builders.
	ParameterTemplate *ParameterTemplateClient
	// Profile is the client for interacting with the Profile builders.
	Profile *ProfileClient
	// Registry is the client for interacting with the Registry builders.
	Registry *RegistryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Application = NewApplicationClient(c.config)
	c.ApplicationDependency = NewApplicationDependencyClient(c.config)
	c.ApplicationNamespace = NewApplicationNamespaceClient(c.config)
	c.Artifact = NewArtifactClient(c.config)
	c.ArtifactReference = NewArtifactReferenceClient(c.config)
	c.CommonMixin = NewCommonMixinClient(c.config)
	c.DeploymentPackage = NewDeploymentPackageClient(c.config)
	c.DeploymentProfile = NewDeploymentProfileClient(c.config)
	c.DeploymentRequirement = NewDeploymentRequirementClient(c.config)
	c.Endpoint = NewEndpointClient(c.config)
	c.Extension = NewExtensionClient(c.config)
	c.IgnoredResource = NewIgnoredResourceClient(c.config)
	c.Namespace = NewNamespaceClient(c.config)
	c.NamespaceAdornment = NewNamespaceAdornmentClient(c.config)
	c.ParameterTemplate = NewParameterTemplateClient(c.config)
	c.Profile = NewProfileClient(c.config)
	c.Registry = NewRegistryClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("generated: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Application:           NewApplicationClient(cfg),
		ApplicationDependency: NewApplicationDependencyClient(cfg),
		ApplicationNamespace:  NewApplicationNamespaceClient(cfg),
		Artifact:              NewArtifactClient(cfg),
		ArtifactReference:     NewArtifactReferenceClient(cfg),
		CommonMixin:           NewCommonMixinClient(cfg),
		DeploymentPackage:     NewDeploymentPackageClient(cfg),
		DeploymentProfile:     NewDeploymentProfileClient(cfg),
		DeploymentRequirement: NewDeploymentRequirementClient(cfg),
		Endpoint:              NewEndpointClient(cfg),
		Extension:             NewExtensionClient(cfg),
		IgnoredResource:       NewIgnoredResourceClient(cfg),
		Namespace:             NewNamespaceClient(cfg),
		NamespaceAdornment:    NewNamespaceAdornmentClient(cfg),
		ParameterTemplate:     NewParameterTemplateClient(cfg),
		Profile:               NewProfileClient(cfg),
		Registry:              NewRegistryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Application:           NewApplicationClient(cfg),
		ApplicationDependency: NewApplicationDependencyClient(cfg),
		ApplicationNamespace:  NewApplicationNamespaceClient(cfg),
		Artifact:              NewArtifactClient(cfg),
		ArtifactReference:     NewArtifactReferenceClient(cfg),
		CommonMixin:           NewCommonMixinClient(cfg),
		DeploymentPackage:     NewDeploymentPackageClient(cfg),
		DeploymentProfile:     NewDeploymentProfileClient(cfg),
		DeploymentRequirement: NewDeploymentRequirementClient(cfg),
		Endpoint:              NewEndpointClient(cfg),
		Extension:             NewExtensionClient(cfg),
		IgnoredResource:       NewIgnoredResourceClient(cfg),
		Namespace:             NewNamespaceClient(cfg),
		NamespaceAdornment:    NewNamespaceAdornmentClient(cfg),
		ParameterTemplate:     NewParameterTemplateClient(cfg),
		Profile:               NewProfileClient(cfg),
		Registry:              NewRegistryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Application.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Application, c.ApplicationDependency, c.ApplicationNamespace, c.Artifact,
		c.ArtifactReference, c.CommonMixin, c.DeploymentPackage, c.DeploymentProfile,
		c.DeploymentRequirement, c.Endpoint, c.Extension, c.IgnoredResource,
		c.Namespace, c.NamespaceAdornment, c.ParameterTemplate, c.Profile, c.Registry,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Application, c.ApplicationDependency, c.ApplicationNamespace, c.Artifact,
		c.ArtifactReference, c.CommonMixin, c.DeploymentPackage, c.DeploymentProfile,
		c.DeploymentRequirement, c.Endpoint, c.Extension, c.IgnoredResource,
		c.Namespace, c.NamespaceAdornment, c.ParameterTemplate, c.Profile, c.Registry,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApplicationMutation:
		return c.Application.mutate(ctx, m)
	case *ApplicationDependencyMutation:
		return c.ApplicationDependency.mutate(ctx, m)
	case *ApplicationNamespaceMutation:
		return c.ApplicationNamespace.mutate(ctx, m)
	case *ArtifactMutation:
		return c.Artifact.mutate(ctx, m)
	case *ArtifactReferenceMutation:
		return c.ArtifactReference.mutate(ctx, m)
	case *CommonMixinMutation:
		return c.CommonMixin.mutate(ctx, m)
	case *DeploymentPackageMutation:
		return c.DeploymentPackage.mutate(ctx, m)
	case *DeploymentProfileMutation:
		return c.DeploymentProfile.mutate(ctx, m)
	case *DeploymentRequirementMutation:
		return c.DeploymentRequirement.mutate(ctx, m)
	case *EndpointMutation:
		return c.Endpoint.mutate(ctx, m)
	case *ExtensionMutation:
		return c.Extension.mutate(ctx, m)
	case *IgnoredResourceMutation:
		return c.IgnoredResource.mutate(ctx, m)
	case *NamespaceMutation:
		return c.Namespace.mutate(ctx, m)
	case *NamespaceAdornmentMutation:
		return c.NamespaceAdornment.mutate(ctx, m)
	case *ParameterTemplateMutation:
		return c.ParameterTemplate.mutate(ctx, m)
	case *ProfileMutation:
		return c.Profile.mutate(ctx, m)
	case *RegistryMutation:
		return c.Registry.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("generated: unknown mutation type %T", m)
	}
}

// ApplicationClient is a client for the Application schema.
type ApplicationClient struct {
	config
}

// NewApplicationClient returns a client for the Application from the given config.
func NewApplicationClient(c config) *ApplicationClient {
	return &ApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `application.Hooks(f(g(h())))`.
func (c *ApplicationClient) Use(hooks ...Hook) {
	c.hooks.Application = append(c.hooks.Application, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `application.Intercept(f(g(h())))`.
func (c *ApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Application = append(c.inters.Application, interceptors...)
}

// Create returns a builder for creating a Application entity.
func (c *ApplicationClient) Create() *ApplicationCreate {
	mutation := newApplicationMutation(c.config, OpCreate)
	return &ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Application entities.
func (c *ApplicationClient) CreateBulk(builders ...*ApplicationCreate) *ApplicationCreateBulk {
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Application.
func (c *ApplicationClient) Update() *ApplicationUpdate {
	mutation := newApplicationMutation(c.config, OpUpdate)
	return &ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationClient) UpdateOne(a *Application) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplication(a))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationClient) UpdateOneID(id uint64) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplicationID(id))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Application.
func (c *ApplicationClient) Delete() *ApplicationDelete {
	mutation := newApplicationMutation(c.config, OpDelete)
	return &ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationClient) DeleteOne(a *Application) *ApplicationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationClient) DeleteOneID(id uint64) *ApplicationDeleteOne {
	builder := c.Delete().Where(application.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationDeleteOne{builder}
}

// Query returns a query builder for Application.
func (c *ApplicationClient) Query() *ApplicationQuery {
	return &ApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a Application entity by its id.
func (c *ApplicationClient) Get(ctx context.Context, id uint64) (*Application, error) {
	return c.Query().Where(application.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationClient) GetX(ctx context.Context, id uint64) *Application {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfiles queries the profiles edge of a Application.
func (c *ApplicationClient) QueryProfiles(a *Application) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, application.ProfilesTable, application.ProfilesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRegistryFk queries the registry_fk edge of a Application.
func (c *ApplicationClient) QueryRegistryFk(a *Application) *RegistryQuery {
	query := (&RegistryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(registry.Table, registry.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.RegistryFkTable, application.RegistryFkColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImageRegistryFk queries the image_registry_fk edge of a Application.
func (c *ApplicationClient) QueryImageRegistryFk(a *Application) *RegistryQuery {
	query := (&RegistryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(registry.Table, registry.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.ImageRegistryFkTable, application.ImageRegistryFkColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeploymentPackageFk queries the deployment_package_fk edge of a Application.
func (c *ApplicationClient) QueryDeploymentPackageFk(a *Application) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, application.DeploymentPackageFkTable, application.DeploymentPackageFkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDependencySourceFk queries the dependency_source_fk edge of a Application.
func (c *ApplicationClient) QueryDependencySourceFk(a *Application) *ApplicationDependencyQuery {
	query := (&ApplicationDependencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(applicationdependency.Table, applicationdependency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, application.DependencySourceFkTable, application.DependencySourceFkColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDependencyTargetFk queries the dependency_target_fk edge of a Application.
func (c *ApplicationClient) QueryDependencyTargetFk(a *Application) *ApplicationDependencyQuery {
	query := (&ApplicationDependencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(applicationdependency.Table, applicationdependency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, application.DependencyTargetFkTable, application.DependencyTargetFkColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultProfile queries the default_profile edge of a Application.
func (c *ApplicationClient) QueryDefaultProfile(a *Application) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, application.DefaultProfileTable, application.DefaultProfileColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIgnoredResources queries the ignored_resources edge of a Application.
func (c *ApplicationClient) QueryIgnoredResources(a *Application) *IgnoredResourceQuery {
	query := (&IgnoredResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(ignoredresource.Table, ignoredresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, application.IgnoredResourcesTable, application.IgnoredResourcesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationClient) Hooks() []Hook {
	return c.hooks.Application
}

// Interceptors returns the client interceptors.
func (c *ApplicationClient) Interceptors() []Interceptor {
	return c.inters.Application
}

func (c *ApplicationClient) mutate(ctx context.Context, m *ApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Application mutation op: %q", m.Op())
	}
}

// ApplicationDependencyClient is a client for the ApplicationDependency schema.
type ApplicationDependencyClient struct {
	config
}

// NewApplicationDependencyClient returns a client for the ApplicationDependency from the given config.
func NewApplicationDependencyClient(c config) *ApplicationDependencyClient {
	return &ApplicationDependencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applicationdependency.Hooks(f(g(h())))`.
func (c *ApplicationDependencyClient) Use(hooks ...Hook) {
	c.hooks.ApplicationDependency = append(c.hooks.ApplicationDependency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `applicationdependency.Intercept(f(g(h())))`.
func (c *ApplicationDependencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApplicationDependency = append(c.inters.ApplicationDependency, interceptors...)
}

// Create returns a builder for creating a ApplicationDependency entity.
func (c *ApplicationDependencyClient) Create() *ApplicationDependencyCreate {
	mutation := newApplicationDependencyMutation(c.config, OpCreate)
	return &ApplicationDependencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApplicationDependency entities.
func (c *ApplicationDependencyClient) CreateBulk(builders ...*ApplicationDependencyCreate) *ApplicationDependencyCreateBulk {
	return &ApplicationDependencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApplicationDependency.
func (c *ApplicationDependencyClient) Update() *ApplicationDependencyUpdate {
	mutation := newApplicationDependencyMutation(c.config, OpUpdate)
	return &ApplicationDependencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationDependencyClient) UpdateOne(ad *ApplicationDependency) *ApplicationDependencyUpdateOne {
	mutation := newApplicationDependencyMutation(c.config, OpUpdateOne, withApplicationDependency(ad))
	return &ApplicationDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationDependencyClient) UpdateOneID(id uint64) *ApplicationDependencyUpdateOne {
	mutation := newApplicationDependencyMutation(c.config, OpUpdateOne, withApplicationDependencyID(id))
	return &ApplicationDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApplicationDependency.
func (c *ApplicationDependencyClient) Delete() *ApplicationDependencyDelete {
	mutation := newApplicationDependencyMutation(c.config, OpDelete)
	return &ApplicationDependencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationDependencyClient) DeleteOne(ad *ApplicationDependency) *ApplicationDependencyDeleteOne {
	return c.DeleteOneID(ad.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationDependencyClient) DeleteOneID(id uint64) *ApplicationDependencyDeleteOne {
	builder := c.Delete().Where(applicationdependency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationDependencyDeleteOne{builder}
}

// Query returns a query builder for ApplicationDependency.
func (c *ApplicationDependencyClient) Query() *ApplicationDependencyQuery {
	return &ApplicationDependencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplicationDependency},
		inters: c.Interceptors(),
	}
}

// Get returns a ApplicationDependency entity by its id.
func (c *ApplicationDependencyClient) Get(ctx context.Context, id uint64) (*ApplicationDependency, error) {
	return c.Query().Where(applicationdependency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationDependencyClient) GetX(ctx context.Context, id uint64) *ApplicationDependency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeploymentPackageFk queries the deployment_package_fk edge of a ApplicationDependency.
func (c *ApplicationDependencyClient) QueryDeploymentPackageFk(ad *ApplicationDependency) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationdependency.Table, applicationdependency.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicationdependency.DeploymentPackageFkTable, applicationdependency.DeploymentPackageFkColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySourceFk queries the source_fk edge of a ApplicationDependency.
func (c *ApplicationDependencyClient) QuerySourceFk(ad *ApplicationDependency) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationdependency.Table, applicationdependency.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, applicationdependency.SourceFkTable, applicationdependency.SourceFkColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetFk queries the target_fk edge of a ApplicationDependency.
func (c *ApplicationDependencyClient) QueryTargetFk(ad *ApplicationDependency) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationdependency.Table, applicationdependency.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, applicationdependency.TargetFkTable, applicationdependency.TargetFkColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationDependencyClient) Hooks() []Hook {
	return c.hooks.ApplicationDependency
}

// Interceptors returns the client interceptors.
func (c *ApplicationDependencyClient) Interceptors() []Interceptor {
	return c.inters.ApplicationDependency
}

func (c *ApplicationDependencyClient) mutate(ctx context.Context, m *ApplicationDependencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationDependencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationDependencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationDependencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ApplicationDependency mutation op: %q", m.Op())
	}
}

// ApplicationNamespaceClient is a client for the ApplicationNamespace schema.
type ApplicationNamespaceClient struct {
	config
}

// NewApplicationNamespaceClient returns a client for the ApplicationNamespace from the given config.
func NewApplicationNamespaceClient(c config) *ApplicationNamespaceClient {
	return &ApplicationNamespaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applicationnamespace.Hooks(f(g(h())))`.
func (c *ApplicationNamespaceClient) Use(hooks ...Hook) {
	c.hooks.ApplicationNamespace = append(c.hooks.ApplicationNamespace, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `applicationnamespace.Intercept(f(g(h())))`.
func (c *ApplicationNamespaceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApplicationNamespace = append(c.inters.ApplicationNamespace, interceptors...)
}

// Create returns a builder for creating a ApplicationNamespace entity.
func (c *ApplicationNamespaceClient) Create() *ApplicationNamespaceCreate {
	mutation := newApplicationNamespaceMutation(c.config, OpCreate)
	return &ApplicationNamespaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApplicationNamespace entities.
func (c *ApplicationNamespaceClient) CreateBulk(builders ...*ApplicationNamespaceCreate) *ApplicationNamespaceCreateBulk {
	return &ApplicationNamespaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApplicationNamespace.
func (c *ApplicationNamespaceClient) Update() *ApplicationNamespaceUpdate {
	mutation := newApplicationNamespaceMutation(c.config, OpUpdate)
	return &ApplicationNamespaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationNamespaceClient) UpdateOne(an *ApplicationNamespace) *ApplicationNamespaceUpdateOne {
	mutation := newApplicationNamespaceMutation(c.config, OpUpdateOne, withApplicationNamespace(an))
	return &ApplicationNamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationNamespaceClient) UpdateOneID(id uint64) *ApplicationNamespaceUpdateOne {
	mutation := newApplicationNamespaceMutation(c.config, OpUpdateOne, withApplicationNamespaceID(id))
	return &ApplicationNamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApplicationNamespace.
func (c *ApplicationNamespaceClient) Delete() *ApplicationNamespaceDelete {
	mutation := newApplicationNamespaceMutation(c.config, OpDelete)
	return &ApplicationNamespaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationNamespaceClient) DeleteOne(an *ApplicationNamespace) *ApplicationNamespaceDeleteOne {
	return c.DeleteOneID(an.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationNamespaceClient) DeleteOneID(id uint64) *ApplicationNamespaceDeleteOne {
	builder := c.Delete().Where(applicationnamespace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationNamespaceDeleteOne{builder}
}

// Query returns a query builder for ApplicationNamespace.
func (c *ApplicationNamespaceClient) Query() *ApplicationNamespaceQuery {
	return &ApplicationNamespaceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplicationNamespace},
		inters: c.Interceptors(),
	}
}

// Get returns a ApplicationNamespace entity by its id.
func (c *ApplicationNamespaceClient) Get(ctx context.Context, id uint64) (*ApplicationNamespace, error) {
	return c.Query().Where(applicationnamespace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationNamespaceClient) GetX(ctx context.Context, id uint64) *ApplicationNamespace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeploymentPackageFk queries the deployment_package_fk edge of a ApplicationNamespace.
func (c *ApplicationNamespaceClient) QueryDeploymentPackageFk(an *ApplicationNamespace) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := an.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationnamespace.Table, applicationnamespace.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applicationnamespace.DeploymentPackageFkTable, applicationnamespace.DeploymentPackageFkColumn),
		)
		fromV = sqlgraph.Neighbors(an.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySourceFk queries the source_fk edge of a ApplicationNamespace.
func (c *ApplicationNamespaceClient) QuerySourceFk(an *ApplicationNamespace) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := an.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applicationnamespace.Table, applicationnamespace.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, applicationnamespace.SourceFkTable, applicationnamespace.SourceFkColumn),
		)
		fromV = sqlgraph.Neighbors(an.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationNamespaceClient) Hooks() []Hook {
	return c.hooks.ApplicationNamespace
}

// Interceptors returns the client interceptors.
func (c *ApplicationNamespaceClient) Interceptors() []Interceptor {
	return c.inters.ApplicationNamespace
}

func (c *ApplicationNamespaceClient) mutate(ctx context.Context, m *ApplicationNamespaceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationNamespaceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationNamespaceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationNamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationNamespaceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ApplicationNamespace mutation op: %q", m.Op())
	}
}

// ArtifactClient is a client for the Artifact schema.
type ArtifactClient struct {
	config
}

// NewArtifactClient returns a client for the Artifact from the given config.
func NewArtifactClient(c config) *ArtifactClient {
	return &ArtifactClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `artifact.Hooks(f(g(h())))`.
func (c *ArtifactClient) Use(hooks ...Hook) {
	c.hooks.Artifact = append(c.hooks.Artifact, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `artifact.Intercept(f(g(h())))`.
func (c *ArtifactClient) Intercept(interceptors ...Interceptor) {
	c.inters.Artifact = append(c.inters.Artifact, interceptors...)
}

// Create returns a builder for creating a Artifact entity.
func (c *ArtifactClient) Create() *ArtifactCreate {
	mutation := newArtifactMutation(c.config, OpCreate)
	return &ArtifactCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Artifact entities.
func (c *ArtifactClient) CreateBulk(builders ...*ArtifactCreate) *ArtifactCreateBulk {
	return &ArtifactCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Artifact.
func (c *ArtifactClient) Update() *ArtifactUpdate {
	mutation := newArtifactMutation(c.config, OpUpdate)
	return &ArtifactUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArtifactClient) UpdateOne(a *Artifact) *ArtifactUpdateOne {
	mutation := newArtifactMutation(c.config, OpUpdateOne, withArtifact(a))
	return &ArtifactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArtifactClient) UpdateOneID(id uint64) *ArtifactUpdateOne {
	mutation := newArtifactMutation(c.config, OpUpdateOne, withArtifactID(id))
	return &ArtifactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Artifact.
func (c *ArtifactClient) Delete() *ArtifactDelete {
	mutation := newArtifactMutation(c.config, OpDelete)
	return &ArtifactDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArtifactClient) DeleteOne(a *Artifact) *ArtifactDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArtifactClient) DeleteOneID(id uint64) *ArtifactDeleteOne {
	builder := c.Delete().Where(artifact.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArtifactDeleteOne{builder}
}

// Query returns a query builder for Artifact.
func (c *ArtifactClient) Query() *ArtifactQuery {
	return &ArtifactQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArtifact},
		inters: c.Interceptors(),
	}
}

// Get returns a Artifact entity by its id.
func (c *ArtifactClient) Get(ctx context.Context, id uint64) (*Artifact, error) {
	return c.Query().Where(artifact.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArtifactClient) GetX(ctx context.Context, id uint64) *Artifact {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCaIconFk queries the ca_icon_fk edge of a Artifact.
func (c *ArtifactClient) QueryCaIconFk(a *Artifact) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artifact.CaIconFkTable, artifact.CaIconFkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCaThumbnailFk queries the ca_thumbnail_fk edge of a Artifact.
func (c *ArtifactClient) QueryCaThumbnailFk(a *Artifact) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artifact.Table, artifact.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artifact.CaThumbnailFkTable, artifact.CaThumbnailFkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArtifactClient) Hooks() []Hook {
	return c.hooks.Artifact
}

// Interceptors returns the client interceptors.
func (c *ArtifactClient) Interceptors() []Interceptor {
	return c.inters.Artifact
}

func (c *ArtifactClient) mutate(ctx context.Context, m *ArtifactMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArtifactCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArtifactUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArtifactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArtifactDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Artifact mutation op: %q", m.Op())
	}
}

// ArtifactReferenceClient is a client for the ArtifactReference schema.
type ArtifactReferenceClient struct {
	config
}

// NewArtifactReferenceClient returns a client for the ArtifactReference from the given config.
func NewArtifactReferenceClient(c config) *ArtifactReferenceClient {
	return &ArtifactReferenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `artifactreference.Hooks(f(g(h())))`.
func (c *ArtifactReferenceClient) Use(hooks ...Hook) {
	c.hooks.ArtifactReference = append(c.hooks.ArtifactReference, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `artifactreference.Intercept(f(g(h())))`.
func (c *ArtifactReferenceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArtifactReference = append(c.inters.ArtifactReference, interceptors...)
}

// Create returns a builder for creating a ArtifactReference entity.
func (c *ArtifactReferenceClient) Create() *ArtifactReferenceCreate {
	mutation := newArtifactReferenceMutation(c.config, OpCreate)
	return &ArtifactReferenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArtifactReference entities.
func (c *ArtifactReferenceClient) CreateBulk(builders ...*ArtifactReferenceCreate) *ArtifactReferenceCreateBulk {
	return &ArtifactReferenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArtifactReference.
func (c *ArtifactReferenceClient) Update() *ArtifactReferenceUpdate {
	mutation := newArtifactReferenceMutation(c.config, OpUpdate)
	return &ArtifactReferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArtifactReferenceClient) UpdateOne(ar *ArtifactReference) *ArtifactReferenceUpdateOne {
	mutation := newArtifactReferenceMutation(c.config, OpUpdateOne, withArtifactReference(ar))
	return &ArtifactReferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArtifactReferenceClient) UpdateOneID(id uint64) *ArtifactReferenceUpdateOne {
	mutation := newArtifactReferenceMutation(c.config, OpUpdateOne, withArtifactReferenceID(id))
	return &ArtifactReferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArtifactReference.
func (c *ArtifactReferenceClient) Delete() *ArtifactReferenceDelete {
	mutation := newArtifactReferenceMutation(c.config, OpDelete)
	return &ArtifactReferenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArtifactReferenceClient) DeleteOne(ar *ArtifactReference) *ArtifactReferenceDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArtifactReferenceClient) DeleteOneID(id uint64) *ArtifactReferenceDeleteOne {
	builder := c.Delete().Where(artifactreference.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArtifactReferenceDeleteOne{builder}
}

// Query returns a query builder for ArtifactReference.
func (c *ArtifactReferenceClient) Query() *ArtifactReferenceQuery {
	return &ArtifactReferenceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArtifactReference},
		inters: c.Interceptors(),
	}
}

// Get returns a ArtifactReference entity by its id.
func (c *ArtifactReferenceClient) Get(ctx context.Context, id uint64) (*ArtifactReference, error) {
	return c.Query().Where(artifactreference.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArtifactReferenceClient) GetX(ctx context.Context, id uint64) *ArtifactReference {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArtifact queries the artifact edge of a ArtifactReference.
func (c *ArtifactReferenceClient) QueryArtifact(ar *ArtifactReference) *ArtifactQuery {
	query := (&ArtifactClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artifactreference.Table, artifactreference.FieldID, id),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, artifactreference.ArtifactTable, artifactreference.ArtifactColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeploymentPackageFk queries the deployment_package_fk edge of a ArtifactReference.
func (c *ArtifactReferenceClient) QueryDeploymentPackageFk(ar *ArtifactReference) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artifactreference.Table, artifactreference.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artifactreference.DeploymentPackageFkTable, artifactreference.DeploymentPackageFkColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArtifactReferenceClient) Hooks() []Hook {
	return c.hooks.ArtifactReference
}

// Interceptors returns the client interceptors.
func (c *ArtifactReferenceClient) Interceptors() []Interceptor {
	return c.inters.ArtifactReference
}

func (c *ArtifactReferenceClient) mutate(ctx context.Context, m *ArtifactReferenceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArtifactReferenceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArtifactReferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArtifactReferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArtifactReferenceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ArtifactReference mutation op: %q", m.Op())
	}
}

// CommonMixinClient is a client for the CommonMixin schema.
type CommonMixinClient struct {
	config
}

// NewCommonMixinClient returns a client for the CommonMixin from the given config.
func NewCommonMixinClient(c config) *CommonMixinClient {
	return &CommonMixinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commonmixin.Hooks(f(g(h())))`.
func (c *CommonMixinClient) Use(hooks ...Hook) {
	c.hooks.CommonMixin = append(c.hooks.CommonMixin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commonmixin.Intercept(f(g(h())))`.
func (c *CommonMixinClient) Intercept(interceptors ...Interceptor) {
	c.inters.CommonMixin = append(c.inters.CommonMixin, interceptors...)
}

// Create returns a builder for creating a CommonMixin entity.
func (c *CommonMixinClient) Create() *CommonMixinCreate {
	mutation := newCommonMixinMutation(c.config, OpCreate)
	return &CommonMixinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommonMixin entities.
func (c *CommonMixinClient) CreateBulk(builders ...*CommonMixinCreate) *CommonMixinCreateBulk {
	return &CommonMixinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommonMixin.
func (c *CommonMixinClient) Update() *CommonMixinUpdate {
	mutation := newCommonMixinMutation(c.config, OpUpdate)
	return &CommonMixinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommonMixinClient) UpdateOne(cm *CommonMixin) *CommonMixinUpdateOne {
	mutation := newCommonMixinMutation(c.config, OpUpdateOne, withCommonMixin(cm))
	return &CommonMixinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommonMixinClient) UpdateOneID(id uint64) *CommonMixinUpdateOne {
	mutation := newCommonMixinMutation(c.config, OpUpdateOne, withCommonMixinID(id))
	return &CommonMixinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommonMixin.
func (c *CommonMixinClient) Delete() *CommonMixinDelete {
	mutation := newCommonMixinMutation(c.config, OpDelete)
	return &CommonMixinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommonMixinClient) DeleteOne(cm *CommonMixin) *CommonMixinDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommonMixinClient) DeleteOneID(id uint64) *CommonMixinDeleteOne {
	builder := c.Delete().Where(commonmixin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommonMixinDeleteOne{builder}
}

// Query returns a query builder for CommonMixin.
func (c *CommonMixinClient) Query() *CommonMixinQuery {
	return &CommonMixinQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommonMixin},
		inters: c.Interceptors(),
	}
}

// Get returns a CommonMixin entity by its id.
func (c *CommonMixinClient) Get(ctx context.Context, id uint64) (*CommonMixin, error) {
	return c.Query().Where(commonmixin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommonMixinClient) GetX(ctx context.Context, id uint64) *CommonMixin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommonMixinClient) Hooks() []Hook {
	return c.hooks.CommonMixin
}

// Interceptors returns the client interceptors.
func (c *CommonMixinClient) Interceptors() []Interceptor {
	return c.inters.CommonMixin
}

func (c *CommonMixinClient) mutate(ctx context.Context, m *CommonMixinMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommonMixinCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommonMixinUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommonMixinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommonMixinDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown CommonMixin mutation op: %q", m.Op())
	}
}

// DeploymentPackageClient is a client for the DeploymentPackage schema.
type DeploymentPackageClient struct {
	config
}

// NewDeploymentPackageClient returns a client for the DeploymentPackage from the given config.
func NewDeploymentPackageClient(c config) *DeploymentPackageClient {
	return &DeploymentPackageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deploymentpackage.Hooks(f(g(h())))`.
func (c *DeploymentPackageClient) Use(hooks ...Hook) {
	c.hooks.DeploymentPackage = append(c.hooks.DeploymentPackage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deploymentpackage.Intercept(f(g(h())))`.
func (c *DeploymentPackageClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeploymentPackage = append(c.inters.DeploymentPackage, interceptors...)
}

// Create returns a builder for creating a DeploymentPackage entity.
func (c *DeploymentPackageClient) Create() *DeploymentPackageCreate {
	mutation := newDeploymentPackageMutation(c.config, OpCreate)
	return &DeploymentPackageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeploymentPackage entities.
func (c *DeploymentPackageClient) CreateBulk(builders ...*DeploymentPackageCreate) *DeploymentPackageCreateBulk {
	return &DeploymentPackageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeploymentPackage.
func (c *DeploymentPackageClient) Update() *DeploymentPackageUpdate {
	mutation := newDeploymentPackageMutation(c.config, OpUpdate)
	return &DeploymentPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeploymentPackageClient) UpdateOne(dp *DeploymentPackage) *DeploymentPackageUpdateOne {
	mutation := newDeploymentPackageMutation(c.config, OpUpdateOne, withDeploymentPackage(dp))
	return &DeploymentPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeploymentPackageClient) UpdateOneID(id uint64) *DeploymentPackageUpdateOne {
	mutation := newDeploymentPackageMutation(c.config, OpUpdateOne, withDeploymentPackageID(id))
	return &DeploymentPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeploymentPackage.
func (c *DeploymentPackageClient) Delete() *DeploymentPackageDelete {
	mutation := newDeploymentPackageMutation(c.config, OpDelete)
	return &DeploymentPackageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeploymentPackageClient) DeleteOne(dp *DeploymentPackage) *DeploymentPackageDeleteOne {
	return c.DeleteOneID(dp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeploymentPackageClient) DeleteOneID(id uint64) *DeploymentPackageDeleteOne {
	builder := c.Delete().Where(deploymentpackage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeploymentPackageDeleteOne{builder}
}

// Query returns a query builder for DeploymentPackage.
func (c *DeploymentPackageClient) Query() *DeploymentPackageQuery {
	return &DeploymentPackageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeploymentPackage},
		inters: c.Interceptors(),
	}
}

// Get returns a DeploymentPackage entity by its id.
func (c *DeploymentPackageClient) Get(ctx context.Context, id uint64) (*DeploymentPackage, error) {
	return c.Query().Where(deploymentpackage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeploymentPackageClient) GetX(ctx context.Context, id uint64) *DeploymentPackage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeploymentProfiles queries the deployment_profiles edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryDeploymentProfiles(dp *DeploymentPackage) *DeploymentProfileQuery {
	query := (&DeploymentProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(deploymentprofile.Table, deploymentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.DeploymentProfilesTable, deploymentpackage.DeploymentProfilesColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplications queries the applications edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryApplications(dp *DeploymentPackage) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deploymentpackage.ApplicationsTable, deploymentpackage.ApplicationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIcon queries the icon edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryIcon(dp *DeploymentPackage) *ArtifactQuery {
	query := (&ArtifactClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deploymentpackage.IconTable, deploymentpackage.IconPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThumbnail queries the thumbnail edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryThumbnail(dp *DeploymentPackage) *ArtifactQuery {
	query := (&ArtifactClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deploymentpackage.ThumbnailTable, deploymentpackage.ThumbnailPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultProfile queries the default_profile edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryDefaultProfile(dp *DeploymentPackage) *DeploymentProfileQuery {
	query := (&DeploymentProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(deploymentprofile.Table, deploymentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deploymentpackage.DefaultProfileTable, deploymentpackage.DefaultProfileColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplicationDependencies queries the application_dependencies edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryApplicationDependencies(dp *DeploymentPackage) *ApplicationDependencyQuery {
	query := (&ApplicationDependencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(applicationdependency.Table, applicationdependency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.ApplicationDependenciesTable, deploymentpackage.ApplicationDependenciesColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplicationNamespaces queries the application_namespaces edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryApplicationNamespaces(dp *DeploymentPackage) *ApplicationNamespaceQuery {
	query := (&ApplicationNamespaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(applicationnamespace.Table, applicationnamespace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.ApplicationNamespacesTable, deploymentpackage.ApplicationNamespacesColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNamespaces queries the namespaces edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryNamespaces(dp *DeploymentPackage) *NamespaceQuery {
	query := (&NamespaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(namespace.Table, namespace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.NamespacesTable, deploymentpackage.NamespacesColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExtensions queries the extensions edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryExtensions(dp *DeploymentPackage) *ExtensionQuery {
	query := (&ExtensionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(extension.Table, extension.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.ExtensionsTable, deploymentpackage.ExtensionsColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArtifacts queries the artifacts edge of a DeploymentPackage.
func (c *DeploymentPackageClient) QueryArtifacts(dp *DeploymentPackage) *ArtifactReferenceQuery {
	query := (&ArtifactReferenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, id),
			sqlgraph.To(artifactreference.Table, artifactreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.ArtifactsTable, deploymentpackage.ArtifactsColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeploymentPackageClient) Hooks() []Hook {
	return c.hooks.DeploymentPackage
}

// Interceptors returns the client interceptors.
func (c *DeploymentPackageClient) Interceptors() []Interceptor {
	return c.inters.DeploymentPackage
}

func (c *DeploymentPackageClient) mutate(ctx context.Context, m *DeploymentPackageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeploymentPackageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeploymentPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeploymentPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeploymentPackageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown DeploymentPackage mutation op: %q", m.Op())
	}
}

// DeploymentProfileClient is a client for the DeploymentProfile schema.
type DeploymentProfileClient struct {
	config
}

// NewDeploymentProfileClient returns a client for the DeploymentProfile from the given config.
func NewDeploymentProfileClient(c config) *DeploymentProfileClient {
	return &DeploymentProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deploymentprofile.Hooks(f(g(h())))`.
func (c *DeploymentProfileClient) Use(hooks ...Hook) {
	c.hooks.DeploymentProfile = append(c.hooks.DeploymentProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deploymentprofile.Intercept(f(g(h())))`.
func (c *DeploymentProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeploymentProfile = append(c.inters.DeploymentProfile, interceptors...)
}

// Create returns a builder for creating a DeploymentProfile entity.
func (c *DeploymentProfileClient) Create() *DeploymentProfileCreate {
	mutation := newDeploymentProfileMutation(c.config, OpCreate)
	return &DeploymentProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeploymentProfile entities.
func (c *DeploymentProfileClient) CreateBulk(builders ...*DeploymentProfileCreate) *DeploymentProfileCreateBulk {
	return &DeploymentProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeploymentProfile.
func (c *DeploymentProfileClient) Update() *DeploymentProfileUpdate {
	mutation := newDeploymentProfileMutation(c.config, OpUpdate)
	return &DeploymentProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeploymentProfileClient) UpdateOne(dp *DeploymentProfile) *DeploymentProfileUpdateOne {
	mutation := newDeploymentProfileMutation(c.config, OpUpdateOne, withDeploymentProfile(dp))
	return &DeploymentProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeploymentProfileClient) UpdateOneID(id uint64) *DeploymentProfileUpdateOne {
	mutation := newDeploymentProfileMutation(c.config, OpUpdateOne, withDeploymentProfileID(id))
	return &DeploymentProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeploymentProfile.
func (c *DeploymentProfileClient) Delete() *DeploymentProfileDelete {
	mutation := newDeploymentProfileMutation(c.config, OpDelete)
	return &DeploymentProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeploymentProfileClient) DeleteOne(dp *DeploymentProfile) *DeploymentProfileDeleteOne {
	return c.DeleteOneID(dp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeploymentProfileClient) DeleteOneID(id uint64) *DeploymentProfileDeleteOne {
	builder := c.Delete().Where(deploymentprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeploymentProfileDeleteOne{builder}
}

// Query returns a query builder for DeploymentProfile.
func (c *DeploymentProfileClient) Query() *DeploymentProfileQuery {
	return &DeploymentProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeploymentProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a DeploymentProfile entity by its id.
func (c *DeploymentProfileClient) Get(ctx context.Context, id uint64) (*DeploymentProfile, error) {
	return c.Query().Where(deploymentprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeploymentProfileClient) GetX(ctx context.Context, id uint64) *DeploymentProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfiles queries the profiles edge of a DeploymentProfile.
func (c *DeploymentProfileClient) QueryProfiles(dp *DeploymentProfile) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentprofile.Table, deploymentprofile.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deploymentprofile.ProfilesTable, deploymentprofile.ProfilesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeploymentPackageFk queries the deployment_package_fk edge of a DeploymentProfile.
func (c *DeploymentProfileClient) QueryDeploymentPackageFk(dp *DeploymentProfile) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentprofile.Table, deploymentprofile.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deploymentprofile.DeploymentPackageFkTable, deploymentprofile.DeploymentPackageFkColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeploymentProfileClient) Hooks() []Hook {
	return c.hooks.DeploymentProfile
}

// Interceptors returns the client interceptors.
func (c *DeploymentProfileClient) Interceptors() []Interceptor {
	return c.inters.DeploymentProfile
}

func (c *DeploymentProfileClient) mutate(ctx context.Context, m *DeploymentProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeploymentProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeploymentProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeploymentProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeploymentProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown DeploymentProfile mutation op: %q", m.Op())
	}
}

// DeploymentRequirementClient is a client for the DeploymentRequirement schema.
type DeploymentRequirementClient struct {
	config
}

// NewDeploymentRequirementClient returns a client for the DeploymentRequirement from the given config.
func NewDeploymentRequirementClient(c config) *DeploymentRequirementClient {
	return &DeploymentRequirementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deploymentrequirement.Hooks(f(g(h())))`.
func (c *DeploymentRequirementClient) Use(hooks ...Hook) {
	c.hooks.DeploymentRequirement = append(c.hooks.DeploymentRequirement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deploymentrequirement.Intercept(f(g(h())))`.
func (c *DeploymentRequirementClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeploymentRequirement = append(c.inters.DeploymentRequirement, interceptors...)
}

// Create returns a builder for creating a DeploymentRequirement entity.
func (c *DeploymentRequirementClient) Create() *DeploymentRequirementCreate {
	mutation := newDeploymentRequirementMutation(c.config, OpCreate)
	return &DeploymentRequirementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeploymentRequirement entities.
func (c *DeploymentRequirementClient) CreateBulk(builders ...*DeploymentRequirementCreate) *DeploymentRequirementCreateBulk {
	return &DeploymentRequirementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeploymentRequirement.
func (c *DeploymentRequirementClient) Update() *DeploymentRequirementUpdate {
	mutation := newDeploymentRequirementMutation(c.config, OpUpdate)
	return &DeploymentRequirementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeploymentRequirementClient) UpdateOne(dr *DeploymentRequirement) *DeploymentRequirementUpdateOne {
	mutation := newDeploymentRequirementMutation(c.config, OpUpdateOne, withDeploymentRequirement(dr))
	return &DeploymentRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeploymentRequirementClient) UpdateOneID(id uint64) *DeploymentRequirementUpdateOne {
	mutation := newDeploymentRequirementMutation(c.config, OpUpdateOne, withDeploymentRequirementID(id))
	return &DeploymentRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeploymentRequirement.
func (c *DeploymentRequirementClient) Delete() *DeploymentRequirementDelete {
	mutation := newDeploymentRequirementMutation(c.config, OpDelete)
	return &DeploymentRequirementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeploymentRequirementClient) DeleteOne(dr *DeploymentRequirement) *DeploymentRequirementDeleteOne {
	return c.DeleteOneID(dr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeploymentRequirementClient) DeleteOneID(id uint64) *DeploymentRequirementDeleteOne {
	builder := c.Delete().Where(deploymentrequirement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeploymentRequirementDeleteOne{builder}
}

// Query returns a query builder for DeploymentRequirement.
func (c *DeploymentRequirementClient) Query() *DeploymentRequirementQuery {
	return &DeploymentRequirementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeploymentRequirement},
		inters: c.Interceptors(),
	}
}

// Get returns a DeploymentRequirement entity by its id.
func (c *DeploymentRequirementClient) Get(ctx context.Context, id uint64) (*DeploymentRequirement, error) {
	return c.Query().Where(deploymentrequirement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeploymentRequirementClient) GetX(ctx context.Context, id uint64) *DeploymentRequirement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfileFk queries the profile_fk edge of a DeploymentRequirement.
func (c *DeploymentRequirementClient) QueryProfileFk(dr *DeploymentRequirement) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentrequirement.Table, deploymentrequirement.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deploymentrequirement.ProfileFkTable, deploymentrequirement.ProfileFkColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeploymentPackageFk queries the deployment_package_fk edge of a DeploymentRequirement.
func (c *DeploymentRequirementClient) QueryDeploymentPackageFk(dr *DeploymentRequirement) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentrequirement.Table, deploymentrequirement.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deploymentrequirement.DeploymentPackageFkTable, deploymentrequirement.DeploymentPackageFkColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeploymentProfileFk queries the deployment_profile_fk edge of a DeploymentRequirement.
func (c *DeploymentRequirementClient) QueryDeploymentProfileFk(dr *DeploymentRequirement) *DeploymentProfileQuery {
	query := (&DeploymentProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentrequirement.Table, deploymentrequirement.FieldID, id),
			sqlgraph.To(deploymentprofile.Table, deploymentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deploymentrequirement.DeploymentProfileFkTable, deploymentrequirement.DeploymentProfileFkColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeploymentRequirementClient) Hooks() []Hook {
	return c.hooks.DeploymentRequirement
}

// Interceptors returns the client interceptors.
func (c *DeploymentRequirementClient) Interceptors() []Interceptor {
	return c.inters.DeploymentRequirement
}

func (c *DeploymentRequirementClient) mutate(ctx context.Context, m *DeploymentRequirementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeploymentRequirementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeploymentRequirementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeploymentRequirementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeploymentRequirementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown DeploymentRequirement mutation op: %q", m.Op())
	}
}

// EndpointClient is a client for the Endpoint schema.
type EndpointClient struct {
	config
}

// NewEndpointClient returns a client for the Endpoint from the given config.
func NewEndpointClient(c config) *EndpointClient {
	return &EndpointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `endpoint.Hooks(f(g(h())))`.
func (c *EndpointClient) Use(hooks ...Hook) {
	c.hooks.Endpoint = append(c.hooks.Endpoint, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `endpoint.Intercept(f(g(h())))`.
func (c *EndpointClient) Intercept(interceptors ...Interceptor) {
	c.inters.Endpoint = append(c.inters.Endpoint, interceptors...)
}

// Create returns a builder for creating a Endpoint entity.
func (c *EndpointClient) Create() *EndpointCreate {
	mutation := newEndpointMutation(c.config, OpCreate)
	return &EndpointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Endpoint entities.
func (c *EndpointClient) CreateBulk(builders ...*EndpointCreate) *EndpointCreateBulk {
	return &EndpointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Endpoint.
func (c *EndpointClient) Update() *EndpointUpdate {
	mutation := newEndpointMutation(c.config, OpUpdate)
	return &EndpointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EndpointClient) UpdateOne(e *Endpoint) *EndpointUpdateOne {
	mutation := newEndpointMutation(c.config, OpUpdateOne, withEndpoint(e))
	return &EndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EndpointClient) UpdateOneID(id uint64) *EndpointUpdateOne {
	mutation := newEndpointMutation(c.config, OpUpdateOne, withEndpointID(id))
	return &EndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Endpoint.
func (c *EndpointClient) Delete() *EndpointDelete {
	mutation := newEndpointMutation(c.config, OpDelete)
	return &EndpointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EndpointClient) DeleteOne(e *Endpoint) *EndpointDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EndpointClient) DeleteOneID(id uint64) *EndpointDeleteOne {
	builder := c.Delete().Where(endpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EndpointDeleteOne{builder}
}

// Query returns a query builder for Endpoint.
func (c *EndpointClient) Query() *EndpointQuery {
	return &EndpointQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEndpoint},
		inters: c.Interceptors(),
	}
}

// Get returns a Endpoint entity by its id.
func (c *EndpointClient) Get(ctx context.Context, id uint64) (*Endpoint, error) {
	return c.Query().Where(endpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EndpointClient) GetX(ctx context.Context, id uint64) *Endpoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExtensionFk queries the extension_fk edge of a Endpoint.
func (c *EndpointClient) QueryExtensionFk(e *Endpoint) *ExtensionQuery {
	query := (&ExtensionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(endpoint.Table, endpoint.FieldID, id),
			sqlgraph.To(extension.Table, extension.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, endpoint.ExtensionFkTable, endpoint.ExtensionFkColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EndpointClient) Hooks() []Hook {
	return c.hooks.Endpoint
}

// Interceptors returns the client interceptors.
func (c *EndpointClient) Interceptors() []Interceptor {
	return c.inters.Endpoint
}

func (c *EndpointClient) mutate(ctx context.Context, m *EndpointMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EndpointCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EndpointUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EndpointDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Endpoint mutation op: %q", m.Op())
	}
}

// ExtensionClient is a client for the Extension schema.
type ExtensionClient struct {
	config
}

// NewExtensionClient returns a client for the Extension from the given config.
func NewExtensionClient(c config) *ExtensionClient {
	return &ExtensionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `extension.Hooks(f(g(h())))`.
func (c *ExtensionClient) Use(hooks ...Hook) {
	c.hooks.Extension = append(c.hooks.Extension, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `extension.Intercept(f(g(h())))`.
func (c *ExtensionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Extension = append(c.inters.Extension, interceptors...)
}

// Create returns a builder for creating a Extension entity.
func (c *ExtensionClient) Create() *ExtensionCreate {
	mutation := newExtensionMutation(c.config, OpCreate)
	return &ExtensionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Extension entities.
func (c *ExtensionClient) CreateBulk(builders ...*ExtensionCreate) *ExtensionCreateBulk {
	return &ExtensionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Extension.
func (c *ExtensionClient) Update() *ExtensionUpdate {
	mutation := newExtensionMutation(c.config, OpUpdate)
	return &ExtensionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExtensionClient) UpdateOne(e *Extension) *ExtensionUpdateOne {
	mutation := newExtensionMutation(c.config, OpUpdateOne, withExtension(e))
	return &ExtensionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExtensionClient) UpdateOneID(id uint64) *ExtensionUpdateOne {
	mutation := newExtensionMutation(c.config, OpUpdateOne, withExtensionID(id))
	return &ExtensionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Extension.
func (c *ExtensionClient) Delete() *ExtensionDelete {
	mutation := newExtensionMutation(c.config, OpDelete)
	return &ExtensionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExtensionClient) DeleteOne(e *Extension) *ExtensionDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExtensionClient) DeleteOneID(id uint64) *ExtensionDeleteOne {
	builder := c.Delete().Where(extension.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExtensionDeleteOne{builder}
}

// Query returns a query builder for Extension.
func (c *ExtensionClient) Query() *ExtensionQuery {
	return &ExtensionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExtension},
		inters: c.Interceptors(),
	}
}

// Get returns a Extension entity by its id.
func (c *ExtensionClient) Get(ctx context.Context, id uint64) (*Extension, error) {
	return c.Query().Where(extension.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExtensionClient) GetX(ctx context.Context, id uint64) *Extension {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEndpoints queries the endpoints edge of a Extension.
func (c *ExtensionClient) QueryEndpoints(e *Extension) *EndpointQuery {
	query := (&EndpointClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(extension.Table, extension.FieldID, id),
			sqlgraph.To(endpoint.Table, endpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, extension.EndpointsTable, extension.EndpointsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeploymentPackageFk queries the deployment_package_fk edge of a Extension.
func (c *ExtensionClient) QueryDeploymentPackageFk(e *Extension) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(extension.Table, extension.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, extension.DeploymentPackageFkTable, extension.DeploymentPackageFkColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExtensionClient) Hooks() []Hook {
	return c.hooks.Extension
}

// Interceptors returns the client interceptors.
func (c *ExtensionClient) Interceptors() []Interceptor {
	return c.inters.Extension
}

func (c *ExtensionClient) mutate(ctx context.Context, m *ExtensionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExtensionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExtensionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExtensionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExtensionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Extension mutation op: %q", m.Op())
	}
}

// IgnoredResourceClient is a client for the IgnoredResource schema.
type IgnoredResourceClient struct {
	config
}

// NewIgnoredResourceClient returns a client for the IgnoredResource from the given config.
func NewIgnoredResourceClient(c config) *IgnoredResourceClient {
	return &IgnoredResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ignoredresource.Hooks(f(g(h())))`.
func (c *IgnoredResourceClient) Use(hooks ...Hook) {
	c.hooks.IgnoredResource = append(c.hooks.IgnoredResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ignoredresource.Intercept(f(g(h())))`.
func (c *IgnoredResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.IgnoredResource = append(c.inters.IgnoredResource, interceptors...)
}

// Create returns a builder for creating a IgnoredResource entity.
func (c *IgnoredResourceClient) Create() *IgnoredResourceCreate {
	mutation := newIgnoredResourceMutation(c.config, OpCreate)
	return &IgnoredResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IgnoredResource entities.
func (c *IgnoredResourceClient) CreateBulk(builders ...*IgnoredResourceCreate) *IgnoredResourceCreateBulk {
	return &IgnoredResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IgnoredResource.
func (c *IgnoredResourceClient) Update() *IgnoredResourceUpdate {
	mutation := newIgnoredResourceMutation(c.config, OpUpdate)
	return &IgnoredResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IgnoredResourceClient) UpdateOne(ir *IgnoredResource) *IgnoredResourceUpdateOne {
	mutation := newIgnoredResourceMutation(c.config, OpUpdateOne, withIgnoredResource(ir))
	return &IgnoredResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IgnoredResourceClient) UpdateOneID(id uint64) *IgnoredResourceUpdateOne {
	mutation := newIgnoredResourceMutation(c.config, OpUpdateOne, withIgnoredResourceID(id))
	return &IgnoredResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IgnoredResource.
func (c *IgnoredResourceClient) Delete() *IgnoredResourceDelete {
	mutation := newIgnoredResourceMutation(c.config, OpDelete)
	return &IgnoredResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IgnoredResourceClient) DeleteOne(ir *IgnoredResource) *IgnoredResourceDeleteOne {
	return c.DeleteOneID(ir.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IgnoredResourceClient) DeleteOneID(id uint64) *IgnoredResourceDeleteOne {
	builder := c.Delete().Where(ignoredresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IgnoredResourceDeleteOne{builder}
}

// Query returns a query builder for IgnoredResource.
func (c *IgnoredResourceClient) Query() *IgnoredResourceQuery {
	return &IgnoredResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIgnoredResource},
		inters: c.Interceptors(),
	}
}

// Get returns a IgnoredResource entity by its id.
func (c *IgnoredResourceClient) Get(ctx context.Context, id uint64) (*IgnoredResource, error) {
	return c.Query().Where(ignoredresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IgnoredResourceClient) GetX(ctx context.Context, id uint64) *IgnoredResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicationFk queries the application_fk edge of a IgnoredResource.
func (c *IgnoredResourceClient) QueryApplicationFk(ir *IgnoredResource) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ignoredresource.Table, ignoredresource.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ignoredresource.ApplicationFkTable, ignoredresource.ApplicationFkColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IgnoredResourceClient) Hooks() []Hook {
	return c.hooks.IgnoredResource
}

// Interceptors returns the client interceptors.
func (c *IgnoredResourceClient) Interceptors() []Interceptor {
	return c.inters.IgnoredResource
}

func (c *IgnoredResourceClient) mutate(ctx context.Context, m *IgnoredResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IgnoredResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IgnoredResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IgnoredResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IgnoredResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown IgnoredResource mutation op: %q", m.Op())
	}
}

// NamespaceClient is a client for the Namespace schema.
type NamespaceClient struct {
	config
}

// NewNamespaceClient returns a client for the Namespace from the given config.
func NewNamespaceClient(c config) *NamespaceClient {
	return &NamespaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `namespace.Hooks(f(g(h())))`.
func (c *NamespaceClient) Use(hooks ...Hook) {
	c.hooks.Namespace = append(c.hooks.Namespace, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `namespace.Intercept(f(g(h())))`.
func (c *NamespaceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Namespace = append(c.inters.Namespace, interceptors...)
}

// Create returns a builder for creating a Namespace entity.
func (c *NamespaceClient) Create() *NamespaceCreate {
	mutation := newNamespaceMutation(c.config, OpCreate)
	return &NamespaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Namespace entities.
func (c *NamespaceClient) CreateBulk(builders ...*NamespaceCreate) *NamespaceCreateBulk {
	return &NamespaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Namespace.
func (c *NamespaceClient) Update() *NamespaceUpdate {
	mutation := newNamespaceMutation(c.config, OpUpdate)
	return &NamespaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NamespaceClient) UpdateOne(n *Namespace) *NamespaceUpdateOne {
	mutation := newNamespaceMutation(c.config, OpUpdateOne, withNamespace(n))
	return &NamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NamespaceClient) UpdateOneID(id uint64) *NamespaceUpdateOne {
	mutation := newNamespaceMutation(c.config, OpUpdateOne, withNamespaceID(id))
	return &NamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Namespace.
func (c *NamespaceClient) Delete() *NamespaceDelete {
	mutation := newNamespaceMutation(c.config, OpDelete)
	return &NamespaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NamespaceClient) DeleteOne(n *Namespace) *NamespaceDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NamespaceClient) DeleteOneID(id uint64) *NamespaceDeleteOne {
	builder := c.Delete().Where(namespace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NamespaceDeleteOne{builder}
}

// Query returns a query builder for Namespace.
func (c *NamespaceClient) Query() *NamespaceQuery {
	return &NamespaceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNamespace},
		inters: c.Interceptors(),
	}
}

// Get returns a Namespace entity by its id.
func (c *NamespaceClient) Get(ctx context.Context, id uint64) (*Namespace, error) {
	return c.Query().Where(namespace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NamespaceClient) GetX(ctx context.Context, id uint64) *Namespace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeploymentPackageFk queries the deployment_package_fk edge of a Namespace.
func (c *NamespaceClient) QueryDeploymentPackageFk(n *Namespace) *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(namespace.Table, namespace.FieldID, id),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, namespace.DeploymentPackageFkTable, namespace.DeploymentPackageFkColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdornments queries the adornments edge of a Namespace.
func (c *NamespaceClient) QueryAdornments(n *Namespace) *NamespaceAdornmentQuery {
	query := (&NamespaceAdornmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(namespace.Table, namespace.FieldID, id),
			sqlgraph.To(namespaceadornment.Table, namespaceadornment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, namespace.AdornmentsTable, namespace.AdornmentsColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NamespaceClient) Hooks() []Hook {
	return c.hooks.Namespace
}

// Interceptors returns the client interceptors.
func (c *NamespaceClient) Interceptors() []Interceptor {
	return c.inters.Namespace
}

func (c *NamespaceClient) mutate(ctx context.Context, m *NamespaceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NamespaceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NamespaceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NamespaceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Namespace mutation op: %q", m.Op())
	}
}

// NamespaceAdornmentClient is a client for the NamespaceAdornment schema.
type NamespaceAdornmentClient struct {
	config
}

// NewNamespaceAdornmentClient returns a client for the NamespaceAdornment from the given config.
func NewNamespaceAdornmentClient(c config) *NamespaceAdornmentClient {
	return &NamespaceAdornmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `namespaceadornment.Hooks(f(g(h())))`.
func (c *NamespaceAdornmentClient) Use(hooks ...Hook) {
	c.hooks.NamespaceAdornment = append(c.hooks.NamespaceAdornment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `namespaceadornment.Intercept(f(g(h())))`.
func (c *NamespaceAdornmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.NamespaceAdornment = append(c.inters.NamespaceAdornment, interceptors...)
}

// Create returns a builder for creating a NamespaceAdornment entity.
func (c *NamespaceAdornmentClient) Create() *NamespaceAdornmentCreate {
	mutation := newNamespaceAdornmentMutation(c.config, OpCreate)
	return &NamespaceAdornmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NamespaceAdornment entities.
func (c *NamespaceAdornmentClient) CreateBulk(builders ...*NamespaceAdornmentCreate) *NamespaceAdornmentCreateBulk {
	return &NamespaceAdornmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NamespaceAdornment.
func (c *NamespaceAdornmentClient) Update() *NamespaceAdornmentUpdate {
	mutation := newNamespaceAdornmentMutation(c.config, OpUpdate)
	return &NamespaceAdornmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NamespaceAdornmentClient) UpdateOne(na *NamespaceAdornment) *NamespaceAdornmentUpdateOne {
	mutation := newNamespaceAdornmentMutation(c.config, OpUpdateOne, withNamespaceAdornment(na))
	return &NamespaceAdornmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NamespaceAdornmentClient) UpdateOneID(id uint64) *NamespaceAdornmentUpdateOne {
	mutation := newNamespaceAdornmentMutation(c.config, OpUpdateOne, withNamespaceAdornmentID(id))
	return &NamespaceAdornmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NamespaceAdornment.
func (c *NamespaceAdornmentClient) Delete() *NamespaceAdornmentDelete {
	mutation := newNamespaceAdornmentMutation(c.config, OpDelete)
	return &NamespaceAdornmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NamespaceAdornmentClient) DeleteOne(na *NamespaceAdornment) *NamespaceAdornmentDeleteOne {
	return c.DeleteOneID(na.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NamespaceAdornmentClient) DeleteOneID(id uint64) *NamespaceAdornmentDeleteOne {
	builder := c.Delete().Where(namespaceadornment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NamespaceAdornmentDeleteOne{builder}
}

// Query returns a query builder for NamespaceAdornment.
func (c *NamespaceAdornmentClient) Query() *NamespaceAdornmentQuery {
	return &NamespaceAdornmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNamespaceAdornment},
		inters: c.Interceptors(),
	}
}

// Get returns a NamespaceAdornment entity by its id.
func (c *NamespaceAdornmentClient) Get(ctx context.Context, id uint64) (*NamespaceAdornment, error) {
	return c.Query().Where(namespaceadornment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NamespaceAdornmentClient) GetX(ctx context.Context, id uint64) *NamespaceAdornment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNamespaceFk queries the namespace_fk edge of a NamespaceAdornment.
func (c *NamespaceAdornmentClient) QueryNamespaceFk(na *NamespaceAdornment) *NamespaceQuery {
	query := (&NamespaceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := na.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(namespaceadornment.Table, namespaceadornment.FieldID, id),
			sqlgraph.To(namespace.Table, namespace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, namespaceadornment.NamespaceFkTable, namespaceadornment.NamespaceFkColumn),
		)
		fromV = sqlgraph.Neighbors(na.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NamespaceAdornmentClient) Hooks() []Hook {
	return c.hooks.NamespaceAdornment
}

// Interceptors returns the client interceptors.
func (c *NamespaceAdornmentClient) Interceptors() []Interceptor {
	return c.inters.NamespaceAdornment
}

func (c *NamespaceAdornmentClient) mutate(ctx context.Context, m *NamespaceAdornmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NamespaceAdornmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NamespaceAdornmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NamespaceAdornmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NamespaceAdornmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown NamespaceAdornment mutation op: %q", m.Op())
	}
}

// ParameterTemplateClient is a client for the ParameterTemplate schema.
type ParameterTemplateClient struct {
	config
}

// NewParameterTemplateClient returns a client for the ParameterTemplate from the given config.
func NewParameterTemplateClient(c config) *ParameterTemplateClient {
	return &ParameterTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `parametertemplate.Hooks(f(g(h())))`.
func (c *ParameterTemplateClient) Use(hooks ...Hook) {
	c.hooks.ParameterTemplate = append(c.hooks.ParameterTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `parametertemplate.Intercept(f(g(h())))`.
func (c *ParameterTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.ParameterTemplate = append(c.inters.ParameterTemplate, interceptors...)
}

// Create returns a builder for creating a ParameterTemplate entity.
func (c *ParameterTemplateClient) Create() *ParameterTemplateCreate {
	mutation := newParameterTemplateMutation(c.config, OpCreate)
	return &ParameterTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ParameterTemplate entities.
func (c *ParameterTemplateClient) CreateBulk(builders ...*ParameterTemplateCreate) *ParameterTemplateCreateBulk {
	return &ParameterTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ParameterTemplate.
func (c *ParameterTemplateClient) Update() *ParameterTemplateUpdate {
	mutation := newParameterTemplateMutation(c.config, OpUpdate)
	return &ParameterTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ParameterTemplateClient) UpdateOne(pt *ParameterTemplate) *ParameterTemplateUpdateOne {
	mutation := newParameterTemplateMutation(c.config, OpUpdateOne, withParameterTemplate(pt))
	return &ParameterTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ParameterTemplateClient) UpdateOneID(id uint64) *ParameterTemplateUpdateOne {
	mutation := newParameterTemplateMutation(c.config, OpUpdateOne, withParameterTemplateID(id))
	return &ParameterTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ParameterTemplate.
func (c *ParameterTemplateClient) Delete() *ParameterTemplateDelete {
	mutation := newParameterTemplateMutation(c.config, OpDelete)
	return &ParameterTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ParameterTemplateClient) DeleteOne(pt *ParameterTemplate) *ParameterTemplateDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ParameterTemplateClient) DeleteOneID(id uint64) *ParameterTemplateDeleteOne {
	builder := c.Delete().Where(parametertemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ParameterTemplateDeleteOne{builder}
}

// Query returns a query builder for ParameterTemplate.
func (c *ParameterTemplateClient) Query() *ParameterTemplateQuery {
	return &ParameterTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeParameterTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a ParameterTemplate entity by its id.
func (c *ParameterTemplateClient) Get(ctx context.Context, id uint64) (*ParameterTemplate, error) {
	return c.Query().Where(parametertemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ParameterTemplateClient) GetX(ctx context.Context, id uint64) *ParameterTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfileFk queries the profile_fk edge of a ParameterTemplate.
func (c *ParameterTemplateClient) QueryProfileFk(pt *ParameterTemplate) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parametertemplate.Table, parametertemplate.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, parametertemplate.ProfileFkTable, parametertemplate.ProfileFkColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfiles queries the profiles edge of a ParameterTemplate.
func (c *ParameterTemplateClient) QueryProfiles(pt *ParameterTemplate) *ProfileQuery {
	query := (&ProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parametertemplate.Table, parametertemplate.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, parametertemplate.ProfilesTable, parametertemplate.ProfilesColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ParameterTemplateClient) Hooks() []Hook {
	return c.hooks.ParameterTemplate
}

// Interceptors returns the client interceptors.
func (c *ParameterTemplateClient) Interceptors() []Interceptor {
	return c.inters.ParameterTemplate
}

func (c *ParameterTemplateClient) mutate(ctx context.Context, m *ParameterTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ParameterTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ParameterTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ParameterTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ParameterTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ParameterTemplate mutation op: %q", m.Op())
	}
}

// ProfileClient is a client for the Profile schema.
type ProfileClient struct {
	config
}

// NewProfileClient returns a client for the Profile from the given config.
func NewProfileClient(c config) *ProfileClient {
	return &ProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profile.Hooks(f(g(h())))`.
func (c *ProfileClient) Use(hooks ...Hook) {
	c.hooks.Profile = append(c.hooks.Profile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `profile.Intercept(f(g(h())))`.
func (c *ProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.Profile = append(c.inters.Profile, interceptors...)
}

// Create returns a builder for creating a Profile entity.
func (c *ProfileClient) Create() *ProfileCreate {
	mutation := newProfileMutation(c.config, OpCreate)
	return &ProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Profile entities.
func (c *ProfileClient) CreateBulk(builders ...*ProfileCreate) *ProfileCreateBulk {
	return &ProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Profile.
func (c *ProfileClient) Update() *ProfileUpdate {
	mutation := newProfileMutation(c.config, OpUpdate)
	return &ProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfileClient) UpdateOne(pr *Profile) *ProfileUpdateOne {
	mutation := newProfileMutation(c.config, OpUpdateOne, withProfile(pr))
	return &ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfileClient) UpdateOneID(id uint64) *ProfileUpdateOne {
	mutation := newProfileMutation(c.config, OpUpdateOne, withProfileID(id))
	return &ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Profile.
func (c *ProfileClient) Delete() *ProfileDelete {
	mutation := newProfileMutation(c.config, OpDelete)
	return &ProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProfileClient) DeleteOne(pr *Profile) *ProfileDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProfileClient) DeleteOneID(id uint64) *ProfileDeleteOne {
	builder := c.Delete().Where(profile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfileDeleteOne{builder}
}

// Query returns a query builder for Profile.
func (c *ProfileClient) Query() *ProfileQuery {
	return &ProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a Profile entity by its id.
func (c *ProfileClient) Get(ctx context.Context, id uint64) (*Profile, error) {
	return c.Query().Where(profile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfileClient) GetX(ctx context.Context, id uint64) *Profile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplicationFk queries the application_fk edge of a Profile.
func (c *ProfileClient) QueryApplicationFk(pr *Profile) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, profile.ApplicationFkTable, profile.ApplicationFkColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeploymentProfiles queries the deployment_profiles edge of a Profile.
func (c *ProfileClient) QueryDeploymentProfiles(pr *Profile) *DeploymentProfileQuery {
	query := (&DeploymentProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(deploymentprofile.Table, deploymentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, profile.DeploymentProfilesTable, profile.DeploymentProfilesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParameterTemplates queries the parameter_templates edge of a Profile.
func (c *ProfileClient) QueryParameterTemplates(pr *Profile) *ParameterTemplateQuery {
	query := (&ParameterTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(parametertemplate.Table, parametertemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profile.ParameterTemplatesTable, profile.ParameterTemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeploymentRequirements queries the deployment_requirements edge of a Profile.
func (c *ProfileClient) QueryDeploymentRequirements(pr *Profile) *DeploymentRequirementQuery {
	query := (&DeploymentRequirementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(deploymentrequirement.Table, deploymentrequirement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profile.DeploymentRequirementsTable, profile.DeploymentRequirementsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProfileClient) Hooks() []Hook {
	return c.hooks.Profile
}

// Interceptors returns the client interceptors.
func (c *ProfileClient) Interceptors() []Interceptor {
	return c.inters.Profile
}

func (c *ProfileClient) mutate(ctx context.Context, m *ProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Profile mutation op: %q", m.Op())
	}
}

// RegistryClient is a client for the Registry schema.
type RegistryClient struct {
	config
}

// NewRegistryClient returns a client for the Registry from the given config.
func NewRegistryClient(c config) *RegistryClient {
	return &RegistryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `registry.Hooks(f(g(h())))`.
func (c *RegistryClient) Use(hooks ...Hook) {
	c.hooks.Registry = append(c.hooks.Registry, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `registry.Intercept(f(g(h())))`.
func (c *RegistryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Registry = append(c.inters.Registry, interceptors...)
}

// Create returns a builder for creating a Registry entity.
func (c *RegistryClient) Create() *RegistryCreate {
	mutation := newRegistryMutation(c.config, OpCreate)
	return &RegistryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Registry entities.
func (c *RegistryClient) CreateBulk(builders ...*RegistryCreate) *RegistryCreateBulk {
	return &RegistryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Registry.
func (c *RegistryClient) Update() *RegistryUpdate {
	mutation := newRegistryMutation(c.config, OpUpdate)
	return &RegistryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegistryClient) UpdateOne(r *Registry) *RegistryUpdateOne {
	mutation := newRegistryMutation(c.config, OpUpdateOne, withRegistry(r))
	return &RegistryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegistryClient) UpdateOneID(id uint64) *RegistryUpdateOne {
	mutation := newRegistryMutation(c.config, OpUpdateOne, withRegistryID(id))
	return &RegistryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Registry.
func (c *RegistryClient) Delete() *RegistryDelete {
	mutation := newRegistryMutation(c.config, OpDelete)
	return &RegistryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RegistryClient) DeleteOne(r *Registry) *RegistryDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RegistryClient) DeleteOneID(id uint64) *RegistryDeleteOne {
	builder := c.Delete().Where(registry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegistryDeleteOne{builder}
}

// Query returns a query builder for Registry.
func (c *RegistryClient) Query() *RegistryQuery {
	return &RegistryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRegistry},
		inters: c.Interceptors(),
	}
}

// Get returns a Registry entity by its id.
func (c *RegistryClient) Get(ctx context.Context, id uint64) (*Registry, error) {
	return c.Query().Where(registry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegistryClient) GetX(ctx context.Context, id uint64) *Registry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplications queries the applications edge of a Registry.
func (c *RegistryClient) QueryApplications(r *Registry) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(registry.Table, registry.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, registry.ApplicationsTable, registry.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplicationImages queries the application_images edge of a Registry.
func (c *RegistryClient) QueryApplicationImages(r *Registry) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(registry.Table, registry.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, registry.ApplicationImagesTable, registry.ApplicationImagesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RegistryClient) Hooks() []Hook {
	return c.hooks.Registry
}

// Interceptors returns the client interceptors.
func (c *RegistryClient) Interceptors() []Interceptor {
	return c.inters.Registry
}

func (c *RegistryClient) mutate(ctx context.Context, m *RegistryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RegistryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RegistryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RegistryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RegistryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Registry mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Application, ApplicationDependency, ApplicationNamespace, Artifact,
		ArtifactReference, CommonMixin, DeploymentPackage, DeploymentProfile,
		DeploymentRequirement, Endpoint, Extension, IgnoredResource, Namespace,
		NamespaceAdornment, ParameterTemplate, Profile, Registry []ent.Hook
	}
	inters struct {
		Application, ApplicationDependency, ApplicationNamespace, Artifact,
		ArtifactReference, CommonMixin, DeploymentPackage, DeploymentProfile,
		DeploymentRequirement, Endpoint, Extension, IgnoredResource, Namespace,
		NamespaceAdornment, ParameterTemplate, Profile, Registry []ent.Interceptor
	}
)
