// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/endpoint"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/extension"
)

// ExtensionCreate is the builder for creating a Extension entity.
type ExtensionCreate struct {
	config
	mutation *ExtensionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *ExtensionCreate) SetName(s string) *ExtensionCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetVersion sets the "version" field.
func (ec *ExtensionCreate) SetVersion(s string) *ExtensionCreate {
	ec.mutation.SetVersion(s)
	return ec
}

// SetDisplayName sets the "display_name" field.
func (ec *ExtensionCreate) SetDisplayName(s string) *ExtensionCreate {
	ec.mutation.SetDisplayName(s)
	return ec
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ec *ExtensionCreate) SetNillableDisplayName(s *string) *ExtensionCreate {
	if s != nil {
		ec.SetDisplayName(*s)
	}
	return ec
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (ec *ExtensionCreate) SetDisplayNameLc(s string) *ExtensionCreate {
	ec.mutation.SetDisplayNameLc(s)
	return ec
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (ec *ExtensionCreate) SetNillableDisplayNameLc(s *string) *ExtensionCreate {
	if s != nil {
		ec.SetDisplayNameLc(*s)
	}
	return ec
}

// SetDescription sets the "description" field.
func (ec *ExtensionCreate) SetDescription(s string) *ExtensionCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *ExtensionCreate) SetNillableDescription(s *string) *ExtensionCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetUILabel sets the "ui_label" field.
func (ec *ExtensionCreate) SetUILabel(s string) *ExtensionCreate {
	ec.mutation.SetUILabel(s)
	return ec
}

// SetNillableUILabel sets the "ui_label" field if the given value is not nil.
func (ec *ExtensionCreate) SetNillableUILabel(s *string) *ExtensionCreate {
	if s != nil {
		ec.SetUILabel(*s)
	}
	return ec
}

// SetUIServiceName sets the "ui_service_name" field.
func (ec *ExtensionCreate) SetUIServiceName(s string) *ExtensionCreate {
	ec.mutation.SetUIServiceName(s)
	return ec
}

// SetNillableUIServiceName sets the "ui_service_name" field if the given value is not nil.
func (ec *ExtensionCreate) SetNillableUIServiceName(s *string) *ExtensionCreate {
	if s != nil {
		ec.SetUIServiceName(*s)
	}
	return ec
}

// SetUIDescription sets the "ui_description" field.
func (ec *ExtensionCreate) SetUIDescription(s string) *ExtensionCreate {
	ec.mutation.SetUIDescription(s)
	return ec
}

// SetNillableUIDescription sets the "ui_description" field if the given value is not nil.
func (ec *ExtensionCreate) SetNillableUIDescription(s *string) *ExtensionCreate {
	if s != nil {
		ec.SetUIDescription(*s)
	}
	return ec
}

// SetUIFileName sets the "ui_file_name" field.
func (ec *ExtensionCreate) SetUIFileName(s string) *ExtensionCreate {
	ec.mutation.SetUIFileName(s)
	return ec
}

// SetNillableUIFileName sets the "ui_file_name" field if the given value is not nil.
func (ec *ExtensionCreate) SetNillableUIFileName(s *string) *ExtensionCreate {
	if s != nil {
		ec.SetUIFileName(*s)
	}
	return ec
}

// SetUIAppName sets the "ui_app_name" field.
func (ec *ExtensionCreate) SetUIAppName(s string) *ExtensionCreate {
	ec.mutation.SetUIAppName(s)
	return ec
}

// SetNillableUIAppName sets the "ui_app_name" field if the given value is not nil.
func (ec *ExtensionCreate) SetNillableUIAppName(s *string) *ExtensionCreate {
	if s != nil {
		ec.SetUIAppName(*s)
	}
	return ec
}

// SetUIModuleName sets the "ui_module_name" field.
func (ec *ExtensionCreate) SetUIModuleName(s string) *ExtensionCreate {
	ec.mutation.SetUIModuleName(s)
	return ec
}

// SetNillableUIModuleName sets the "ui_module_name" field if the given value is not nil.
func (ec *ExtensionCreate) SetNillableUIModuleName(s *string) *ExtensionCreate {
	if s != nil {
		ec.SetUIModuleName(*s)
	}
	return ec
}

// AddEndpointIDs adds the "endpoints" edge to the Endpoint entity by IDs.
func (ec *ExtensionCreate) AddEndpointIDs(ids ...uint64) *ExtensionCreate {
	ec.mutation.AddEndpointIDs(ids...)
	return ec
}

// AddEndpoints adds the "endpoints" edges to the Endpoint entity.
func (ec *ExtensionCreate) AddEndpoints(e ...*Endpoint) *ExtensionCreate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEndpointIDs(ids...)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (ec *ExtensionCreate) SetDeploymentPackageFkID(id uint64) *ExtensionCreate {
	ec.mutation.SetDeploymentPackageFkID(id)
	return ec
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (ec *ExtensionCreate) SetDeploymentPackageFk(d *DeploymentPackage) *ExtensionCreate {
	return ec.SetDeploymentPackageFkID(d.ID)
}

// Mutation returns the ExtensionMutation object of the builder.
func (ec *ExtensionCreate) Mutation() *ExtensionMutation {
	return ec.mutation
}

// Save creates the Extension in the database.
func (ec *ExtensionCreate) Save(ctx context.Context) (*Extension, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExtensionCreate) SaveX(ctx context.Context) *Extension {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExtensionCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExtensionCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExtensionCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Extension.name"`)}
	}
	if _, ok := ec.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`generated: missing required field "Extension.version"`)}
	}
	if _, ok := ec.mutation.DeploymentPackageFkID(); !ok {
		return &ValidationError{Name: "deployment_package_fk", err: errors.New(`generated: missing required edge "Extension.deployment_package_fk"`)}
	}
	return nil
}

func (ec *ExtensionCreate) sqlSave(ctx context.Context) (*Extension, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExtensionCreate) createSpec() (*Extension, *sqlgraph.CreateSpec) {
	var (
		_node = &Extension{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(extension.Table, sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64))
	)
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(extension.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Version(); ok {
		_spec.SetField(extension.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ec.mutation.DisplayName(); ok {
		_spec.SetField(extension.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := ec.mutation.DisplayNameLc(); ok {
		_spec.SetField(extension.FieldDisplayNameLc, field.TypeString, value)
		_node.DisplayNameLc = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(extension.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.UILabel(); ok {
		_spec.SetField(extension.FieldUILabel, field.TypeString, value)
		_node.UILabel = value
	}
	if value, ok := ec.mutation.UIServiceName(); ok {
		_spec.SetField(extension.FieldUIServiceName, field.TypeString, value)
		_node.UIServiceName = value
	}
	if value, ok := ec.mutation.UIDescription(); ok {
		_spec.SetField(extension.FieldUIDescription, field.TypeString, value)
		_node.UIDescription = value
	}
	if value, ok := ec.mutation.UIFileName(); ok {
		_spec.SetField(extension.FieldUIFileName, field.TypeString, value)
		_node.UIFileName = value
	}
	if value, ok := ec.mutation.UIAppName(); ok {
		_spec.SetField(extension.FieldUIAppName, field.TypeString, value)
		_node.UIAppName = value
	}
	if value, ok := ec.mutation.UIModuleName(); ok {
		_spec.SetField(extension.FieldUIModuleName, field.TypeString, value)
		_node.UIModuleName = value
	}
	if nodes := ec.mutation.EndpointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extension.EndpointsTable,
			Columns: []string{extension.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extension.DeploymentPackageFkTable,
			Columns: []string{extension.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deployment_package_extensions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExtensionCreateBulk is the builder for creating many Extension entities in bulk.
type ExtensionCreateBulk struct {
	config
	err      error
	builders []*ExtensionCreate
}

// Save creates the Extension entities in the database.
func (ecb *ExtensionCreateBulk) Save(ctx context.Context) ([]*Extension, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Extension, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExtensionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExtensionCreateBulk) SaveX(ctx context.Context) []*Extension {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExtensionCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExtensionCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
