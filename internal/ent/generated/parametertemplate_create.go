// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/parametertemplate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// ParameterTemplateCreate is the builder for creating a ParameterTemplate entity.
type ParameterTemplateCreate struct {
	config
	mutation *ParameterTemplateMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ptc *ParameterTemplateCreate) SetName(s string) *ParameterTemplateCreate {
	ptc.mutation.SetName(s)
	return ptc
}

// SetDisplayName sets the "display_name" field.
func (ptc *ParameterTemplateCreate) SetDisplayName(s string) *ParameterTemplateCreate {
	ptc.mutation.SetDisplayName(s)
	return ptc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ptc *ParameterTemplateCreate) SetNillableDisplayName(s *string) *ParameterTemplateCreate {
	if s != nil {
		ptc.SetDisplayName(*s)
	}
	return ptc
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (ptc *ParameterTemplateCreate) SetDisplayNameLc(s string) *ParameterTemplateCreate {
	ptc.mutation.SetDisplayNameLc(s)
	return ptc
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (ptc *ParameterTemplateCreate) SetNillableDisplayNameLc(s *string) *ParameterTemplateCreate {
	if s != nil {
		ptc.SetDisplayNameLc(*s)
	}
	return ptc
}

// SetDefault sets the "default" field.
func (ptc *ParameterTemplateCreate) SetDefault(s string) *ParameterTemplateCreate {
	ptc.mutation.SetDefault(s)
	return ptc
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (ptc *ParameterTemplateCreate) SetNillableDefault(s *string) *ParameterTemplateCreate {
	if s != nil {
		ptc.SetDefault(*s)
	}
	return ptc
}

// SetType sets the "type" field.
func (ptc *ParameterTemplateCreate) SetType(s string) *ParameterTemplateCreate {
	ptc.mutation.SetType(s)
	return ptc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptc *ParameterTemplateCreate) SetNillableType(s *string) *ParameterTemplateCreate {
	if s != nil {
		ptc.SetType(*s)
	}
	return ptc
}

// SetValidator sets the "validator" field.
func (ptc *ParameterTemplateCreate) SetValidator(s string) *ParameterTemplateCreate {
	ptc.mutation.SetValidator(s)
	return ptc
}

// SetNillableValidator sets the "validator" field if the given value is not nil.
func (ptc *ParameterTemplateCreate) SetNillableValidator(s *string) *ParameterTemplateCreate {
	if s != nil {
		ptc.SetValidator(*s)
	}
	return ptc
}

// SetSuggestedValues sets the "suggested_values" field.
func (ptc *ParameterTemplateCreate) SetSuggestedValues(s []string) *ParameterTemplateCreate {
	ptc.mutation.SetSuggestedValues(s)
	return ptc
}

// SetMandatory sets the "mandatory" field.
func (ptc *ParameterTemplateCreate) SetMandatory(b bool) *ParameterTemplateCreate {
	ptc.mutation.SetMandatory(b)
	return ptc
}

// SetNillableMandatory sets the "mandatory" field if the given value is not nil.
func (ptc *ParameterTemplateCreate) SetNillableMandatory(b *bool) *ParameterTemplateCreate {
	if b != nil {
		ptc.SetMandatory(*b)
	}
	return ptc
}

// SetSecret sets the "secret" field.
func (ptc *ParameterTemplateCreate) SetSecret(b bool) *ParameterTemplateCreate {
	ptc.mutation.SetSecret(b)
	return ptc
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (ptc *ParameterTemplateCreate) SetNillableSecret(b *bool) *ParameterTemplateCreate {
	if b != nil {
		ptc.SetSecret(*b)
	}
	return ptc
}

// SetProfileFkID sets the "profile_fk" edge to the Profile entity by ID.
func (ptc *ParameterTemplateCreate) SetProfileFkID(id uint64) *ParameterTemplateCreate {
	ptc.mutation.SetProfileFkID(id)
	return ptc
}

// SetProfileFk sets the "profile_fk" edge to the Profile entity.
func (ptc *ParameterTemplateCreate) SetProfileFk(p *Profile) *ParameterTemplateCreate {
	return ptc.SetProfileFkID(p.ID)
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (ptc *ParameterTemplateCreate) AddProfileIDs(ids ...uint64) *ParameterTemplateCreate {
	ptc.mutation.AddProfileIDs(ids...)
	return ptc
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (ptc *ParameterTemplateCreate) AddProfiles(p ...*Profile) *ParameterTemplateCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddProfileIDs(ids...)
}

// Mutation returns the ParameterTemplateMutation object of the builder.
func (ptc *ParameterTemplateCreate) Mutation() *ParameterTemplateMutation {
	return ptc.mutation
}

// Save creates the ParameterTemplate in the database.
func (ptc *ParameterTemplateCreate) Save(ctx context.Context) (*ParameterTemplate, error) {
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ParameterTemplateCreate) SaveX(ctx context.Context) *ParameterTemplate {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ParameterTemplateCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ParameterTemplateCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ParameterTemplateCreate) check() error {
	if _, ok := ptc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ParameterTemplate.name"`)}
	}
	if _, ok := ptc.mutation.ProfileFkID(); !ok {
		return &ValidationError{Name: "profile_fk", err: errors.New(`generated: missing required edge "ParameterTemplate.profile_fk"`)}
	}
	return nil
}

func (ptc *ParameterTemplateCreate) sqlSave(ctx context.Context) (*ParameterTemplate, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *ParameterTemplateCreate) createSpec() (*ParameterTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &ParameterTemplate{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(parametertemplate.Table, sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64))
	)
	if value, ok := ptc.mutation.Name(); ok {
		_spec.SetField(parametertemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ptc.mutation.DisplayName(); ok {
		_spec.SetField(parametertemplate.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := ptc.mutation.DisplayNameLc(); ok {
		_spec.SetField(parametertemplate.FieldDisplayNameLc, field.TypeString, value)
		_node.DisplayNameLc = value
	}
	if value, ok := ptc.mutation.Default(); ok {
		_spec.SetField(parametertemplate.FieldDefault, field.TypeString, value)
		_node.Default = value
	}
	if value, ok := ptc.mutation.GetType(); ok {
		_spec.SetField(parametertemplate.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ptc.mutation.Validator(); ok {
		_spec.SetField(parametertemplate.FieldValidator, field.TypeString, value)
		_node.Validator = value
	}
	if value, ok := ptc.mutation.SuggestedValues(); ok {
		_spec.SetField(parametertemplate.FieldSuggestedValues, field.TypeJSON, value)
		_node.SuggestedValues = value
	}
	if value, ok := ptc.mutation.Mandatory(); ok {
		_spec.SetField(parametertemplate.FieldMandatory, field.TypeBool, value)
		_node.Mandatory = value
	}
	if value, ok := ptc.mutation.Secret(); ok {
		_spec.SetField(parametertemplate.FieldSecret, field.TypeBool, value)
		_node.Secret = value
	}
	if nodes := ptc.mutation.ProfileFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   parametertemplate.ProfileFkTable,
			Columns: []string{parametertemplate.ProfileFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_parameter_templates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parametertemplate.ProfilesTable,
			Columns: []string{parametertemplate.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ParameterTemplateCreateBulk is the builder for creating many ParameterTemplate entities in bulk.
type ParameterTemplateCreateBulk struct {
	config
	err      error
	builders []*ParameterTemplateCreate
}

// Save creates the ParameterTemplate entities in the database.
func (ptcb *ParameterTemplateCreateBulk) Save(ctx context.Context) ([]*ParameterTemplate, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ParameterTemplate, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParameterTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ParameterTemplateCreateBulk) SaveX(ctx context.Context) []*ParameterTemplate {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ParameterTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ParameterTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
