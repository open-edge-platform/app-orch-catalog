// Code generated by ent, DO NOT EDIT.

package extension

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldVersion, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameLc applies equality check predicate on the "display_name_lc" field. It's identical to DisplayNameLcEQ.
func DisplayNameLc(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldDisplayNameLc, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldDescription, v))
}

// UILabel applies equality check predicate on the "ui_label" field. It's identical to UILabelEQ.
func UILabel(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUILabel, v))
}

// UIServiceName applies equality check predicate on the "ui_service_name" field. It's identical to UIServiceNameEQ.
func UIServiceName(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIServiceName, v))
}

// UIDescription applies equality check predicate on the "ui_description" field. It's identical to UIDescriptionEQ.
func UIDescription(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIDescription, v))
}

// UIFileName applies equality check predicate on the "ui_file_name" field. It's identical to UIFileNameEQ.
func UIFileName(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIFileName, v))
}

// UIAppName applies equality check predicate on the "ui_app_name" field. It's identical to UIAppNameEQ.
func UIAppName(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIAppName, v))
}

// UIModuleName applies equality check predicate on the "ui_module_name" field. It's identical to UIModuleNameEQ.
func UIModuleName(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIModuleName, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldVersion, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.Extension {
	return predicate.Extension(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.Extension {
	return predicate.Extension(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldDisplayName, v))
}

// DisplayNameLcEQ applies the EQ predicate on the "display_name_lc" field.
func DisplayNameLcEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldDisplayNameLc, v))
}

// DisplayNameLcNEQ applies the NEQ predicate on the "display_name_lc" field.
func DisplayNameLcNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldDisplayNameLc, v))
}

// DisplayNameLcIn applies the In predicate on the "display_name_lc" field.
func DisplayNameLcIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldDisplayNameLc, vs...))
}

// DisplayNameLcNotIn applies the NotIn predicate on the "display_name_lc" field.
func DisplayNameLcNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldDisplayNameLc, vs...))
}

// DisplayNameLcGT applies the GT predicate on the "display_name_lc" field.
func DisplayNameLcGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldDisplayNameLc, v))
}

// DisplayNameLcGTE applies the GTE predicate on the "display_name_lc" field.
func DisplayNameLcGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldDisplayNameLc, v))
}

// DisplayNameLcLT applies the LT predicate on the "display_name_lc" field.
func DisplayNameLcLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldDisplayNameLc, v))
}

// DisplayNameLcLTE applies the LTE predicate on the "display_name_lc" field.
func DisplayNameLcLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldDisplayNameLc, v))
}

// DisplayNameLcContains applies the Contains predicate on the "display_name_lc" field.
func DisplayNameLcContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldDisplayNameLc, v))
}

// DisplayNameLcHasPrefix applies the HasPrefix predicate on the "display_name_lc" field.
func DisplayNameLcHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldDisplayNameLc, v))
}

// DisplayNameLcHasSuffix applies the HasSuffix predicate on the "display_name_lc" field.
func DisplayNameLcHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldDisplayNameLc, v))
}

// DisplayNameLcIsNil applies the IsNil predicate on the "display_name_lc" field.
func DisplayNameLcIsNil() predicate.Extension {
	return predicate.Extension(sql.FieldIsNull(FieldDisplayNameLc))
}

// DisplayNameLcNotNil applies the NotNil predicate on the "display_name_lc" field.
func DisplayNameLcNotNil() predicate.Extension {
	return predicate.Extension(sql.FieldNotNull(FieldDisplayNameLc))
}

// DisplayNameLcEqualFold applies the EqualFold predicate on the "display_name_lc" field.
func DisplayNameLcEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldDisplayNameLc, v))
}

// DisplayNameLcContainsFold applies the ContainsFold predicate on the "display_name_lc" field.
func DisplayNameLcContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldDisplayNameLc, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Extension {
	return predicate.Extension(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Extension {
	return predicate.Extension(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldDescription, v))
}

// UILabelEQ applies the EQ predicate on the "ui_label" field.
func UILabelEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUILabel, v))
}

// UILabelNEQ applies the NEQ predicate on the "ui_label" field.
func UILabelNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldUILabel, v))
}

// UILabelIn applies the In predicate on the "ui_label" field.
func UILabelIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldUILabel, vs...))
}

// UILabelNotIn applies the NotIn predicate on the "ui_label" field.
func UILabelNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldUILabel, vs...))
}

// UILabelGT applies the GT predicate on the "ui_label" field.
func UILabelGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldUILabel, v))
}

// UILabelGTE applies the GTE predicate on the "ui_label" field.
func UILabelGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldUILabel, v))
}

// UILabelLT applies the LT predicate on the "ui_label" field.
func UILabelLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldUILabel, v))
}

// UILabelLTE applies the LTE predicate on the "ui_label" field.
func UILabelLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldUILabel, v))
}

// UILabelContains applies the Contains predicate on the "ui_label" field.
func UILabelContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldUILabel, v))
}

// UILabelHasPrefix applies the HasPrefix predicate on the "ui_label" field.
func UILabelHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldUILabel, v))
}

// UILabelHasSuffix applies the HasSuffix predicate on the "ui_label" field.
func UILabelHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldUILabel, v))
}

// UILabelIsNil applies the IsNil predicate on the "ui_label" field.
func UILabelIsNil() predicate.Extension {
	return predicate.Extension(sql.FieldIsNull(FieldUILabel))
}

// UILabelNotNil applies the NotNil predicate on the "ui_label" field.
func UILabelNotNil() predicate.Extension {
	return predicate.Extension(sql.FieldNotNull(FieldUILabel))
}

// UILabelEqualFold applies the EqualFold predicate on the "ui_label" field.
func UILabelEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldUILabel, v))
}

// UILabelContainsFold applies the ContainsFold predicate on the "ui_label" field.
func UILabelContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldUILabel, v))
}

// UIServiceNameEQ applies the EQ predicate on the "ui_service_name" field.
func UIServiceNameEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIServiceName, v))
}

// UIServiceNameNEQ applies the NEQ predicate on the "ui_service_name" field.
func UIServiceNameNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldUIServiceName, v))
}

// UIServiceNameIn applies the In predicate on the "ui_service_name" field.
func UIServiceNameIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldUIServiceName, vs...))
}

// UIServiceNameNotIn applies the NotIn predicate on the "ui_service_name" field.
func UIServiceNameNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldUIServiceName, vs...))
}

// UIServiceNameGT applies the GT predicate on the "ui_service_name" field.
func UIServiceNameGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldUIServiceName, v))
}

// UIServiceNameGTE applies the GTE predicate on the "ui_service_name" field.
func UIServiceNameGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldUIServiceName, v))
}

// UIServiceNameLT applies the LT predicate on the "ui_service_name" field.
func UIServiceNameLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldUIServiceName, v))
}

// UIServiceNameLTE applies the LTE predicate on the "ui_service_name" field.
func UIServiceNameLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldUIServiceName, v))
}

// UIServiceNameContains applies the Contains predicate on the "ui_service_name" field.
func UIServiceNameContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldUIServiceName, v))
}

// UIServiceNameHasPrefix applies the HasPrefix predicate on the "ui_service_name" field.
func UIServiceNameHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldUIServiceName, v))
}

// UIServiceNameHasSuffix applies the HasSuffix predicate on the "ui_service_name" field.
func UIServiceNameHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldUIServiceName, v))
}

// UIServiceNameIsNil applies the IsNil predicate on the "ui_service_name" field.
func UIServiceNameIsNil() predicate.Extension {
	return predicate.Extension(sql.FieldIsNull(FieldUIServiceName))
}

// UIServiceNameNotNil applies the NotNil predicate on the "ui_service_name" field.
func UIServiceNameNotNil() predicate.Extension {
	return predicate.Extension(sql.FieldNotNull(FieldUIServiceName))
}

// UIServiceNameEqualFold applies the EqualFold predicate on the "ui_service_name" field.
func UIServiceNameEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldUIServiceName, v))
}

// UIServiceNameContainsFold applies the ContainsFold predicate on the "ui_service_name" field.
func UIServiceNameContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldUIServiceName, v))
}

// UIDescriptionEQ applies the EQ predicate on the "ui_description" field.
func UIDescriptionEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIDescription, v))
}

// UIDescriptionNEQ applies the NEQ predicate on the "ui_description" field.
func UIDescriptionNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldUIDescription, v))
}

// UIDescriptionIn applies the In predicate on the "ui_description" field.
func UIDescriptionIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldUIDescription, vs...))
}

// UIDescriptionNotIn applies the NotIn predicate on the "ui_description" field.
func UIDescriptionNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldUIDescription, vs...))
}

// UIDescriptionGT applies the GT predicate on the "ui_description" field.
func UIDescriptionGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldUIDescription, v))
}

// UIDescriptionGTE applies the GTE predicate on the "ui_description" field.
func UIDescriptionGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldUIDescription, v))
}

// UIDescriptionLT applies the LT predicate on the "ui_description" field.
func UIDescriptionLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldUIDescription, v))
}

// UIDescriptionLTE applies the LTE predicate on the "ui_description" field.
func UIDescriptionLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldUIDescription, v))
}

// UIDescriptionContains applies the Contains predicate on the "ui_description" field.
func UIDescriptionContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldUIDescription, v))
}

// UIDescriptionHasPrefix applies the HasPrefix predicate on the "ui_description" field.
func UIDescriptionHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldUIDescription, v))
}

// UIDescriptionHasSuffix applies the HasSuffix predicate on the "ui_description" field.
func UIDescriptionHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldUIDescription, v))
}

// UIDescriptionIsNil applies the IsNil predicate on the "ui_description" field.
func UIDescriptionIsNil() predicate.Extension {
	return predicate.Extension(sql.FieldIsNull(FieldUIDescription))
}

// UIDescriptionNotNil applies the NotNil predicate on the "ui_description" field.
func UIDescriptionNotNil() predicate.Extension {
	return predicate.Extension(sql.FieldNotNull(FieldUIDescription))
}

// UIDescriptionEqualFold applies the EqualFold predicate on the "ui_description" field.
func UIDescriptionEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldUIDescription, v))
}

// UIDescriptionContainsFold applies the ContainsFold predicate on the "ui_description" field.
func UIDescriptionContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldUIDescription, v))
}

// UIFileNameEQ applies the EQ predicate on the "ui_file_name" field.
func UIFileNameEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIFileName, v))
}

// UIFileNameNEQ applies the NEQ predicate on the "ui_file_name" field.
func UIFileNameNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldUIFileName, v))
}

// UIFileNameIn applies the In predicate on the "ui_file_name" field.
func UIFileNameIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldUIFileName, vs...))
}

// UIFileNameNotIn applies the NotIn predicate on the "ui_file_name" field.
func UIFileNameNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldUIFileName, vs...))
}

// UIFileNameGT applies the GT predicate on the "ui_file_name" field.
func UIFileNameGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldUIFileName, v))
}

// UIFileNameGTE applies the GTE predicate on the "ui_file_name" field.
func UIFileNameGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldUIFileName, v))
}

// UIFileNameLT applies the LT predicate on the "ui_file_name" field.
func UIFileNameLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldUIFileName, v))
}

// UIFileNameLTE applies the LTE predicate on the "ui_file_name" field.
func UIFileNameLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldUIFileName, v))
}

// UIFileNameContains applies the Contains predicate on the "ui_file_name" field.
func UIFileNameContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldUIFileName, v))
}

// UIFileNameHasPrefix applies the HasPrefix predicate on the "ui_file_name" field.
func UIFileNameHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldUIFileName, v))
}

// UIFileNameHasSuffix applies the HasSuffix predicate on the "ui_file_name" field.
func UIFileNameHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldUIFileName, v))
}

// UIFileNameIsNil applies the IsNil predicate on the "ui_file_name" field.
func UIFileNameIsNil() predicate.Extension {
	return predicate.Extension(sql.FieldIsNull(FieldUIFileName))
}

// UIFileNameNotNil applies the NotNil predicate on the "ui_file_name" field.
func UIFileNameNotNil() predicate.Extension {
	return predicate.Extension(sql.FieldNotNull(FieldUIFileName))
}

// UIFileNameEqualFold applies the EqualFold predicate on the "ui_file_name" field.
func UIFileNameEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldUIFileName, v))
}

// UIFileNameContainsFold applies the ContainsFold predicate on the "ui_file_name" field.
func UIFileNameContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldUIFileName, v))
}

// UIAppNameEQ applies the EQ predicate on the "ui_app_name" field.
func UIAppNameEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIAppName, v))
}

// UIAppNameNEQ applies the NEQ predicate on the "ui_app_name" field.
func UIAppNameNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldUIAppName, v))
}

// UIAppNameIn applies the In predicate on the "ui_app_name" field.
func UIAppNameIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldUIAppName, vs...))
}

// UIAppNameNotIn applies the NotIn predicate on the "ui_app_name" field.
func UIAppNameNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldUIAppName, vs...))
}

// UIAppNameGT applies the GT predicate on the "ui_app_name" field.
func UIAppNameGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldUIAppName, v))
}

// UIAppNameGTE applies the GTE predicate on the "ui_app_name" field.
func UIAppNameGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldUIAppName, v))
}

// UIAppNameLT applies the LT predicate on the "ui_app_name" field.
func UIAppNameLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldUIAppName, v))
}

// UIAppNameLTE applies the LTE predicate on the "ui_app_name" field.
func UIAppNameLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldUIAppName, v))
}

// UIAppNameContains applies the Contains predicate on the "ui_app_name" field.
func UIAppNameContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldUIAppName, v))
}

// UIAppNameHasPrefix applies the HasPrefix predicate on the "ui_app_name" field.
func UIAppNameHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldUIAppName, v))
}

// UIAppNameHasSuffix applies the HasSuffix predicate on the "ui_app_name" field.
func UIAppNameHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldUIAppName, v))
}

// UIAppNameIsNil applies the IsNil predicate on the "ui_app_name" field.
func UIAppNameIsNil() predicate.Extension {
	return predicate.Extension(sql.FieldIsNull(FieldUIAppName))
}

// UIAppNameNotNil applies the NotNil predicate on the "ui_app_name" field.
func UIAppNameNotNil() predicate.Extension {
	return predicate.Extension(sql.FieldNotNull(FieldUIAppName))
}

// UIAppNameEqualFold applies the EqualFold predicate on the "ui_app_name" field.
func UIAppNameEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldUIAppName, v))
}

// UIAppNameContainsFold applies the ContainsFold predicate on the "ui_app_name" field.
func UIAppNameContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldUIAppName, v))
}

// UIModuleNameEQ applies the EQ predicate on the "ui_module_name" field.
func UIModuleNameEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEQ(FieldUIModuleName, v))
}

// UIModuleNameNEQ applies the NEQ predicate on the "ui_module_name" field.
func UIModuleNameNEQ(v string) predicate.Extension {
	return predicate.Extension(sql.FieldNEQ(FieldUIModuleName, v))
}

// UIModuleNameIn applies the In predicate on the "ui_module_name" field.
func UIModuleNameIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldIn(FieldUIModuleName, vs...))
}

// UIModuleNameNotIn applies the NotIn predicate on the "ui_module_name" field.
func UIModuleNameNotIn(vs ...string) predicate.Extension {
	return predicate.Extension(sql.FieldNotIn(FieldUIModuleName, vs...))
}

// UIModuleNameGT applies the GT predicate on the "ui_module_name" field.
func UIModuleNameGT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGT(FieldUIModuleName, v))
}

// UIModuleNameGTE applies the GTE predicate on the "ui_module_name" field.
func UIModuleNameGTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldGTE(FieldUIModuleName, v))
}

// UIModuleNameLT applies the LT predicate on the "ui_module_name" field.
func UIModuleNameLT(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLT(FieldUIModuleName, v))
}

// UIModuleNameLTE applies the LTE predicate on the "ui_module_name" field.
func UIModuleNameLTE(v string) predicate.Extension {
	return predicate.Extension(sql.FieldLTE(FieldUIModuleName, v))
}

// UIModuleNameContains applies the Contains predicate on the "ui_module_name" field.
func UIModuleNameContains(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContains(FieldUIModuleName, v))
}

// UIModuleNameHasPrefix applies the HasPrefix predicate on the "ui_module_name" field.
func UIModuleNameHasPrefix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasPrefix(FieldUIModuleName, v))
}

// UIModuleNameHasSuffix applies the HasSuffix predicate on the "ui_module_name" field.
func UIModuleNameHasSuffix(v string) predicate.Extension {
	return predicate.Extension(sql.FieldHasSuffix(FieldUIModuleName, v))
}

// UIModuleNameIsNil applies the IsNil predicate on the "ui_module_name" field.
func UIModuleNameIsNil() predicate.Extension {
	return predicate.Extension(sql.FieldIsNull(FieldUIModuleName))
}

// UIModuleNameNotNil applies the NotNil predicate on the "ui_module_name" field.
func UIModuleNameNotNil() predicate.Extension {
	return predicate.Extension(sql.FieldNotNull(FieldUIModuleName))
}

// UIModuleNameEqualFold applies the EqualFold predicate on the "ui_module_name" field.
func UIModuleNameEqualFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldEqualFold(FieldUIModuleName, v))
}

// UIModuleNameContainsFold applies the ContainsFold predicate on the "ui_module_name" field.
func UIModuleNameContainsFold(v string) predicate.Extension {
	return predicate.Extension(sql.FieldContainsFold(FieldUIModuleName, v))
}

// HasEndpoints applies the HasEdge predicate on the "endpoints" edge.
func HasEndpoints() predicate.Extension {
	return predicate.Extension(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EndpointsTable, EndpointsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEndpointsWith applies the HasEdge predicate on the "endpoints" edge with a given conditions (other predicates).
func HasEndpointsWith(preds ...predicate.Endpoint) predicate.Extension {
	return predicate.Extension(func(s *sql.Selector) {
		step := newEndpointsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeploymentPackageFk applies the HasEdge predicate on the "deployment_package_fk" edge.
func HasDeploymentPackageFk() predicate.Extension {
	return predicate.Extension(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeploymentPackageFkTable, DeploymentPackageFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentPackageFkWith applies the HasEdge predicate on the "deployment_package_fk" edge with a given conditions (other predicates).
func HasDeploymentPackageFkWith(preds ...predicate.DeploymentPackage) predicate.Extension {
	return predicate.Extension(func(s *sql.Selector) {
		step := newDeploymentPackageFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Extension) predicate.Extension {
	return predicate.Extension(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Extension) predicate.Extension {
	return predicate.Extension(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Extension) predicate.Extension {
	return predicate.Extension(sql.NotPredicates(p))
}
