// Code generated by ent, DO NOT EDIT.

package extension

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the extension type in the database.
	Label = "extension"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDisplayNameLc holds the string denoting the display_name_lc field in the database.
	FieldDisplayNameLc = "display_name_lc"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldUILabel holds the string denoting the ui_label field in the database.
	FieldUILabel = "ui_label"
	// FieldUIServiceName holds the string denoting the ui_service_name field in the database.
	FieldUIServiceName = "ui_service_name"
	// FieldUIDescription holds the string denoting the ui_description field in the database.
	FieldUIDescription = "ui_description"
	// FieldUIFileName holds the string denoting the ui_file_name field in the database.
	FieldUIFileName = "ui_file_name"
	// FieldUIAppName holds the string denoting the ui_app_name field in the database.
	FieldUIAppName = "ui_app_name"
	// FieldUIModuleName holds the string denoting the ui_module_name field in the database.
	FieldUIModuleName = "ui_module_name"
	// EdgeEndpoints holds the string denoting the endpoints edge name in mutations.
	EdgeEndpoints = "endpoints"
	// EdgeDeploymentPackageFk holds the string denoting the deployment_package_fk edge name in mutations.
	EdgeDeploymentPackageFk = "deployment_package_fk"
	// Table holds the table name of the extension in the database.
	Table = "extensions"
	// EndpointsTable is the table that holds the endpoints relation/edge.
	EndpointsTable = "endpoints"
	// EndpointsInverseTable is the table name for the Endpoint entity.
	// It exists in this package in order to avoid circular dependency with the "endpoint" package.
	EndpointsInverseTable = "endpoints"
	// EndpointsColumn is the table column denoting the endpoints relation/edge.
	EndpointsColumn = "extension_endpoints"
	// DeploymentPackageFkTable is the table that holds the deployment_package_fk relation/edge.
	DeploymentPackageFkTable = "extensions"
	// DeploymentPackageFkInverseTable is the table name for the DeploymentPackage entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentpackage" package.
	DeploymentPackageFkInverseTable = "deployment_packages"
	// DeploymentPackageFkColumn is the table column denoting the deployment_package_fk relation/edge.
	DeploymentPackageFkColumn = "deployment_package_extensions"
)

// Columns holds all SQL columns for extension fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldVersion,
	FieldDisplayName,
	FieldDisplayNameLc,
	FieldDescription,
	FieldUILabel,
	FieldUIServiceName,
	FieldUIDescription,
	FieldUIFileName,
	FieldUIAppName,
	FieldUIModuleName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "extensions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"deployment_package_extensions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Extension queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDisplayNameLc orders the results by the display_name_lc field.
func ByDisplayNameLc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayNameLc, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUILabel orders the results by the ui_label field.
func ByUILabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUILabel, opts...).ToFunc()
}

// ByUIServiceName orders the results by the ui_service_name field.
func ByUIServiceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUIServiceName, opts...).ToFunc()
}

// ByUIDescription orders the results by the ui_description field.
func ByUIDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUIDescription, opts...).ToFunc()
}

// ByUIFileName orders the results by the ui_file_name field.
func ByUIFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUIFileName, opts...).ToFunc()
}

// ByUIAppName orders the results by the ui_app_name field.
func ByUIAppName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUIAppName, opts...).ToFunc()
}

// ByUIModuleName orders the results by the ui_module_name field.
func ByUIModuleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUIModuleName, opts...).ToFunc()
}

// ByEndpointsCount orders the results by endpoints count.
func ByEndpointsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEndpointsStep(), opts...)
	}
}

// ByEndpoints orders the results by endpoints terms.
func ByEndpoints(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEndpointsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeploymentPackageFkField orders the results by deployment_package_fk field.
func ByDeploymentPackageFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentPackageFkStep(), sql.OrderByField(field, opts...))
	}
}
func newEndpointsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EndpointsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EndpointsTable, EndpointsColumn),
	)
}
func newDeploymentPackageFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentPackageFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeploymentPackageFkTable, DeploymentPackageFkColumn),
	)
}
