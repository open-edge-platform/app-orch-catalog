// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/registry"
)

// Application is the model entity for the Application schema.
type Application struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// A unique name. Used in HTTP network paths.
	Name string `json:"name,omitempty"`
	// A display name.
	DisplayName string `json:"display_name,omitempty"`
	// Lowercase display name.
	DisplayNameLc string `json:"display_name_lc,omitempty"`
	// A description. Displayed on user interfaces.
	Description string `json:"description,omitempty"`
	// The creation timestamp.
	CreateTime time.Time `json:"create_time,omitempty"`
	// The last update timestamp.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// UUID of the owner project.
	ProjectUUID string `json:"project_uuid,omitempty"`
	// Application version.
	Version string `json:"version,omitempty"`
	// A chart name.
	ChartName string `json:"chart_name,omitempty"`
	// A chart version.
	ChartVersion string `json:"chart_version,omitempty"`
	// Application kind; normal, addon, extension.
	Kind string `json:"kind,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicationQuery when eager-loading is set.
	Edges                       ApplicationEdges `json:"edges"`
	application_default_profile *uint64
	registry_applications       *uint64
	registry_application_images *uint64
	selectValues                sql.SelectValues
}

// ApplicationEdges holds the relations/edges for other nodes in the graph.
type ApplicationEdges struct {
	// Application contains 0 to many Profiles
	Profiles []*Profile `json:"profiles,omitempty"`
	// Application must refer to a valid HELM Registry
	RegistryFk *Registry `json:"registry_fk,omitempty"`
	// Application can also refer to a valid IMAGE Registry
	ImageRegistryFk *Registry `json:"image_registry_fk,omitempty"`
	// Many Applications may be referenced by 0-many Deployment Packages
	DeploymentPackageFk []*DeploymentPackage `json:"deployment_package_fk,omitempty"`
	// Application dependency source
	DependencySourceFk []*ApplicationDependency `json:"dependency_source_fk,omitempty"`
	// Application dependency target
	DependencyTargetFk []*ApplicationDependency `json:"dependency_target_fk,omitempty"`
	// Default Profile to be used when deploying this Application
	DefaultProfile *Profile `json:"default_profile,omitempty"`
	// Resource to ignore when deploying this Application
	IgnoredResources []*IgnoredResource `json:"ignored_resources,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// ProfilesOrErr returns the Profiles value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicationEdges) ProfilesOrErr() ([]*Profile, error) {
	if e.loadedTypes[0] {
		return e.Profiles, nil
	}
	return nil, &NotLoadedError{edge: "profiles"}
}

// RegistryFkOrErr returns the RegistryFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) RegistryFkOrErr() (*Registry, error) {
	if e.loadedTypes[1] {
		if e.RegistryFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: registry.Label}
		}
		return e.RegistryFk, nil
	}
	return nil, &NotLoadedError{edge: "registry_fk"}
}

// ImageRegistryFkOrErr returns the ImageRegistryFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) ImageRegistryFkOrErr() (*Registry, error) {
	if e.loadedTypes[2] {
		if e.ImageRegistryFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: registry.Label}
		}
		return e.ImageRegistryFk, nil
	}
	return nil, &NotLoadedError{edge: "image_registry_fk"}
}

// DeploymentPackageFkOrErr returns the DeploymentPackageFk value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicationEdges) DeploymentPackageFkOrErr() ([]*DeploymentPackage, error) {
	if e.loadedTypes[3] {
		return e.DeploymentPackageFk, nil
	}
	return nil, &NotLoadedError{edge: "deployment_package_fk"}
}

// DependencySourceFkOrErr returns the DependencySourceFk value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicationEdges) DependencySourceFkOrErr() ([]*ApplicationDependency, error) {
	if e.loadedTypes[4] {
		return e.DependencySourceFk, nil
	}
	return nil, &NotLoadedError{edge: "dependency_source_fk"}
}

// DependencyTargetFkOrErr returns the DependencyTargetFk value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicationEdges) DependencyTargetFkOrErr() ([]*ApplicationDependency, error) {
	if e.loadedTypes[5] {
		return e.DependencyTargetFk, nil
	}
	return nil, &NotLoadedError{edge: "dependency_target_fk"}
}

// DefaultProfileOrErr returns the DefaultProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) DefaultProfileOrErr() (*Profile, error) {
	if e.loadedTypes[6] {
		if e.DefaultProfile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.DefaultProfile, nil
	}
	return nil, &NotLoadedError{edge: "default_profile"}
}

// IgnoredResourcesOrErr returns the IgnoredResources value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicationEdges) IgnoredResourcesOrErr() ([]*IgnoredResource, error) {
	if e.loadedTypes[7] {
		return e.IgnoredResources, nil
	}
	return nil, &NotLoadedError{edge: "ignored_resources"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Application) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case application.FieldID:
			values[i] = new(sql.NullInt64)
		case application.FieldName, application.FieldDisplayName, application.FieldDisplayNameLc, application.FieldDescription, application.FieldProjectUUID, application.FieldVersion, application.FieldChartName, application.FieldChartVersion, application.FieldKind:
			values[i] = new(sql.NullString)
		case application.FieldCreateTime, application.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case application.ForeignKeys[0]: // application_default_profile
			values[i] = new(sql.NullInt64)
		case application.ForeignKeys[1]: // registry_applications
			values[i] = new(sql.NullInt64)
		case application.ForeignKeys[2]: // registry_application_images
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Application fields.
func (a *Application) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case application.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case application.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case application.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				a.DisplayName = value.String
			}
		case application.FieldDisplayNameLc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name_lc", values[i])
			} else if value.Valid {
				a.DisplayNameLc = value.String
			}
		case application.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case application.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case application.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case application.FieldProjectUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_uuid", values[i])
			} else if value.Valid {
				a.ProjectUUID = value.String
			}
		case application.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				a.Version = value.String
			}
		case application.FieldChartName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chart_name", values[i])
			} else if value.Valid {
				a.ChartName = value.String
			}
		case application.FieldChartVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chart_version", values[i])
			} else if value.Valid {
				a.ChartVersion = value.String
			}
		case application.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				a.Kind = value.String
			}
		case application.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field application_default_profile", value)
			} else if value.Valid {
				a.application_default_profile = new(uint64)
				*a.application_default_profile = uint64(value.Int64)
			}
		case application.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field registry_applications", value)
			} else if value.Valid {
				a.registry_applications = new(uint64)
				*a.registry_applications = uint64(value.Int64)
			}
		case application.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field registry_application_images", value)
			} else if value.Valid {
				a.registry_application_images = new(uint64)
				*a.registry_application_images = uint64(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Application.
// This includes values selected through modifiers, order, etc.
func (a *Application) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryProfiles queries the "profiles" edge of the Application entity.
func (a *Application) QueryProfiles() *ProfileQuery {
	return NewApplicationClient(a.config).QueryProfiles(a)
}

// QueryRegistryFk queries the "registry_fk" edge of the Application entity.
func (a *Application) QueryRegistryFk() *RegistryQuery {
	return NewApplicationClient(a.config).QueryRegistryFk(a)
}

// QueryImageRegistryFk queries the "image_registry_fk" edge of the Application entity.
func (a *Application) QueryImageRegistryFk() *RegistryQuery {
	return NewApplicationClient(a.config).QueryImageRegistryFk(a)
}

// QueryDeploymentPackageFk queries the "deployment_package_fk" edge of the Application entity.
func (a *Application) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	return NewApplicationClient(a.config).QueryDeploymentPackageFk(a)
}

// QueryDependencySourceFk queries the "dependency_source_fk" edge of the Application entity.
func (a *Application) QueryDependencySourceFk() *ApplicationDependencyQuery {
	return NewApplicationClient(a.config).QueryDependencySourceFk(a)
}

// QueryDependencyTargetFk queries the "dependency_target_fk" edge of the Application entity.
func (a *Application) QueryDependencyTargetFk() *ApplicationDependencyQuery {
	return NewApplicationClient(a.config).QueryDependencyTargetFk(a)
}

// QueryDefaultProfile queries the "default_profile" edge of the Application entity.
func (a *Application) QueryDefaultProfile() *ProfileQuery {
	return NewApplicationClient(a.config).QueryDefaultProfile(a)
}

// QueryIgnoredResources queries the "ignored_resources" edge of the Application entity.
func (a *Application) QueryIgnoredResources() *IgnoredResourceQuery {
	return NewApplicationClient(a.config).QueryIgnoredResources(a)
}

// Update returns a builder for updating this Application.
// Note that you need to call Application.Unwrap() before calling this method if this Application
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Application) Update() *ApplicationUpdateOne {
	return NewApplicationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Application entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Application) Unwrap() *Application {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("generated: Application is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Application) String() string {
	var builder strings.Builder
	builder.WriteString("Application(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(a.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("display_name_lc=")
	builder.WriteString(a.DisplayNameLc)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("project_uuid=")
	builder.WriteString(a.ProjectUUID)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(a.Version)
	builder.WriteString(", ")
	builder.WriteString("chart_name=")
	builder.WriteString(a.ChartName)
	builder.WriteString(", ")
	builder.WriteString("chart_version=")
	builder.WriteString(a.ChartVersion)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(a.Kind)
	builder.WriteByte(')')
	return builder.String()
}

// Applications is a parsable slice of Application.
type Applications []*Application
