// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
)

// DeploymentProfile is the model entity for the DeploymentProfile schema.
type DeploymentProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// A unique name. Used in HTTP network paths.
	Name string `json:"name,omitempty"`
	// A display name.
	DisplayName string `json:"display_name,omitempty"`
	// Lowercase display name.
	DisplayNameLc string `json:"display_name_lc,omitempty"`
	// A description. Displayed on user interfaces.
	Description string `json:"description,omitempty"`
	// The creation timestamp.
	CreateTime time.Time `json:"create_time,omitempty"`
	// The last update timestamp.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentProfileQuery when eager-loading is set.
	Edges                                  DeploymentProfileEdges `json:"edges"`
	deployment_package_deployment_profiles *uint64
	selectValues                           sql.SelectValues
}

// DeploymentProfileEdges holds the relations/edges for other nodes in the graph.
type DeploymentProfileEdges struct {
	// A Deployment Package can have 0-many Deployment Profiles
	Profiles []*Profile `json:"profiles,omitempty"`
	// Deployment Profile must belong to a Deployment Package
	DeploymentPackageFk *DeploymentPackage `json:"deployment_package_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfilesOrErr returns the Profiles value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentProfileEdges) ProfilesOrErr() ([]*Profile, error) {
	if e.loadedTypes[0] {
		return e.Profiles, nil
	}
	return nil, &NotLoadedError{edge: "profiles"}
}

// DeploymentPackageFkOrErr returns the DeploymentPackageFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentProfileEdges) DeploymentPackageFkOrErr() (*DeploymentPackage, error) {
	if e.loadedTypes[1] {
		if e.DeploymentPackageFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deploymentpackage.Label}
		}
		return e.DeploymentPackageFk, nil
	}
	return nil, &NotLoadedError{edge: "deployment_package_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeploymentProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deploymentprofile.FieldID:
			values[i] = new(sql.NullInt64)
		case deploymentprofile.FieldName, deploymentprofile.FieldDisplayName, deploymentprofile.FieldDisplayNameLc, deploymentprofile.FieldDescription:
			values[i] = new(sql.NullString)
		case deploymentprofile.FieldCreateTime, deploymentprofile.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case deploymentprofile.ForeignKeys[0]: // deployment_package_deployment_profiles
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeploymentProfile fields.
func (dp *DeploymentProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deploymentprofile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dp.ID = uint64(value.Int64)
		case deploymentprofile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dp.Name = value.String
			}
		case deploymentprofile.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				dp.DisplayName = value.String
			}
		case deploymentprofile.FieldDisplayNameLc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name_lc", values[i])
			} else if value.Valid {
				dp.DisplayNameLc = value.String
			}
		case deploymentprofile.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dp.Description = value.String
			}
		case deploymentprofile.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dp.CreateTime = value.Time
			}
		case deploymentprofile.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dp.UpdateTime = value.Time
			}
		case deploymentprofile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_package_deployment_profiles", value)
			} else if value.Valid {
				dp.deployment_package_deployment_profiles = new(uint64)
				*dp.deployment_package_deployment_profiles = uint64(value.Int64)
			}
		default:
			dp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeploymentProfile.
// This includes values selected through modifiers, order, etc.
func (dp *DeploymentProfile) Value(name string) (ent.Value, error) {
	return dp.selectValues.Get(name)
}

// QueryProfiles queries the "profiles" edge of the DeploymentProfile entity.
func (dp *DeploymentProfile) QueryProfiles() *ProfileQuery {
	return NewDeploymentProfileClient(dp.config).QueryProfiles(dp)
}

// QueryDeploymentPackageFk queries the "deployment_package_fk" edge of the DeploymentProfile entity.
func (dp *DeploymentProfile) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	return NewDeploymentProfileClient(dp.config).QueryDeploymentPackageFk(dp)
}

// Update returns a builder for updating this DeploymentProfile.
// Note that you need to call DeploymentProfile.Unwrap() before calling this method if this DeploymentProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DeploymentProfile) Update() *DeploymentProfileUpdateOne {
	return NewDeploymentProfileClient(dp.config).UpdateOne(dp)
}

// Unwrap unwraps the DeploymentProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DeploymentProfile) Unwrap() *DeploymentProfile {
	_tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("generated: DeploymentProfile is not a transactional entity")
	}
	dp.config.driver = _tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DeploymentProfile) String() string {
	var builder strings.Builder
	builder.WriteString("DeploymentProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dp.ID))
	builder.WriteString("name=")
	builder.WriteString(dp.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(dp.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("display_name_lc=")
	builder.WriteString(dp.DisplayNameLc)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(dp.Description)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(dp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(dp.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeploymentProfiles is a parsable slice of DeploymentProfile.
type DeploymentProfiles []*DeploymentProfile
