// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifact"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifactreference"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
)

// ArtifactReference is the model entity for the ArtifactReference schema.
type ArtifactReference struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Purpose for the artifact.
	Purpose string `json:"purpose,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtifactReferenceQuery when eager-loading is set.
	Edges                        ArtifactReferenceEdges `json:"edges"`
	artifact_reference_artifact  *uint64
	deployment_package_artifacts *uint64
	selectValues                 sql.SelectValues
}

// ArtifactReferenceEdges holds the relations/edges for other nodes in the graph.
type ArtifactReferenceEdges struct {
	// Artifact being referred to.
	Artifact *Artifact `json:"artifact,omitempty"`
	// Many artifacts can referenced by 0-many Deployment Packages
	DeploymentPackageFk *DeploymentPackage `json:"deployment_package_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ArtifactOrErr returns the Artifact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtifactReferenceEdges) ArtifactOrErr() (*Artifact, error) {
	if e.loadedTypes[0] {
		if e.Artifact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: artifact.Label}
		}
		return e.Artifact, nil
	}
	return nil, &NotLoadedError{edge: "artifact"}
}

// DeploymentPackageFkOrErr returns the DeploymentPackageFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtifactReferenceEdges) DeploymentPackageFkOrErr() (*DeploymentPackage, error) {
	if e.loadedTypes[1] {
		if e.DeploymentPackageFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deploymentpackage.Label}
		}
		return e.DeploymentPackageFk, nil
	}
	return nil, &NotLoadedError{edge: "deployment_package_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArtifactReference) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case artifactreference.FieldID:
			values[i] = new(sql.NullInt64)
		case artifactreference.FieldPurpose:
			values[i] = new(sql.NullString)
		case artifactreference.ForeignKeys[0]: // artifact_reference_artifact
			values[i] = new(sql.NullInt64)
		case artifactreference.ForeignKeys[1]: // deployment_package_artifacts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArtifactReference fields.
func (ar *ArtifactReference) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case artifactreference.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = uint64(value.Int64)
		case artifactreference.FieldPurpose:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purpose", values[i])
			} else if value.Valid {
				ar.Purpose = value.String
			}
		case artifactreference.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field artifact_reference_artifact", value)
			} else if value.Valid {
				ar.artifact_reference_artifact = new(uint64)
				*ar.artifact_reference_artifact = uint64(value.Int64)
			}
		case artifactreference.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_package_artifacts", value)
			} else if value.Valid {
				ar.deployment_package_artifacts = new(uint64)
				*ar.deployment_package_artifacts = uint64(value.Int64)
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ArtifactReference.
// This includes values selected through modifiers, order, etc.
func (ar *ArtifactReference) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryArtifact queries the "artifact" edge of the ArtifactReference entity.
func (ar *ArtifactReference) QueryArtifact() *ArtifactQuery {
	return NewArtifactReferenceClient(ar.config).QueryArtifact(ar)
}

// QueryDeploymentPackageFk queries the "deployment_package_fk" edge of the ArtifactReference entity.
func (ar *ArtifactReference) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	return NewArtifactReferenceClient(ar.config).QueryDeploymentPackageFk(ar)
}

// Update returns a builder for updating this ArtifactReference.
// Note that you need to call ArtifactReference.Unwrap() before calling this method if this ArtifactReference
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *ArtifactReference) Update() *ArtifactReferenceUpdateOne {
	return NewArtifactReferenceClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the ArtifactReference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *ArtifactReference) Unwrap() *ArtifactReference {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("generated: ArtifactReference is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *ArtifactReference) String() string {
	var builder strings.Builder
	builder.WriteString("ArtifactReference(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("purpose=")
	builder.WriteString(ar.Purpose)
	builder.WriteByte(')')
	return builder.String()
}

// ArtifactReferences is a parsable slice of ArtifactReference.
type ArtifactReferences []*ArtifactReference
