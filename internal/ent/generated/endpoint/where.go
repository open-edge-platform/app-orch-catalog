// Code generated by ent, DO NOT EDIT.

package endpoint

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldID, id))
}

// ServiceName applies equality check predicate on the "service_name" field. It's identical to ServiceNameEQ.
func ServiceName(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldServiceName, v))
}

// ExternalPath applies equality check predicate on the "external_path" field. It's identical to ExternalPathEQ.
func ExternalPath(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldExternalPath, v))
}

// InternalPath applies equality check predicate on the "internal_path" field. It's identical to InternalPathEQ.
func InternalPath(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldInternalPath, v))
}

// Scheme applies equality check predicate on the "scheme" field. It's identical to SchemeEQ.
func Scheme(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldScheme, v))
}

// AuthType applies equality check predicate on the "auth_type" field. It's identical to AuthTypeEQ.
func AuthType(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldAuthType, v))
}

// AppName applies equality check predicate on the "app_name" field. It's identical to AppNameEQ.
func AppName(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldAppName, v))
}

// ServiceNameEQ applies the EQ predicate on the "service_name" field.
func ServiceNameEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldServiceName, v))
}

// ServiceNameNEQ applies the NEQ predicate on the "service_name" field.
func ServiceNameNEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldServiceName, v))
}

// ServiceNameIn applies the In predicate on the "service_name" field.
func ServiceNameIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldServiceName, vs...))
}

// ServiceNameNotIn applies the NotIn predicate on the "service_name" field.
func ServiceNameNotIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldServiceName, vs...))
}

// ServiceNameGT applies the GT predicate on the "service_name" field.
func ServiceNameGT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldServiceName, v))
}

// ServiceNameGTE applies the GTE predicate on the "service_name" field.
func ServiceNameGTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldServiceName, v))
}

// ServiceNameLT applies the LT predicate on the "service_name" field.
func ServiceNameLT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldServiceName, v))
}

// ServiceNameLTE applies the LTE predicate on the "service_name" field.
func ServiceNameLTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldServiceName, v))
}

// ServiceNameContains applies the Contains predicate on the "service_name" field.
func ServiceNameContains(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContains(FieldServiceName, v))
}

// ServiceNameHasPrefix applies the HasPrefix predicate on the "service_name" field.
func ServiceNameHasPrefix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasPrefix(FieldServiceName, v))
}

// ServiceNameHasSuffix applies the HasSuffix predicate on the "service_name" field.
func ServiceNameHasSuffix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasSuffix(FieldServiceName, v))
}

// ServiceNameEqualFold applies the EqualFold predicate on the "service_name" field.
func ServiceNameEqualFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEqualFold(FieldServiceName, v))
}

// ServiceNameContainsFold applies the ContainsFold predicate on the "service_name" field.
func ServiceNameContainsFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContainsFold(FieldServiceName, v))
}

// ExternalPathEQ applies the EQ predicate on the "external_path" field.
func ExternalPathEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldExternalPath, v))
}

// ExternalPathNEQ applies the NEQ predicate on the "external_path" field.
func ExternalPathNEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldExternalPath, v))
}

// ExternalPathIn applies the In predicate on the "external_path" field.
func ExternalPathIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldExternalPath, vs...))
}

// ExternalPathNotIn applies the NotIn predicate on the "external_path" field.
func ExternalPathNotIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldExternalPath, vs...))
}

// ExternalPathGT applies the GT predicate on the "external_path" field.
func ExternalPathGT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldExternalPath, v))
}

// ExternalPathGTE applies the GTE predicate on the "external_path" field.
func ExternalPathGTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldExternalPath, v))
}

// ExternalPathLT applies the LT predicate on the "external_path" field.
func ExternalPathLT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldExternalPath, v))
}

// ExternalPathLTE applies the LTE predicate on the "external_path" field.
func ExternalPathLTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldExternalPath, v))
}

// ExternalPathContains applies the Contains predicate on the "external_path" field.
func ExternalPathContains(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContains(FieldExternalPath, v))
}

// ExternalPathHasPrefix applies the HasPrefix predicate on the "external_path" field.
func ExternalPathHasPrefix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasPrefix(FieldExternalPath, v))
}

// ExternalPathHasSuffix applies the HasSuffix predicate on the "external_path" field.
func ExternalPathHasSuffix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasSuffix(FieldExternalPath, v))
}

// ExternalPathEqualFold applies the EqualFold predicate on the "external_path" field.
func ExternalPathEqualFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEqualFold(FieldExternalPath, v))
}

// ExternalPathContainsFold applies the ContainsFold predicate on the "external_path" field.
func ExternalPathContainsFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContainsFold(FieldExternalPath, v))
}

// InternalPathEQ applies the EQ predicate on the "internal_path" field.
func InternalPathEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldInternalPath, v))
}

// InternalPathNEQ applies the NEQ predicate on the "internal_path" field.
func InternalPathNEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldInternalPath, v))
}

// InternalPathIn applies the In predicate on the "internal_path" field.
func InternalPathIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldInternalPath, vs...))
}

// InternalPathNotIn applies the NotIn predicate on the "internal_path" field.
func InternalPathNotIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldInternalPath, vs...))
}

// InternalPathGT applies the GT predicate on the "internal_path" field.
func InternalPathGT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldInternalPath, v))
}

// InternalPathGTE applies the GTE predicate on the "internal_path" field.
func InternalPathGTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldInternalPath, v))
}

// InternalPathLT applies the LT predicate on the "internal_path" field.
func InternalPathLT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldInternalPath, v))
}

// InternalPathLTE applies the LTE predicate on the "internal_path" field.
func InternalPathLTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldInternalPath, v))
}

// InternalPathContains applies the Contains predicate on the "internal_path" field.
func InternalPathContains(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContains(FieldInternalPath, v))
}

// InternalPathHasPrefix applies the HasPrefix predicate on the "internal_path" field.
func InternalPathHasPrefix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasPrefix(FieldInternalPath, v))
}

// InternalPathHasSuffix applies the HasSuffix predicate on the "internal_path" field.
func InternalPathHasSuffix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasSuffix(FieldInternalPath, v))
}

// InternalPathEqualFold applies the EqualFold predicate on the "internal_path" field.
func InternalPathEqualFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEqualFold(FieldInternalPath, v))
}

// InternalPathContainsFold applies the ContainsFold predicate on the "internal_path" field.
func InternalPathContainsFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContainsFold(FieldInternalPath, v))
}

// SchemeEQ applies the EQ predicate on the "scheme" field.
func SchemeEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldScheme, v))
}

// SchemeNEQ applies the NEQ predicate on the "scheme" field.
func SchemeNEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldScheme, v))
}

// SchemeIn applies the In predicate on the "scheme" field.
func SchemeIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldScheme, vs...))
}

// SchemeNotIn applies the NotIn predicate on the "scheme" field.
func SchemeNotIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldScheme, vs...))
}

// SchemeGT applies the GT predicate on the "scheme" field.
func SchemeGT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldScheme, v))
}

// SchemeGTE applies the GTE predicate on the "scheme" field.
func SchemeGTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldScheme, v))
}

// SchemeLT applies the LT predicate on the "scheme" field.
func SchemeLT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldScheme, v))
}

// SchemeLTE applies the LTE predicate on the "scheme" field.
func SchemeLTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldScheme, v))
}

// SchemeContains applies the Contains predicate on the "scheme" field.
func SchemeContains(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContains(FieldScheme, v))
}

// SchemeHasPrefix applies the HasPrefix predicate on the "scheme" field.
func SchemeHasPrefix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasPrefix(FieldScheme, v))
}

// SchemeHasSuffix applies the HasSuffix predicate on the "scheme" field.
func SchemeHasSuffix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasSuffix(FieldScheme, v))
}

// SchemeEqualFold applies the EqualFold predicate on the "scheme" field.
func SchemeEqualFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEqualFold(FieldScheme, v))
}

// SchemeContainsFold applies the ContainsFold predicate on the "scheme" field.
func SchemeContainsFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContainsFold(FieldScheme, v))
}

// AuthTypeEQ applies the EQ predicate on the "auth_type" field.
func AuthTypeEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldAuthType, v))
}

// AuthTypeNEQ applies the NEQ predicate on the "auth_type" field.
func AuthTypeNEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldAuthType, v))
}

// AuthTypeIn applies the In predicate on the "auth_type" field.
func AuthTypeIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldAuthType, vs...))
}

// AuthTypeNotIn applies the NotIn predicate on the "auth_type" field.
func AuthTypeNotIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldAuthType, vs...))
}

// AuthTypeGT applies the GT predicate on the "auth_type" field.
func AuthTypeGT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldAuthType, v))
}

// AuthTypeGTE applies the GTE predicate on the "auth_type" field.
func AuthTypeGTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldAuthType, v))
}

// AuthTypeLT applies the LT predicate on the "auth_type" field.
func AuthTypeLT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldAuthType, v))
}

// AuthTypeLTE applies the LTE predicate on the "auth_type" field.
func AuthTypeLTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldAuthType, v))
}

// AuthTypeContains applies the Contains predicate on the "auth_type" field.
func AuthTypeContains(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContains(FieldAuthType, v))
}

// AuthTypeHasPrefix applies the HasPrefix predicate on the "auth_type" field.
func AuthTypeHasPrefix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasPrefix(FieldAuthType, v))
}

// AuthTypeHasSuffix applies the HasSuffix predicate on the "auth_type" field.
func AuthTypeHasSuffix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasSuffix(FieldAuthType, v))
}

// AuthTypeEqualFold applies the EqualFold predicate on the "auth_type" field.
func AuthTypeEqualFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEqualFold(FieldAuthType, v))
}

// AuthTypeContainsFold applies the ContainsFold predicate on the "auth_type" field.
func AuthTypeContainsFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContainsFold(FieldAuthType, v))
}

// AppNameEQ applies the EQ predicate on the "app_name" field.
func AppNameEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEQ(FieldAppName, v))
}

// AppNameNEQ applies the NEQ predicate on the "app_name" field.
func AppNameNEQ(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNEQ(FieldAppName, v))
}

// AppNameIn applies the In predicate on the "app_name" field.
func AppNameIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIn(FieldAppName, vs...))
}

// AppNameNotIn applies the NotIn predicate on the "app_name" field.
func AppNameNotIn(vs ...string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotIn(FieldAppName, vs...))
}

// AppNameGT applies the GT predicate on the "app_name" field.
func AppNameGT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGT(FieldAppName, v))
}

// AppNameGTE applies the GTE predicate on the "app_name" field.
func AppNameGTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldGTE(FieldAppName, v))
}

// AppNameLT applies the LT predicate on the "app_name" field.
func AppNameLT(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLT(FieldAppName, v))
}

// AppNameLTE applies the LTE predicate on the "app_name" field.
func AppNameLTE(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldLTE(FieldAppName, v))
}

// AppNameContains applies the Contains predicate on the "app_name" field.
func AppNameContains(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContains(FieldAppName, v))
}

// AppNameHasPrefix applies the HasPrefix predicate on the "app_name" field.
func AppNameHasPrefix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasPrefix(FieldAppName, v))
}

// AppNameHasSuffix applies the HasSuffix predicate on the "app_name" field.
func AppNameHasSuffix(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldHasSuffix(FieldAppName, v))
}

// AppNameIsNil applies the IsNil predicate on the "app_name" field.
func AppNameIsNil() predicate.Endpoint {
	return predicate.Endpoint(sql.FieldIsNull(FieldAppName))
}

// AppNameNotNil applies the NotNil predicate on the "app_name" field.
func AppNameNotNil() predicate.Endpoint {
	return predicate.Endpoint(sql.FieldNotNull(FieldAppName))
}

// AppNameEqualFold applies the EqualFold predicate on the "app_name" field.
func AppNameEqualFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldEqualFold(FieldAppName, v))
}

// AppNameContainsFold applies the ContainsFold predicate on the "app_name" field.
func AppNameContainsFold(v string) predicate.Endpoint {
	return predicate.Endpoint(sql.FieldContainsFold(FieldAppName, v))
}

// HasExtensionFk applies the HasEdge predicate on the "extension_fk" edge.
func HasExtensionFk() predicate.Endpoint {
	return predicate.Endpoint(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExtensionFkTable, ExtensionFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExtensionFkWith applies the HasEdge predicate on the "extension_fk" edge with a given conditions (other predicates).
func HasExtensionFkWith(preds ...predicate.Extension) predicate.Endpoint {
	return predicate.Endpoint(func(s *sql.Selector) {
		step := newExtensionFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Endpoint) predicate.Endpoint {
	return predicate.Endpoint(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Endpoint) predicate.Endpoint {
	return predicate.Endpoint(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Endpoint) predicate.Endpoint {
	return predicate.Endpoint(sql.NotPredicates(p))
}
