// Code generated by ent, DO NOT EDIT.

package endpoint

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the endpoint type in the database.
	Label = "endpoint"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldServiceName holds the string denoting the service_name field in the database.
	FieldServiceName = "service_name"
	// FieldExternalPath holds the string denoting the external_path field in the database.
	FieldExternalPath = "external_path"
	// FieldInternalPath holds the string denoting the internal_path field in the database.
	FieldInternalPath = "internal_path"
	// FieldScheme holds the string denoting the scheme field in the database.
	FieldScheme = "scheme"
	// FieldAuthType holds the string denoting the auth_type field in the database.
	FieldAuthType = "auth_type"
	// FieldAppName holds the string denoting the app_name field in the database.
	FieldAppName = "app_name"
	// EdgeExtensionFk holds the string denoting the extension_fk edge name in mutations.
	EdgeExtensionFk = "extension_fk"
	// Table holds the table name of the endpoint in the database.
	Table = "endpoints"
	// ExtensionFkTable is the table that holds the extension_fk relation/edge.
	ExtensionFkTable = "endpoints"
	// ExtensionFkInverseTable is the table name for the Extension entity.
	// It exists in this package in order to avoid circular dependency with the "extension" package.
	ExtensionFkInverseTable = "extensions"
	// ExtensionFkColumn is the table column denoting the extension_fk relation/edge.
	ExtensionFkColumn = "extension_endpoints"
)

// Columns holds all SQL columns for endpoint fields.
var Columns = []string{
	FieldID,
	FieldServiceName,
	FieldExternalPath,
	FieldInternalPath,
	FieldScheme,
	FieldAuthType,
	FieldAppName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "endpoints"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"extension_endpoints",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Endpoint queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByServiceName orders the results by the service_name field.
func ByServiceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceName, opts...).ToFunc()
}

// ByExternalPath orders the results by the external_path field.
func ByExternalPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalPath, opts...).ToFunc()
}

// ByInternalPath orders the results by the internal_path field.
func ByInternalPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalPath, opts...).ToFunc()
}

// ByScheme orders the results by the scheme field.
func ByScheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheme, opts...).ToFunc()
}

// ByAuthType orders the results by the auth_type field.
func ByAuthType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthType, opts...).ToFunc()
}

// ByAppName orders the results by the app_name field.
func ByAppName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppName, opts...).ToFunc()
}

// ByExtensionFkField orders the results by extension_fk field.
func ByExtensionFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExtensionFkStep(), sql.OrderByField(field, opts...))
	}
}
func newExtensionFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExtensionFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExtensionFkTable, ExtensionFkColumn),
	)
}
