// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// A unique name. Used in HTTP network paths.
	Name string `json:"name,omitempty"`
	// A display name.
	DisplayName string `json:"display_name,omitempty"`
	// Lowercase display name.
	DisplayNameLc string `json:"display_name_lc,omitempty"`
	// A description. Displayed on user interfaces.
	Description string `json:"description,omitempty"`
	// The creation timestamp.
	CreateTime time.Time `json:"create_time,omitempty"`
	// The last update timestamp.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ChartValues holds the value of the "chart_values" field.
	ChartValues string `json:"chart_values,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileQuery when eager-loading is set.
	Edges                       ProfileEdges `json:"edges"`
	application_profiles        *uint64
	parameter_template_profiles *uint64
	selectValues                sql.SelectValues
}

// ProfileEdges holds the relations/edges for other nodes in the graph.
type ProfileEdges struct {
	// Profile must belong to one Application
	ApplicationFk *Application `json:"application_fk,omitempty"`
	// Many Deployment Profiles can refer to an Application Profile
	DeploymentProfiles []*DeploymentProfile `json:"deployment_profiles,omitempty"`
	// Profile may contain a list of parameter templates.
	ParameterTemplates []*ParameterTemplate `json:"parameter_templates,omitempty"`
	// Profile may depend on a set of Deployment Requirements.
	DeploymentRequirements []*DeploymentRequirement `json:"deployment_requirements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ApplicationFkOrErr returns the ApplicationFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) ApplicationFkOrErr() (*Application, error) {
	if e.loadedTypes[0] {
		if e.ApplicationFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: application.Label}
		}
		return e.ApplicationFk, nil
	}
	return nil, &NotLoadedError{edge: "application_fk"}
}

// DeploymentProfilesOrErr returns the DeploymentProfiles value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) DeploymentProfilesOrErr() ([]*DeploymentProfile, error) {
	if e.loadedTypes[1] {
		return e.DeploymentProfiles, nil
	}
	return nil, &NotLoadedError{edge: "deployment_profiles"}
}

// ParameterTemplatesOrErr returns the ParameterTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) ParameterTemplatesOrErr() ([]*ParameterTemplate, error) {
	if e.loadedTypes[2] {
		return e.ParameterTemplates, nil
	}
	return nil, &NotLoadedError{edge: "parameter_templates"}
}

// DeploymentRequirementsOrErr returns the DeploymentRequirements value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) DeploymentRequirementsOrErr() ([]*DeploymentRequirement, error) {
	if e.loadedTypes[3] {
		return e.DeploymentRequirements, nil
	}
	return nil, &NotLoadedError{edge: "deployment_requirements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			values[i] = new(sql.NullInt64)
		case profile.FieldName, profile.FieldDisplayName, profile.FieldDisplayNameLc, profile.FieldDescription, profile.FieldChartValues:
			values[i] = new(sql.NullString)
		case profile.FieldCreateTime, profile.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case profile.ForeignKeys[0]: // application_profiles
			values[i] = new(sql.NullInt64)
		case profile.ForeignKeys[1]: // parameter_template_profiles
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (pr *Profile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = uint64(value.Int64)
		case profile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case profile.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pr.DisplayName = value.String
			}
		case profile.FieldDisplayNameLc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name_lc", values[i])
			} else if value.Valid {
				pr.DisplayNameLc = value.String
			}
		case profile.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case profile.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pr.CreateTime = value.Time
			}
		case profile.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pr.UpdateTime = value.Time
			}
		case profile.FieldChartValues:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chart_values", values[i])
			} else if value.Valid {
				pr.ChartValues = value.String
			}
		case profile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field application_profiles", value)
			} else if value.Valid {
				pr.application_profiles = new(uint64)
				*pr.application_profiles = uint64(value.Int64)
			}
		case profile.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field parameter_template_profiles", value)
			} else if value.Valid {
				pr.parameter_template_profiles = new(uint64)
				*pr.parameter_template_profiles = uint64(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Profile.
// This includes values selected through modifiers, order, etc.
func (pr *Profile) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryApplicationFk queries the "application_fk" edge of the Profile entity.
func (pr *Profile) QueryApplicationFk() *ApplicationQuery {
	return NewProfileClient(pr.config).QueryApplicationFk(pr)
}

// QueryDeploymentProfiles queries the "deployment_profiles" edge of the Profile entity.
func (pr *Profile) QueryDeploymentProfiles() *DeploymentProfileQuery {
	return NewProfileClient(pr.config).QueryDeploymentProfiles(pr)
}

// QueryParameterTemplates queries the "parameter_templates" edge of the Profile entity.
func (pr *Profile) QueryParameterTemplates() *ParameterTemplateQuery {
	return NewProfileClient(pr.config).QueryParameterTemplates(pr)
}

// QueryDeploymentRequirements queries the "deployment_requirements" edge of the Profile entity.
func (pr *Profile) QueryDeploymentRequirements() *DeploymentRequirementQuery {
	return NewProfileClient(pr.config).QueryDeploymentRequirements(pr)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profile) Update() *ProfileUpdateOne {
	return NewProfileClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profile) Unwrap() *Profile {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("generated: Profile is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pr.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("display_name_lc=")
	builder.WriteString(pr.DisplayNameLc)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(pr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("chart_values=")
	builder.WriteString(pr.ChartValues)
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile
