// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentrequirement"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/parametertemplate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileMutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (pu *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProfileUpdate) SetName(s string) *ProfileUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableName(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDisplayName sets the "display_name" field.
func (pu *ProfileUpdate) SetDisplayName(s string) *ProfileUpdate {
	pu.mutation.SetDisplayName(s)
	return pu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableDisplayName(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetDisplayName(*s)
	}
	return pu
}

// ClearDisplayName clears the value of the "display_name" field.
func (pu *ProfileUpdate) ClearDisplayName() *ProfileUpdate {
	pu.mutation.ClearDisplayName()
	return pu
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (pu *ProfileUpdate) SetDisplayNameLc(s string) *ProfileUpdate {
	pu.mutation.SetDisplayNameLc(s)
	return pu
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableDisplayNameLc(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetDisplayNameLc(*s)
	}
	return pu
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (pu *ProfileUpdate) ClearDisplayNameLc() *ProfileUpdate {
	pu.mutation.ClearDisplayNameLc()
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProfileUpdate) SetDescription(s string) *ProfileUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableDescription(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProfileUpdate) ClearDescription() *ProfileUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *ProfileUpdate) SetUpdateTime(t time.Time) *ProfileUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetChartValues sets the "chart_values" field.
func (pu *ProfileUpdate) SetChartValues(s string) *ProfileUpdate {
	pu.mutation.SetChartValues(s)
	return pu
}

// SetNillableChartValues sets the "chart_values" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableChartValues(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetChartValues(*s)
	}
	return pu
}

// SetApplicationFkID sets the "application_fk" edge to the Application entity by ID.
func (pu *ProfileUpdate) SetApplicationFkID(id uint64) *ProfileUpdate {
	pu.mutation.SetApplicationFkID(id)
	return pu
}

// SetApplicationFk sets the "application_fk" edge to the Application entity.
func (pu *ProfileUpdate) SetApplicationFk(a *Application) *ProfileUpdate {
	return pu.SetApplicationFkID(a.ID)
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (pu *ProfileUpdate) AddDeploymentProfileIDs(ids ...uint64) *ProfileUpdate {
	pu.mutation.AddDeploymentProfileIDs(ids...)
	return pu
}

// AddDeploymentProfiles adds the "deployment_profiles" edges to the DeploymentProfile entity.
func (pu *ProfileUpdate) AddDeploymentProfiles(d ...*DeploymentProfile) *ProfileUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDeploymentProfileIDs(ids...)
}

// AddParameterTemplateIDs adds the "parameter_templates" edge to the ParameterTemplate entity by IDs.
func (pu *ProfileUpdate) AddParameterTemplateIDs(ids ...uint64) *ProfileUpdate {
	pu.mutation.AddParameterTemplateIDs(ids...)
	return pu
}

// AddParameterTemplates adds the "parameter_templates" edges to the ParameterTemplate entity.
func (pu *ProfileUpdate) AddParameterTemplates(p ...*ParameterTemplate) *ProfileUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddParameterTemplateIDs(ids...)
}

// AddDeploymentRequirementIDs adds the "deployment_requirements" edge to the DeploymentRequirement entity by IDs.
func (pu *ProfileUpdate) AddDeploymentRequirementIDs(ids ...uint64) *ProfileUpdate {
	pu.mutation.AddDeploymentRequirementIDs(ids...)
	return pu
}

// AddDeploymentRequirements adds the "deployment_requirements" edges to the DeploymentRequirement entity.
func (pu *ProfileUpdate) AddDeploymentRequirements(d ...*DeploymentRequirement) *ProfileUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDeploymentRequirementIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (pu *ProfileUpdate) Mutation() *ProfileMutation {
	return pu.mutation
}

// ClearApplicationFk clears the "application_fk" edge to the Application entity.
func (pu *ProfileUpdate) ClearApplicationFk() *ProfileUpdate {
	pu.mutation.ClearApplicationFk()
	return pu
}

// ClearDeploymentProfiles clears all "deployment_profiles" edges to the DeploymentProfile entity.
func (pu *ProfileUpdate) ClearDeploymentProfiles() *ProfileUpdate {
	pu.mutation.ClearDeploymentProfiles()
	return pu
}

// RemoveDeploymentProfileIDs removes the "deployment_profiles" edge to DeploymentProfile entities by IDs.
func (pu *ProfileUpdate) RemoveDeploymentProfileIDs(ids ...uint64) *ProfileUpdate {
	pu.mutation.RemoveDeploymentProfileIDs(ids...)
	return pu
}

// RemoveDeploymentProfiles removes "deployment_profiles" edges to DeploymentProfile entities.
func (pu *ProfileUpdate) RemoveDeploymentProfiles(d ...*DeploymentProfile) *ProfileUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDeploymentProfileIDs(ids...)
}

// ClearParameterTemplates clears all "parameter_templates" edges to the ParameterTemplate entity.
func (pu *ProfileUpdate) ClearParameterTemplates() *ProfileUpdate {
	pu.mutation.ClearParameterTemplates()
	return pu
}

// RemoveParameterTemplateIDs removes the "parameter_templates" edge to ParameterTemplate entities by IDs.
func (pu *ProfileUpdate) RemoveParameterTemplateIDs(ids ...uint64) *ProfileUpdate {
	pu.mutation.RemoveParameterTemplateIDs(ids...)
	return pu
}

// RemoveParameterTemplates removes "parameter_templates" edges to ParameterTemplate entities.
func (pu *ProfileUpdate) RemoveParameterTemplates(p ...*ParameterTemplate) *ProfileUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveParameterTemplateIDs(ids...)
}

// ClearDeploymentRequirements clears all "deployment_requirements" edges to the DeploymentRequirement entity.
func (pu *ProfileUpdate) ClearDeploymentRequirements() *ProfileUpdate {
	pu.mutation.ClearDeploymentRequirements()
	return pu
}

// RemoveDeploymentRequirementIDs removes the "deployment_requirements" edge to DeploymentRequirement entities by IDs.
func (pu *ProfileUpdate) RemoveDeploymentRequirementIDs(ids ...uint64) *ProfileUpdate {
	pu.mutation.RemoveDeploymentRequirementIDs(ids...)
	return pu
}

// RemoveDeploymentRequirements removes "deployment_requirements" edges to DeploymentRequirement entities.
func (pu *ProfileUpdate) RemoveDeploymentRequirements(d ...*DeploymentRequirement) *ProfileUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDeploymentRequirementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfileUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfileUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfileUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := profile.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProfileUpdate) check() error {
	if _, ok := pu.mutation.ApplicationFkID(); pu.mutation.ApplicationFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Profile.application_fk"`)
	}
	return nil
}

func (pu *ProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(profile.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.DisplayName(); ok {
		_spec.SetField(profile.FieldDisplayName, field.TypeString, value)
	}
	if pu.mutation.DisplayNameCleared() {
		_spec.ClearField(profile.FieldDisplayName, field.TypeString)
	}
	if value, ok := pu.mutation.DisplayNameLc(); ok {
		_spec.SetField(profile.FieldDisplayNameLc, field.TypeString, value)
	}
	if pu.mutation.DisplayNameLcCleared() {
		_spec.ClearField(profile.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(profile.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(profile.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(profile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.ChartValues(); ok {
		_spec.SetField(profile.FieldChartValues, field.TypeString, value)
	}
	if pu.mutation.ApplicationFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.ApplicationFkTable,
			Columns: []string{profile.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ApplicationFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.ApplicationFkTable,
			Columns: []string{profile.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.DeploymentProfilesTable,
			Columns: profile.DeploymentProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDeploymentProfilesIDs(); len(nodes) > 0 && !pu.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.DeploymentProfilesTable,
			Columns: profile.DeploymentProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DeploymentProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.DeploymentProfilesTable,
			Columns: profile.DeploymentProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ParameterTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.ParameterTemplatesTable,
			Columns: []string{profile.ParameterTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedParameterTemplatesIDs(); len(nodes) > 0 && !pu.mutation.ParameterTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.ParameterTemplatesTable,
			Columns: []string{profile.ParameterTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParameterTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.ParameterTemplatesTable,
			Columns: []string{profile.ParameterTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DeploymentRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.DeploymentRequirementsTable,
			Columns: []string{profile.DeploymentRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDeploymentRequirementsIDs(); len(nodes) > 0 && !pu.mutation.DeploymentRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.DeploymentRequirementsTable,
			Columns: []string{profile.DeploymentRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DeploymentRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.DeploymentRequirementsTable,
			Columns: []string{profile.DeploymentRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileMutation
}

// SetName sets the "name" field.
func (puo *ProfileUpdateOne) SetName(s string) *ProfileUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableName(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDisplayName sets the "display_name" field.
func (puo *ProfileUpdateOne) SetDisplayName(s string) *ProfileUpdateOne {
	puo.mutation.SetDisplayName(s)
	return puo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableDisplayName(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetDisplayName(*s)
	}
	return puo
}

// ClearDisplayName clears the value of the "display_name" field.
func (puo *ProfileUpdateOne) ClearDisplayName() *ProfileUpdateOne {
	puo.mutation.ClearDisplayName()
	return puo
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (puo *ProfileUpdateOne) SetDisplayNameLc(s string) *ProfileUpdateOne {
	puo.mutation.SetDisplayNameLc(s)
	return puo
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableDisplayNameLc(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetDisplayNameLc(*s)
	}
	return puo
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (puo *ProfileUpdateOne) ClearDisplayNameLc() *ProfileUpdateOne {
	puo.mutation.ClearDisplayNameLc()
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProfileUpdateOne) SetDescription(s string) *ProfileUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableDescription(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProfileUpdateOne) ClearDescription() *ProfileUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetUpdateTime sets the "update_time" field.
func (puo *ProfileUpdateOne) SetUpdateTime(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetChartValues sets the "chart_values" field.
func (puo *ProfileUpdateOne) SetChartValues(s string) *ProfileUpdateOne {
	puo.mutation.SetChartValues(s)
	return puo
}

// SetNillableChartValues sets the "chart_values" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableChartValues(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetChartValues(*s)
	}
	return puo
}

// SetApplicationFkID sets the "application_fk" edge to the Application entity by ID.
func (puo *ProfileUpdateOne) SetApplicationFkID(id uint64) *ProfileUpdateOne {
	puo.mutation.SetApplicationFkID(id)
	return puo
}

// SetApplicationFk sets the "application_fk" edge to the Application entity.
func (puo *ProfileUpdateOne) SetApplicationFk(a *Application) *ProfileUpdateOne {
	return puo.SetApplicationFkID(a.ID)
}

// AddDeploymentProfileIDs adds the "deployment_profiles" edge to the DeploymentProfile entity by IDs.
func (puo *ProfileUpdateOne) AddDeploymentProfileIDs(ids ...uint64) *ProfileUpdateOne {
	puo.mutation.AddDeploymentProfileIDs(ids...)
	return puo
}

// AddDeploymentProfiles adds the "deployment_profiles" edges to the DeploymentProfile entity.
func (puo *ProfileUpdateOne) AddDeploymentProfiles(d ...*DeploymentProfile) *ProfileUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDeploymentProfileIDs(ids...)
}

// AddParameterTemplateIDs adds the "parameter_templates" edge to the ParameterTemplate entity by IDs.
func (puo *ProfileUpdateOne) AddParameterTemplateIDs(ids ...uint64) *ProfileUpdateOne {
	puo.mutation.AddParameterTemplateIDs(ids...)
	return puo
}

// AddParameterTemplates adds the "parameter_templates" edges to the ParameterTemplate entity.
func (puo *ProfileUpdateOne) AddParameterTemplates(p ...*ParameterTemplate) *ProfileUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddParameterTemplateIDs(ids...)
}

// AddDeploymentRequirementIDs adds the "deployment_requirements" edge to the DeploymentRequirement entity by IDs.
func (puo *ProfileUpdateOne) AddDeploymentRequirementIDs(ids ...uint64) *ProfileUpdateOne {
	puo.mutation.AddDeploymentRequirementIDs(ids...)
	return puo
}

// AddDeploymentRequirements adds the "deployment_requirements" edges to the DeploymentRequirement entity.
func (puo *ProfileUpdateOne) AddDeploymentRequirements(d ...*DeploymentRequirement) *ProfileUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDeploymentRequirementIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (puo *ProfileUpdateOne) Mutation() *ProfileMutation {
	return puo.mutation
}

// ClearApplicationFk clears the "application_fk" edge to the Application entity.
func (puo *ProfileUpdateOne) ClearApplicationFk() *ProfileUpdateOne {
	puo.mutation.ClearApplicationFk()
	return puo
}

// ClearDeploymentProfiles clears all "deployment_profiles" edges to the DeploymentProfile entity.
func (puo *ProfileUpdateOne) ClearDeploymentProfiles() *ProfileUpdateOne {
	puo.mutation.ClearDeploymentProfiles()
	return puo
}

// RemoveDeploymentProfileIDs removes the "deployment_profiles" edge to DeploymentProfile entities by IDs.
func (puo *ProfileUpdateOne) RemoveDeploymentProfileIDs(ids ...uint64) *ProfileUpdateOne {
	puo.mutation.RemoveDeploymentProfileIDs(ids...)
	return puo
}

// RemoveDeploymentProfiles removes "deployment_profiles" edges to DeploymentProfile entities.
func (puo *ProfileUpdateOne) RemoveDeploymentProfiles(d ...*DeploymentProfile) *ProfileUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDeploymentProfileIDs(ids...)
}

// ClearParameterTemplates clears all "parameter_templates" edges to the ParameterTemplate entity.
func (puo *ProfileUpdateOne) ClearParameterTemplates() *ProfileUpdateOne {
	puo.mutation.ClearParameterTemplates()
	return puo
}

// RemoveParameterTemplateIDs removes the "parameter_templates" edge to ParameterTemplate entities by IDs.
func (puo *ProfileUpdateOne) RemoveParameterTemplateIDs(ids ...uint64) *ProfileUpdateOne {
	puo.mutation.RemoveParameterTemplateIDs(ids...)
	return puo
}

// RemoveParameterTemplates removes "parameter_templates" edges to ParameterTemplate entities.
func (puo *ProfileUpdateOne) RemoveParameterTemplates(p ...*ParameterTemplate) *ProfileUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveParameterTemplateIDs(ids...)
}

// ClearDeploymentRequirements clears all "deployment_requirements" edges to the DeploymentRequirement entity.
func (puo *ProfileUpdateOne) ClearDeploymentRequirements() *ProfileUpdateOne {
	puo.mutation.ClearDeploymentRequirements()
	return puo
}

// RemoveDeploymentRequirementIDs removes the "deployment_requirements" edge to DeploymentRequirement entities by IDs.
func (puo *ProfileUpdateOne) RemoveDeploymentRequirementIDs(ids ...uint64) *ProfileUpdateOne {
	puo.mutation.RemoveDeploymentRequirementIDs(ids...)
	return puo
}

// RemoveDeploymentRequirements removes "deployment_requirements" edges to DeploymentRequirement entities.
func (puo *ProfileUpdateOne) RemoveDeploymentRequirements(d ...*DeploymentRequirement) *ProfileUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDeploymentRequirementIDs(ids...)
}

// Where appends a list predicates to the ProfileUpdate builder.
func (puo *ProfileUpdateOne) Where(ps ...predicate.Profile) *ProfileUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profile entity.
func (puo *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfileUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := profile.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProfileUpdateOne) check() error {
	if _, ok := puo.mutation.ApplicationFkID(); puo.mutation.ApplicationFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Profile.application_fk"`)
	}
	return nil
}

func (puo *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(profile.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.DisplayName(); ok {
		_spec.SetField(profile.FieldDisplayName, field.TypeString, value)
	}
	if puo.mutation.DisplayNameCleared() {
		_spec.ClearField(profile.FieldDisplayName, field.TypeString)
	}
	if value, ok := puo.mutation.DisplayNameLc(); ok {
		_spec.SetField(profile.FieldDisplayNameLc, field.TypeString, value)
	}
	if puo.mutation.DisplayNameLcCleared() {
		_spec.ClearField(profile.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(profile.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(profile.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(profile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.ChartValues(); ok {
		_spec.SetField(profile.FieldChartValues, field.TypeString, value)
	}
	if puo.mutation.ApplicationFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.ApplicationFkTable,
			Columns: []string{profile.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ApplicationFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.ApplicationFkTable,
			Columns: []string{profile.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.DeploymentProfilesTable,
			Columns: profile.DeploymentProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDeploymentProfilesIDs(); len(nodes) > 0 && !puo.mutation.DeploymentProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.DeploymentProfilesTable,
			Columns: profile.DeploymentProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DeploymentProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profile.DeploymentProfilesTable,
			Columns: profile.DeploymentProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ParameterTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.ParameterTemplatesTable,
			Columns: []string{profile.ParameterTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedParameterTemplatesIDs(); len(nodes) > 0 && !puo.mutation.ParameterTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.ParameterTemplatesTable,
			Columns: []string{profile.ParameterTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParameterTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.ParameterTemplatesTable,
			Columns: []string{profile.ParameterTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parametertemplate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DeploymentRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.DeploymentRequirementsTable,
			Columns: []string{profile.DeploymentRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDeploymentRequirementsIDs(); len(nodes) > 0 && !puo.mutation.DeploymentRequirementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.DeploymentRequirementsTable,
			Columns: []string{profile.DeploymentRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DeploymentRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.DeploymentRequirementsTable,
			Columns: []string{profile.DeploymentRequirementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentrequirement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Profile{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
