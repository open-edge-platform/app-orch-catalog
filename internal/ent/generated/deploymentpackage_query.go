// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationnamespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifact"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifactreference"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/extension"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// DeploymentPackageQuery is the builder for querying DeploymentPackage entities.
type DeploymentPackageQuery struct {
	config
	ctx                         *QueryContext
	order                       []deploymentpackage.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.DeploymentPackage
	withDeploymentProfiles      *DeploymentProfileQuery
	withApplications            *ApplicationQuery
	withIcon                    *ArtifactQuery
	withThumbnail               *ArtifactQuery
	withDefaultProfile          *DeploymentProfileQuery
	withApplicationDependencies *ApplicationDependencyQuery
	withApplicationNamespaces   *ApplicationNamespaceQuery
	withNamespaces              *NamespaceQuery
	withExtensions              *ExtensionQuery
	withArtifacts               *ArtifactReferenceQuery
	withFKs                     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeploymentPackageQuery builder.
func (dpq *DeploymentPackageQuery) Where(ps ...predicate.DeploymentPackage) *DeploymentPackageQuery {
	dpq.predicates = append(dpq.predicates, ps...)
	return dpq
}

// Limit the number of records to be returned by this query.
func (dpq *DeploymentPackageQuery) Limit(limit int) *DeploymentPackageQuery {
	dpq.ctx.Limit = &limit
	return dpq
}

// Offset to start from.
func (dpq *DeploymentPackageQuery) Offset(offset int) *DeploymentPackageQuery {
	dpq.ctx.Offset = &offset
	return dpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dpq *DeploymentPackageQuery) Unique(unique bool) *DeploymentPackageQuery {
	dpq.ctx.Unique = &unique
	return dpq
}

// Order specifies how the records should be ordered.
func (dpq *DeploymentPackageQuery) Order(o ...deploymentpackage.OrderOption) *DeploymentPackageQuery {
	dpq.order = append(dpq.order, o...)
	return dpq
}

// QueryDeploymentProfiles chains the current query on the "deployment_profiles" edge.
func (dpq *DeploymentPackageQuery) QueryDeploymentProfiles() *DeploymentProfileQuery {
	query := (&DeploymentProfileClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(deploymentprofile.Table, deploymentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.DeploymentProfilesTable, deploymentpackage.DeploymentProfilesColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApplications chains the current query on the "applications" edge.
func (dpq *DeploymentPackageQuery) QueryApplications() *ApplicationQuery {
	query := (&ApplicationClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deploymentpackage.ApplicationsTable, deploymentpackage.ApplicationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIcon chains the current query on the "icon" edge.
func (dpq *DeploymentPackageQuery) QueryIcon() *ArtifactQuery {
	query := (&ArtifactClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deploymentpackage.IconTable, deploymentpackage.IconPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryThumbnail chains the current query on the "thumbnail" edge.
func (dpq *DeploymentPackageQuery) QueryThumbnail() *ArtifactQuery {
	query := (&ArtifactClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deploymentpackage.ThumbnailTable, deploymentpackage.ThumbnailPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDefaultProfile chains the current query on the "default_profile" edge.
func (dpq *DeploymentPackageQuery) QueryDefaultProfile() *DeploymentProfileQuery {
	query := (&DeploymentProfileClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(deploymentprofile.Table, deploymentprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deploymentpackage.DefaultProfileTable, deploymentpackage.DefaultProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApplicationDependencies chains the current query on the "application_dependencies" edge.
func (dpq *DeploymentPackageQuery) QueryApplicationDependencies() *ApplicationDependencyQuery {
	query := (&ApplicationDependencyClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(applicationdependency.Table, applicationdependency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.ApplicationDependenciesTable, deploymentpackage.ApplicationDependenciesColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApplicationNamespaces chains the current query on the "application_namespaces" edge.
func (dpq *DeploymentPackageQuery) QueryApplicationNamespaces() *ApplicationNamespaceQuery {
	query := (&ApplicationNamespaceClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(applicationnamespace.Table, applicationnamespace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.ApplicationNamespacesTable, deploymentpackage.ApplicationNamespacesColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNamespaces chains the current query on the "namespaces" edge.
func (dpq *DeploymentPackageQuery) QueryNamespaces() *NamespaceQuery {
	query := (&NamespaceClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(namespace.Table, namespace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.NamespacesTable, deploymentpackage.NamespacesColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExtensions chains the current query on the "extensions" edge.
func (dpq *DeploymentPackageQuery) QueryExtensions() *ExtensionQuery {
	query := (&ExtensionClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(extension.Table, extension.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.ExtensionsTable, deploymentpackage.ExtensionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArtifacts chains the current query on the "artifacts" edge.
func (dpq *DeploymentPackageQuery) QueryArtifacts() *ArtifactReferenceQuery {
	query := (&ArtifactReferenceClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentpackage.Table, deploymentpackage.FieldID, selector),
			sqlgraph.To(artifactreference.Table, artifactreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deploymentpackage.ArtifactsTable, deploymentpackage.ArtifactsColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeploymentPackage entity from the query.
// Returns a *NotFoundError when no DeploymentPackage was found.
func (dpq *DeploymentPackageQuery) First(ctx context.Context) (*DeploymentPackage, error) {
	nodes, err := dpq.Limit(1).All(setContextOp(ctx, dpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deploymentpackage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dpq *DeploymentPackageQuery) FirstX(ctx context.Context) *DeploymentPackage {
	node, err := dpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeploymentPackage ID from the query.
// Returns a *NotFoundError when no DeploymentPackage ID was found.
func (dpq *DeploymentPackageQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = dpq.Limit(1).IDs(setContextOp(ctx, dpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deploymentpackage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dpq *DeploymentPackageQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := dpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeploymentPackage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeploymentPackage entity is found.
// Returns a *NotFoundError when no DeploymentPackage entities are found.
func (dpq *DeploymentPackageQuery) Only(ctx context.Context) (*DeploymentPackage, error) {
	nodes, err := dpq.Limit(2).All(setContextOp(ctx, dpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deploymentpackage.Label}
	default:
		return nil, &NotSingularError{deploymentpackage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dpq *DeploymentPackageQuery) OnlyX(ctx context.Context) *DeploymentPackage {
	node, err := dpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeploymentPackage ID in the query.
// Returns a *NotSingularError when more than one DeploymentPackage ID is found.
// Returns a *NotFoundError when no entities are found.
func (dpq *DeploymentPackageQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = dpq.Limit(2).IDs(setContextOp(ctx, dpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deploymentpackage.Label}
	default:
		err = &NotSingularError{deploymentpackage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dpq *DeploymentPackageQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := dpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeploymentPackages.
func (dpq *DeploymentPackageQuery) All(ctx context.Context) ([]*DeploymentPackage, error) {
	ctx = setContextOp(ctx, dpq.ctx, "All")
	if err := dpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeploymentPackage, *DeploymentPackageQuery]()
	return withInterceptors[[]*DeploymentPackage](ctx, dpq, qr, dpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dpq *DeploymentPackageQuery) AllX(ctx context.Context) []*DeploymentPackage {
	nodes, err := dpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeploymentPackage IDs.
func (dpq *DeploymentPackageQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if dpq.ctx.Unique == nil && dpq.path != nil {
		dpq.Unique(true)
	}
	ctx = setContextOp(ctx, dpq.ctx, "IDs")
	if err = dpq.Select(deploymentpackage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dpq *DeploymentPackageQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := dpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dpq *DeploymentPackageQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dpq.ctx, "Count")
	if err := dpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dpq, querierCount[*DeploymentPackageQuery](), dpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dpq *DeploymentPackageQuery) CountX(ctx context.Context) int {
	count, err := dpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dpq *DeploymentPackageQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dpq.ctx, "Exist")
	switch _, err := dpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dpq *DeploymentPackageQuery) ExistX(ctx context.Context) bool {
	exist, err := dpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeploymentPackageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dpq *DeploymentPackageQuery) Clone() *DeploymentPackageQuery {
	if dpq == nil {
		return nil
	}
	return &DeploymentPackageQuery{
		config:                      dpq.config,
		ctx:                         dpq.ctx.Clone(),
		order:                       append([]deploymentpackage.OrderOption{}, dpq.order...),
		inters:                      append([]Interceptor{}, dpq.inters...),
		predicates:                  append([]predicate.DeploymentPackage{}, dpq.predicates...),
		withDeploymentProfiles:      dpq.withDeploymentProfiles.Clone(),
		withApplications:            dpq.withApplications.Clone(),
		withIcon:                    dpq.withIcon.Clone(),
		withThumbnail:               dpq.withThumbnail.Clone(),
		withDefaultProfile:          dpq.withDefaultProfile.Clone(),
		withApplicationDependencies: dpq.withApplicationDependencies.Clone(),
		withApplicationNamespaces:   dpq.withApplicationNamespaces.Clone(),
		withNamespaces:              dpq.withNamespaces.Clone(),
		withExtensions:              dpq.withExtensions.Clone(),
		withArtifacts:               dpq.withArtifacts.Clone(),
		// clone intermediate query.
		sql:  dpq.sql.Clone(),
		path: dpq.path,
	}
}

// WithDeploymentProfiles tells the query-builder to eager-load the nodes that are connected to
// the "deployment_profiles" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithDeploymentProfiles(opts ...func(*DeploymentProfileQuery)) *DeploymentPackageQuery {
	query := (&DeploymentProfileClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withDeploymentProfiles = query
	return dpq
}

// WithApplications tells the query-builder to eager-load the nodes that are connected to
// the "applications" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithApplications(opts ...func(*ApplicationQuery)) *DeploymentPackageQuery {
	query := (&ApplicationClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withApplications = query
	return dpq
}

// WithIcon tells the query-builder to eager-load the nodes that are connected to
// the "icon" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithIcon(opts ...func(*ArtifactQuery)) *DeploymentPackageQuery {
	query := (&ArtifactClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withIcon = query
	return dpq
}

// WithThumbnail tells the query-builder to eager-load the nodes that are connected to
// the "thumbnail" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithThumbnail(opts ...func(*ArtifactQuery)) *DeploymentPackageQuery {
	query := (&ArtifactClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withThumbnail = query
	return dpq
}

// WithDefaultProfile tells the query-builder to eager-load the nodes that are connected to
// the "default_profile" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithDefaultProfile(opts ...func(*DeploymentProfileQuery)) *DeploymentPackageQuery {
	query := (&DeploymentProfileClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withDefaultProfile = query
	return dpq
}

// WithApplicationDependencies tells the query-builder to eager-load the nodes that are connected to
// the "application_dependencies" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithApplicationDependencies(opts ...func(*ApplicationDependencyQuery)) *DeploymentPackageQuery {
	query := (&ApplicationDependencyClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withApplicationDependencies = query
	return dpq
}

// WithApplicationNamespaces tells the query-builder to eager-load the nodes that are connected to
// the "application_namespaces" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithApplicationNamespaces(opts ...func(*ApplicationNamespaceQuery)) *DeploymentPackageQuery {
	query := (&ApplicationNamespaceClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withApplicationNamespaces = query
	return dpq
}

// WithNamespaces tells the query-builder to eager-load the nodes that are connected to
// the "namespaces" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithNamespaces(opts ...func(*NamespaceQuery)) *DeploymentPackageQuery {
	query := (&NamespaceClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withNamespaces = query
	return dpq
}

// WithExtensions tells the query-builder to eager-load the nodes that are connected to
// the "extensions" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithExtensions(opts ...func(*ExtensionQuery)) *DeploymentPackageQuery {
	query := (&ExtensionClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withExtensions = query
	return dpq
}

// WithArtifacts tells the query-builder to eager-load the nodes that are connected to
// the "artifacts" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentPackageQuery) WithArtifacts(opts ...func(*ArtifactReferenceQuery)) *DeploymentPackageQuery {
	query := (&ArtifactReferenceClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withArtifacts = query
	return dpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeploymentPackage.Query().
//		GroupBy(deploymentpackage.FieldName).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (dpq *DeploymentPackageQuery) GroupBy(field string, fields ...string) *DeploymentPackageGroupBy {
	dpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeploymentPackageGroupBy{build: dpq}
	grbuild.flds = &dpq.ctx.Fields
	grbuild.label = deploymentpackage.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.DeploymentPackage.Query().
//		Select(deploymentpackage.FieldName).
//		Scan(ctx, &v)
func (dpq *DeploymentPackageQuery) Select(fields ...string) *DeploymentPackageSelect {
	dpq.ctx.Fields = append(dpq.ctx.Fields, fields...)
	sbuild := &DeploymentPackageSelect{DeploymentPackageQuery: dpq}
	sbuild.label = deploymentpackage.Label
	sbuild.flds, sbuild.scan = &dpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeploymentPackageSelect configured with the given aggregations.
func (dpq *DeploymentPackageQuery) Aggregate(fns ...AggregateFunc) *DeploymentPackageSelect {
	return dpq.Select().Aggregate(fns...)
}

func (dpq *DeploymentPackageQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dpq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dpq); err != nil {
				return err
			}
		}
	}
	for _, f := range dpq.ctx.Fields {
		if !deploymentpackage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if dpq.path != nil {
		prev, err := dpq.path(ctx)
		if err != nil {
			return err
		}
		dpq.sql = prev
	}
	return nil
}

func (dpq *DeploymentPackageQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeploymentPackage, error) {
	var (
		nodes       = []*DeploymentPackage{}
		withFKs     = dpq.withFKs
		_spec       = dpq.querySpec()
		loadedTypes = [10]bool{
			dpq.withDeploymentProfiles != nil,
			dpq.withApplications != nil,
			dpq.withIcon != nil,
			dpq.withThumbnail != nil,
			dpq.withDefaultProfile != nil,
			dpq.withApplicationDependencies != nil,
			dpq.withApplicationNamespaces != nil,
			dpq.withNamespaces != nil,
			dpq.withExtensions != nil,
			dpq.withArtifacts != nil,
		}
	)
	if dpq.withDefaultProfile != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentpackage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeploymentPackage).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeploymentPackage{config: dpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dpq.withDeploymentProfiles; query != nil {
		if err := dpq.loadDeploymentProfiles(ctx, query, nodes,
			func(n *DeploymentPackage) { n.Edges.DeploymentProfiles = []*DeploymentProfile{} },
			func(n *DeploymentPackage, e *DeploymentProfile) {
				n.Edges.DeploymentProfiles = append(n.Edges.DeploymentProfiles, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := dpq.withApplications; query != nil {
		if err := dpq.loadApplications(ctx, query, nodes,
			func(n *DeploymentPackage) { n.Edges.Applications = []*Application{} },
			func(n *DeploymentPackage, e *Application) { n.Edges.Applications = append(n.Edges.Applications, e) }); err != nil {
			return nil, err
		}
	}
	if query := dpq.withIcon; query != nil {
		if err := dpq.loadIcon(ctx, query, nodes,
			func(n *DeploymentPackage) { n.Edges.Icon = []*Artifact{} },
			func(n *DeploymentPackage, e *Artifact) { n.Edges.Icon = append(n.Edges.Icon, e) }); err != nil {
			return nil, err
		}
	}
	if query := dpq.withThumbnail; query != nil {
		if err := dpq.loadThumbnail(ctx, query, nodes,
			func(n *DeploymentPackage) { n.Edges.Thumbnail = []*Artifact{} },
			func(n *DeploymentPackage, e *Artifact) { n.Edges.Thumbnail = append(n.Edges.Thumbnail, e) }); err != nil {
			return nil, err
		}
	}
	if query := dpq.withDefaultProfile; query != nil {
		if err := dpq.loadDefaultProfile(ctx, query, nodes, nil,
			func(n *DeploymentPackage, e *DeploymentProfile) { n.Edges.DefaultProfile = e }); err != nil {
			return nil, err
		}
	}
	if query := dpq.withApplicationDependencies; query != nil {
		if err := dpq.loadApplicationDependencies(ctx, query, nodes,
			func(n *DeploymentPackage) { n.Edges.ApplicationDependencies = []*ApplicationDependency{} },
			func(n *DeploymentPackage, e *ApplicationDependency) {
				n.Edges.ApplicationDependencies = append(n.Edges.ApplicationDependencies, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := dpq.withApplicationNamespaces; query != nil {
		if err := dpq.loadApplicationNamespaces(ctx, query, nodes,
			func(n *DeploymentPackage) { n.Edges.ApplicationNamespaces = []*ApplicationNamespace{} },
			func(n *DeploymentPackage, e *ApplicationNamespace) {
				n.Edges.ApplicationNamespaces = append(n.Edges.ApplicationNamespaces, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := dpq.withNamespaces; query != nil {
		if err := dpq.loadNamespaces(ctx, query, nodes,
			func(n *DeploymentPackage) { n.Edges.Namespaces = []*Namespace{} },
			func(n *DeploymentPackage, e *Namespace) { n.Edges.Namespaces = append(n.Edges.Namespaces, e) }); err != nil {
			return nil, err
		}
	}
	if query := dpq.withExtensions; query != nil {
		if err := dpq.loadExtensions(ctx, query, nodes,
			func(n *DeploymentPackage) { n.Edges.Extensions = []*Extension{} },
			func(n *DeploymentPackage, e *Extension) { n.Edges.Extensions = append(n.Edges.Extensions, e) }); err != nil {
			return nil, err
		}
	}
	if query := dpq.withArtifacts; query != nil {
		if err := dpq.loadArtifacts(ctx, query, nodes,
			func(n *DeploymentPackage) { n.Edges.Artifacts = []*ArtifactReference{} },
			func(n *DeploymentPackage, e *ArtifactReference) { n.Edges.Artifacts = append(n.Edges.Artifacts, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dpq *DeploymentPackageQuery) loadDeploymentProfiles(ctx context.Context, query *DeploymentProfileQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *DeploymentProfile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*DeploymentPackage)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DeploymentProfile(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(deploymentpackage.DeploymentProfilesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.deployment_package_deployment_profiles
		if fk == nil {
			return fmt.Errorf(`foreign-key "deployment_package_deployment_profiles" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "deployment_package_deployment_profiles" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dpq *DeploymentPackageQuery) loadApplications(ctx context.Context, query *ApplicationQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *Application)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*DeploymentPackage)
	nids := make(map[uint64]map[*DeploymentPackage]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(deploymentpackage.ApplicationsTable)
		s.Join(joinT).On(s.C(application.FieldID), joinT.C(deploymentpackage.ApplicationsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(deploymentpackage.ApplicationsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(deploymentpackage.ApplicationsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*DeploymentPackage]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Application](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "applications" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dpq *DeploymentPackageQuery) loadIcon(ctx context.Context, query *ArtifactQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *Artifact)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*DeploymentPackage)
	nids := make(map[uint64]map[*DeploymentPackage]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(deploymentpackage.IconTable)
		s.Join(joinT).On(s.C(artifact.FieldID), joinT.C(deploymentpackage.IconPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(deploymentpackage.IconPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(deploymentpackage.IconPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*DeploymentPackage]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Artifact](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "icon" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dpq *DeploymentPackageQuery) loadThumbnail(ctx context.Context, query *ArtifactQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *Artifact)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*DeploymentPackage)
	nids := make(map[uint64]map[*DeploymentPackage]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(deploymentpackage.ThumbnailTable)
		s.Join(joinT).On(s.C(artifact.FieldID), joinT.C(deploymentpackage.ThumbnailPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(deploymentpackage.ThumbnailPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(deploymentpackage.ThumbnailPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*DeploymentPackage]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Artifact](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "thumbnail" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dpq *DeploymentPackageQuery) loadDefaultProfile(ctx context.Context, query *DeploymentProfileQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *DeploymentProfile)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*DeploymentPackage)
	for i := range nodes {
		if nodes[i].deployment_package_default_profile == nil {
			continue
		}
		fk := *nodes[i].deployment_package_default_profile
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deploymentprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "deployment_package_default_profile" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dpq *DeploymentPackageQuery) loadApplicationDependencies(ctx context.Context, query *ApplicationDependencyQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *ApplicationDependency)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*DeploymentPackage)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ApplicationDependency(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(deploymentpackage.ApplicationDependenciesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.deployment_package_application_dependencies
		if fk == nil {
			return fmt.Errorf(`foreign-key "deployment_package_application_dependencies" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "deployment_package_application_dependencies" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dpq *DeploymentPackageQuery) loadApplicationNamespaces(ctx context.Context, query *ApplicationNamespaceQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *ApplicationNamespace)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*DeploymentPackage)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ApplicationNamespace(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(deploymentpackage.ApplicationNamespacesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.deployment_package_application_namespaces
		if fk == nil {
			return fmt.Errorf(`foreign-key "deployment_package_application_namespaces" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "deployment_package_application_namespaces" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dpq *DeploymentPackageQuery) loadNamespaces(ctx context.Context, query *NamespaceQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *Namespace)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*DeploymentPackage)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(deploymentpackage.NamespacesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.deployment_package_namespaces
		if fk == nil {
			return fmt.Errorf(`foreign-key "deployment_package_namespaces" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "deployment_package_namespaces" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dpq *DeploymentPackageQuery) loadExtensions(ctx context.Context, query *ExtensionQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *Extension)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*DeploymentPackage)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Extension(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(deploymentpackage.ExtensionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.deployment_package_extensions
		if fk == nil {
			return fmt.Errorf(`foreign-key "deployment_package_extensions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "deployment_package_extensions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (dpq *DeploymentPackageQuery) loadArtifacts(ctx context.Context, query *ArtifactReferenceQuery, nodes []*DeploymentPackage, init func(*DeploymentPackage), assign func(*DeploymentPackage, *ArtifactReference)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*DeploymentPackage)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ArtifactReference(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(deploymentpackage.ArtifactsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.deployment_package_artifacts
		if fk == nil {
			return fmt.Errorf(`foreign-key "deployment_package_artifacts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "deployment_package_artifacts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (dpq *DeploymentPackageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dpq.querySpec()
	_spec.Node.Columns = dpq.ctx.Fields
	if len(dpq.ctx.Fields) > 0 {
		_spec.Unique = dpq.ctx.Unique != nil && *dpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dpq.driver, _spec)
}

func (dpq *DeploymentPackageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deploymentpackage.Table, deploymentpackage.Columns, sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64))
	_spec.From = dpq.sql
	if unique := dpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dpq.path != nil {
		_spec.Unique = true
	}
	if fields := dpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentpackage.FieldID)
		for i := range fields {
			if fields[i] != deploymentpackage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dpq *DeploymentPackageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dpq.driver.Dialect())
	t1 := builder.Table(deploymentpackage.Table)
	columns := dpq.ctx.Fields
	if len(columns) == 0 {
		columns = deploymentpackage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dpq.sql != nil {
		selector = dpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dpq.ctx.Unique != nil && *dpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dpq.predicates {
		p(selector)
	}
	for _, p := range dpq.order {
		p(selector)
	}
	if offset := dpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DeploymentPackageGroupBy is the group-by builder for DeploymentPackage entities.
type DeploymentPackageGroupBy struct {
	selector
	build *DeploymentPackageQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dpgb *DeploymentPackageGroupBy) Aggregate(fns ...AggregateFunc) *DeploymentPackageGroupBy {
	dpgb.fns = append(dpgb.fns, fns...)
	return dpgb
}

// Scan applies the selector query and scans the result into the given value.
func (dpgb *DeploymentPackageGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dpgb.build.ctx, "GroupBy")
	if err := dpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeploymentPackageQuery, *DeploymentPackageGroupBy](ctx, dpgb.build, dpgb, dpgb.build.inters, v)
}

func (dpgb *DeploymentPackageGroupBy) sqlScan(ctx context.Context, root *DeploymentPackageQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dpgb.fns))
	for _, fn := range dpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dpgb.flds)+len(dpgb.fns))
		for _, f := range *dpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeploymentPackageSelect is the builder for selecting fields of DeploymentPackage entities.
type DeploymentPackageSelect struct {
	*DeploymentPackageQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dps *DeploymentPackageSelect) Aggregate(fns ...AggregateFunc) *DeploymentPackageSelect {
	dps.fns = append(dps.fns, fns...)
	return dps
}

// Scan applies the selector query and scans the result into the given value.
func (dps *DeploymentPackageSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dps.ctx, "Select")
	if err := dps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeploymentPackageQuery, *DeploymentPackageSelect](ctx, dps.DeploymentPackageQuery, dps, dps.inters, v)
}

func (dps *DeploymentPackageSelect) sqlScan(ctx context.Context, root *DeploymentPackageQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dps.fns))
	for _, fn := range dps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
