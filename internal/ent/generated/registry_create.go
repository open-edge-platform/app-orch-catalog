// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/registry"
)

// RegistryCreate is the builder for creating a Registry entity.
type RegistryCreate struct {
	config
	mutation *RegistryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RegistryCreate) SetName(s string) *RegistryCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDisplayName sets the "display_name" field.
func (rc *RegistryCreate) SetDisplayName(s string) *RegistryCreate {
	rc.mutation.SetDisplayName(s)
	return rc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableDisplayName(s *string) *RegistryCreate {
	if s != nil {
		rc.SetDisplayName(*s)
	}
	return rc
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (rc *RegistryCreate) SetDisplayNameLc(s string) *RegistryCreate {
	rc.mutation.SetDisplayNameLc(s)
	return rc
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableDisplayNameLc(s *string) *RegistryCreate {
	if s != nil {
		rc.SetDisplayNameLc(*s)
	}
	return rc
}

// SetDescription sets the "description" field.
func (rc *RegistryCreate) SetDescription(s string) *RegistryCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableDescription(s *string) *RegistryCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetCreateTime sets the "create_time" field.
func (rc *RegistryCreate) SetCreateTime(t time.Time) *RegistryCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableCreateTime(t *time.Time) *RegistryCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *RegistryCreate) SetUpdateTime(t time.Time) *RegistryCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableUpdateTime(t *time.Time) *RegistryCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetProjectUUID sets the "project_uuid" field.
func (rc *RegistryCreate) SetProjectUUID(s string) *RegistryCreate {
	rc.mutation.SetProjectUUID(s)
	return rc
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableProjectUUID(s *string) *RegistryCreate {
	if s != nil {
		rc.SetProjectUUID(*s)
	}
	return rc
}

// SetAuthToken sets the "auth_token" field.
func (rc *RegistryCreate) SetAuthToken(s string) *RegistryCreate {
	rc.mutation.SetAuthToken(s)
	return rc
}

// SetNillableAuthToken sets the "auth_token" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableAuthToken(s *string) *RegistryCreate {
	if s != nil {
		rc.SetAuthToken(*s)
	}
	return rc
}

// SetType sets the "type" field.
func (rc *RegistryCreate) SetType(s string) *RegistryCreate {
	rc.mutation.SetType(s)
	return rc
}

// SetAPIType sets the "api_type" field.
func (rc *RegistryCreate) SetAPIType(s string) *RegistryCreate {
	rc.mutation.SetAPIType(s)
	return rc
}

// SetNillableAPIType sets the "api_type" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableAPIType(s *string) *RegistryCreate {
	if s != nil {
		rc.SetAPIType(*s)
	}
	return rc
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (rc *RegistryCreate) AddApplicationIDs(ids ...uint64) *RegistryCreate {
	rc.mutation.AddApplicationIDs(ids...)
	return rc
}

// AddApplications adds the "applications" edges to the Application entity.
func (rc *RegistryCreate) AddApplications(a ...*Application) *RegistryCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddApplicationIDs(ids...)
}

// AddApplicationImageIDs adds the "application_images" edge to the Application entity by IDs.
func (rc *RegistryCreate) AddApplicationImageIDs(ids ...uint64) *RegistryCreate {
	rc.mutation.AddApplicationImageIDs(ids...)
	return rc
}

// AddApplicationImages adds the "application_images" edges to the Application entity.
func (rc *RegistryCreate) AddApplicationImages(a ...*Application) *RegistryCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddApplicationImageIDs(ids...)
}

// Mutation returns the RegistryMutation object of the builder.
func (rc *RegistryCreate) Mutation() *RegistryMutation {
	return rc.mutation
}

// Save creates the Registry in the database.
func (rc *RegistryCreate) Save(ctx context.Context) (*Registry, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegistryCreate) SaveX(ctx context.Context) *Registry {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RegistryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RegistryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RegistryCreate) defaults() {
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := registry.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := registry.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
	if _, ok := rc.mutation.ProjectUUID(); !ok {
		v := registry.DefaultProjectUUID
		rc.mutation.SetProjectUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RegistryCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Registry.name"`)}
	}
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "Registry.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "Registry.update_time"`)}
	}
	if _, ok := rc.mutation.ProjectUUID(); !ok {
		return &ValidationError{Name: "project_uuid", err: errors.New(`generated: missing required field "Registry.project_uuid"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`generated: missing required field "Registry.type"`)}
	}
	return nil
}

func (rc *RegistryCreate) sqlSave(ctx context.Context) (*Registry, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RegistryCreate) createSpec() (*Registry, *sqlgraph.CreateSpec) {
	var (
		_node = &Registry{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(registry.Table, sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64))
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(registry.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.DisplayName(); ok {
		_spec.SetField(registry.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := rc.mutation.DisplayNameLc(); ok {
		_spec.SetField(registry.FieldDisplayNameLc, field.TypeString, value)
		_node.DisplayNameLc = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(registry.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.SetField(registry.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.SetField(registry.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := rc.mutation.ProjectUUID(); ok {
		_spec.SetField(registry.FieldProjectUUID, field.TypeString, value)
		_node.ProjectUUID = value
	}
	if value, ok := rc.mutation.AuthToken(); ok {
		_spec.SetField(registry.FieldAuthToken, field.TypeString, value)
		_node.AuthToken = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(registry.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.APIType(); ok {
		_spec.SetField(registry.FieldAPIType, field.TypeString, value)
		_node.APIType = value
	}
	if nodes := rc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationsTable,
			Columns: []string{registry.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ApplicationImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.ApplicationImagesTable,
			Columns: []string{registry.ApplicationImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RegistryCreateBulk is the builder for creating many Registry entities in bulk.
type RegistryCreateBulk struct {
	config
	err      error
	builders []*RegistryCreate
}

// Save creates the Registry entities in the database.
func (rcb *RegistryCreateBulk) Save(ctx context.Context) ([]*Registry, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Registry, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegistryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RegistryCreateBulk) SaveX(ctx context.Context) []*Registry {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RegistryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RegistryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
