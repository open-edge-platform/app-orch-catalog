// Code generated by ent, DO NOT EDIT.

package ignoredresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ignoredresource type in the database.
	Label = "ignored_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// EdgeApplicationFk holds the string denoting the application_fk edge name in mutations.
	EdgeApplicationFk = "application_fk"
	// Table holds the table name of the ignoredresource in the database.
	Table = "ignored_resources"
	// ApplicationFkTable is the table that holds the application_fk relation/edge.
	ApplicationFkTable = "ignored_resources"
	// ApplicationFkInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationFkInverseTable = "applications"
	// ApplicationFkColumn is the table column denoting the application_fk relation/edge.
	ApplicationFkColumn = "application_ignored_resources"
)

// Columns holds all SQL columns for ignoredresource fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldKind,
	FieldNamespace,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ignored_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"application_ignored_resources",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the IgnoredResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByApplicationFkField orders the results by application_fk field.
func ByApplicationFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationFkStep(), sql.OrderByField(field, opts...))
	}
}
func newApplicationFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicationFkTable, ApplicationFkColumn),
	)
}
