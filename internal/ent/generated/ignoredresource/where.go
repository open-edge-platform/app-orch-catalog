// Code generated by ent, DO NOT EDIT.

package ignoredresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEQ(FieldName, v))
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEQ(FieldKind, v))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEQ(FieldNamespace, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldContainsFold(FieldName, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldNotIn(FieldKind, vs...))
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldGT(FieldKind, v))
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldGTE(FieldKind, v))
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldLT(FieldKind, v))
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldLTE(FieldKind, v))
}

// KindContains applies the Contains predicate on the "kind" field.
func KindContains(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldContains(FieldKind, v))
}

// KindHasPrefix applies the HasPrefix predicate on the "kind" field.
func KindHasPrefix(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldHasPrefix(FieldKind, v))
}

// KindHasSuffix applies the HasSuffix predicate on the "kind" field.
func KindHasSuffix(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldHasSuffix(FieldKind, v))
}

// KindEqualFold applies the EqualFold predicate on the "kind" field.
func KindEqualFold(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEqualFold(FieldKind, v))
}

// KindContainsFold applies the ContainsFold predicate on the "kind" field.
func KindContainsFold(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldContainsFold(FieldKind, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.FieldContainsFold(FieldNamespace, v))
}

// HasApplicationFk applies the HasEdge predicate on the "application_fk" edge.
func HasApplicationFk() predicate.IgnoredResource {
	return predicate.IgnoredResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationFkTable, ApplicationFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationFkWith applies the HasEdge predicate on the "application_fk" edge with a given conditions (other predicates).
func HasApplicationFkWith(preds ...predicate.Application) predicate.IgnoredResource {
	return predicate.IgnoredResource(func(s *sql.Selector) {
		step := newApplicationFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IgnoredResource) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IgnoredResource) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IgnoredResource) predicate.IgnoredResource {
	return predicate.IgnoredResource(sql.NotPredicates(p))
}
