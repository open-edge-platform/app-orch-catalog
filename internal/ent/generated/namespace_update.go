// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespace"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespaceadornment"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// NamespaceUpdate is the builder for updating Namespace entities.
type NamespaceUpdate struct {
	config
	hooks    []Hook
	mutation *NamespaceMutation
}

// Where appends a list predicates to the NamespaceUpdate builder.
func (nu *NamespaceUpdate) Where(ps ...predicate.Namespace) *NamespaceUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetName sets the "name" field.
func (nu *NamespaceUpdate) SetName(s string) *NamespaceUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (nu *NamespaceUpdate) SetDeploymentPackageFkID(id uint64) *NamespaceUpdate {
	nu.mutation.SetDeploymentPackageFkID(id)
	return nu
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (nu *NamespaceUpdate) SetDeploymentPackageFk(d *DeploymentPackage) *NamespaceUpdate {
	return nu.SetDeploymentPackageFkID(d.ID)
}

// AddAdornmentIDs adds the "adornments" edge to the NamespaceAdornment entity by IDs.
func (nu *NamespaceUpdate) AddAdornmentIDs(ids ...uint64) *NamespaceUpdate {
	nu.mutation.AddAdornmentIDs(ids...)
	return nu
}

// AddAdornments adds the "adornments" edges to the NamespaceAdornment entity.
func (nu *NamespaceUpdate) AddAdornments(n ...*NamespaceAdornment) *NamespaceUpdate {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddAdornmentIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nu *NamespaceUpdate) Mutation() *NamespaceMutation {
	return nu.mutation
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (nu *NamespaceUpdate) ClearDeploymentPackageFk() *NamespaceUpdate {
	nu.mutation.ClearDeploymentPackageFk()
	return nu
}

// ClearAdornments clears all "adornments" edges to the NamespaceAdornment entity.
func (nu *NamespaceUpdate) ClearAdornments() *NamespaceUpdate {
	nu.mutation.ClearAdornments()
	return nu
}

// RemoveAdornmentIDs removes the "adornments" edge to NamespaceAdornment entities by IDs.
func (nu *NamespaceUpdate) RemoveAdornmentIDs(ids ...uint64) *NamespaceUpdate {
	nu.mutation.RemoveAdornmentIDs(ids...)
	return nu
}

// RemoveAdornments removes "adornments" edges to NamespaceAdornment entities.
func (nu *NamespaceUpdate) RemoveAdornments(n ...*NamespaceAdornment) *NamespaceUpdate {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveAdornmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NamespaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NamespaceUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NamespaceUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NamespaceUpdate) check() error {
	if _, ok := nu.mutation.DeploymentPackageFkID(); nu.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Namespace.deployment_package_fk"`)
	}
	return nil
}

func (nu *NamespaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(namespace.Table, namespace.Columns, sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(namespace.FieldName, field.TypeString, value)
	}
	if nu.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespace.DeploymentPackageFkTable,
			Columns: []string{namespace.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespace.DeploymentPackageFkTable,
			Columns: []string{namespace.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.AdornmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AdornmentsTable,
			Columns: []string{namespace.AdornmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedAdornmentsIDs(); len(nodes) > 0 && !nu.mutation.AdornmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AdornmentsTable,
			Columns: []string{namespace.AdornmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.AdornmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AdornmentsTable,
			Columns: []string{namespace.AdornmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NamespaceUpdateOne is the builder for updating a single Namespace entity.
type NamespaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NamespaceMutation
}

// SetName sets the "name" field.
func (nuo *NamespaceUpdateOne) SetName(s string) *NamespaceUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (nuo *NamespaceUpdateOne) SetDeploymentPackageFkID(id uint64) *NamespaceUpdateOne {
	nuo.mutation.SetDeploymentPackageFkID(id)
	return nuo
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (nuo *NamespaceUpdateOne) SetDeploymentPackageFk(d *DeploymentPackage) *NamespaceUpdateOne {
	return nuo.SetDeploymentPackageFkID(d.ID)
}

// AddAdornmentIDs adds the "adornments" edge to the NamespaceAdornment entity by IDs.
func (nuo *NamespaceUpdateOne) AddAdornmentIDs(ids ...uint64) *NamespaceUpdateOne {
	nuo.mutation.AddAdornmentIDs(ids...)
	return nuo
}

// AddAdornments adds the "adornments" edges to the NamespaceAdornment entity.
func (nuo *NamespaceUpdateOne) AddAdornments(n ...*NamespaceAdornment) *NamespaceUpdateOne {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddAdornmentIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nuo *NamespaceUpdateOne) Mutation() *NamespaceMutation {
	return nuo.mutation
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (nuo *NamespaceUpdateOne) ClearDeploymentPackageFk() *NamespaceUpdateOne {
	nuo.mutation.ClearDeploymentPackageFk()
	return nuo
}

// ClearAdornments clears all "adornments" edges to the NamespaceAdornment entity.
func (nuo *NamespaceUpdateOne) ClearAdornments() *NamespaceUpdateOne {
	nuo.mutation.ClearAdornments()
	return nuo
}

// RemoveAdornmentIDs removes the "adornments" edge to NamespaceAdornment entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveAdornmentIDs(ids ...uint64) *NamespaceUpdateOne {
	nuo.mutation.RemoveAdornmentIDs(ids...)
	return nuo
}

// RemoveAdornments removes "adornments" edges to NamespaceAdornment entities.
func (nuo *NamespaceUpdateOne) RemoveAdornments(n ...*NamespaceAdornment) *NamespaceUpdateOne {
	ids := make([]uint64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveAdornmentIDs(ids...)
}

// Where appends a list predicates to the NamespaceUpdate builder.
func (nuo *NamespaceUpdateOne) Where(ps ...predicate.Namespace) *NamespaceUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NamespaceUpdateOne) Select(field string, fields ...string) *NamespaceUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Namespace entity.
func (nuo *NamespaceUpdateOne) Save(ctx context.Context) (*Namespace, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) SaveX(ctx context.Context) *Namespace {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NamespaceUpdateOne) check() error {
	if _, ok := nuo.mutation.DeploymentPackageFkID(); nuo.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Namespace.deployment_package_fk"`)
	}
	return nil
}

func (nuo *NamespaceUpdateOne) sqlSave(ctx context.Context) (_node *Namespace, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(namespace.Table, namespace.Columns, sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUint64))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Namespace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, namespace.FieldID)
		for _, f := range fields {
			if !namespace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != namespace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(namespace.FieldName, field.TypeString, value)
	}
	if nuo.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespace.DeploymentPackageFkTable,
			Columns: []string{namespace.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespace.DeploymentPackageFkTable,
			Columns: []string{namespace.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.AdornmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AdornmentsTable,
			Columns: []string{namespace.AdornmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedAdornmentsIDs(); len(nodes) > 0 && !nuo.mutation.AdornmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AdornmentsTable,
			Columns: []string{namespace.AdornmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.AdornmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AdornmentsTable,
			Columns: []string{namespace.AdornmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespaceadornment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Namespace{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
