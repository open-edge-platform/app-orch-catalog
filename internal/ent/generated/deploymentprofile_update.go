// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// DeploymentProfileUpdate is the builder for updating DeploymentProfile entities.
type DeploymentProfileUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentProfileMutation
}

// Where appends a list predicates to the DeploymentProfileUpdate builder.
func (dpu *DeploymentProfileUpdate) Where(ps ...predicate.DeploymentProfile) *DeploymentProfileUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetName sets the "name" field.
func (dpu *DeploymentProfileUpdate) SetName(s string) *DeploymentProfileUpdate {
	dpu.mutation.SetName(s)
	return dpu
}

// SetDisplayName sets the "display_name" field.
func (dpu *DeploymentProfileUpdate) SetDisplayName(s string) *DeploymentProfileUpdate {
	dpu.mutation.SetDisplayName(s)
	return dpu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (dpu *DeploymentProfileUpdate) SetNillableDisplayName(s *string) *DeploymentProfileUpdate {
	if s != nil {
		dpu.SetDisplayName(*s)
	}
	return dpu
}

// ClearDisplayName clears the value of the "display_name" field.
func (dpu *DeploymentProfileUpdate) ClearDisplayName() *DeploymentProfileUpdate {
	dpu.mutation.ClearDisplayName()
	return dpu
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (dpu *DeploymentProfileUpdate) SetDisplayNameLc(s string) *DeploymentProfileUpdate {
	dpu.mutation.SetDisplayNameLc(s)
	return dpu
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (dpu *DeploymentProfileUpdate) SetNillableDisplayNameLc(s *string) *DeploymentProfileUpdate {
	if s != nil {
		dpu.SetDisplayNameLc(*s)
	}
	return dpu
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (dpu *DeploymentProfileUpdate) ClearDisplayNameLc() *DeploymentProfileUpdate {
	dpu.mutation.ClearDisplayNameLc()
	return dpu
}

// SetDescription sets the "description" field.
func (dpu *DeploymentProfileUpdate) SetDescription(s string) *DeploymentProfileUpdate {
	dpu.mutation.SetDescription(s)
	return dpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dpu *DeploymentProfileUpdate) SetNillableDescription(s *string) *DeploymentProfileUpdate {
	if s != nil {
		dpu.SetDescription(*s)
	}
	return dpu
}

// ClearDescription clears the value of the "description" field.
func (dpu *DeploymentProfileUpdate) ClearDescription() *DeploymentProfileUpdate {
	dpu.mutation.ClearDescription()
	return dpu
}

// SetUpdateTime sets the "update_time" field.
func (dpu *DeploymentProfileUpdate) SetUpdateTime(t time.Time) *DeploymentProfileUpdate {
	dpu.mutation.SetUpdateTime(t)
	return dpu
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (dpu *DeploymentProfileUpdate) AddProfileIDs(ids ...uint64) *DeploymentProfileUpdate {
	dpu.mutation.AddProfileIDs(ids...)
	return dpu
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (dpu *DeploymentProfileUpdate) AddProfiles(p ...*Profile) *DeploymentProfileUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dpu.AddProfileIDs(ids...)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (dpu *DeploymentProfileUpdate) SetDeploymentPackageFkID(id uint64) *DeploymentProfileUpdate {
	dpu.mutation.SetDeploymentPackageFkID(id)
	return dpu
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (dpu *DeploymentProfileUpdate) SetDeploymentPackageFk(d *DeploymentPackage) *DeploymentProfileUpdate {
	return dpu.SetDeploymentPackageFkID(d.ID)
}

// Mutation returns the DeploymentProfileMutation object of the builder.
func (dpu *DeploymentProfileUpdate) Mutation() *DeploymentProfileMutation {
	return dpu.mutation
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (dpu *DeploymentProfileUpdate) ClearProfiles() *DeploymentProfileUpdate {
	dpu.mutation.ClearProfiles()
	return dpu
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (dpu *DeploymentProfileUpdate) RemoveProfileIDs(ids ...uint64) *DeploymentProfileUpdate {
	dpu.mutation.RemoveProfileIDs(ids...)
	return dpu
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (dpu *DeploymentProfileUpdate) RemoveProfiles(p ...*Profile) *DeploymentProfileUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dpu.RemoveProfileIDs(ids...)
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (dpu *DeploymentProfileUpdate) ClearDeploymentPackageFk() *DeploymentProfileUpdate {
	dpu.mutation.ClearDeploymentPackageFk()
	return dpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DeploymentProfileUpdate) Save(ctx context.Context) (int, error) {
	dpu.defaults()
	return withHooks(ctx, dpu.sqlSave, dpu.mutation, dpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DeploymentProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DeploymentProfileUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DeploymentProfileUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpu *DeploymentProfileUpdate) defaults() {
	if _, ok := dpu.mutation.UpdateTime(); !ok {
		v := deploymentprofile.UpdateDefaultUpdateTime()
		dpu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpu *DeploymentProfileUpdate) check() error {
	if _, ok := dpu.mutation.DeploymentPackageFkID(); dpu.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "DeploymentProfile.deployment_package_fk"`)
	}
	return nil
}

func (dpu *DeploymentProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deploymentprofile.Table, deploymentprofile.Columns, sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64))
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.Name(); ok {
		_spec.SetField(deploymentprofile.FieldName, field.TypeString, value)
	}
	if value, ok := dpu.mutation.DisplayName(); ok {
		_spec.SetField(deploymentprofile.FieldDisplayName, field.TypeString, value)
	}
	if dpu.mutation.DisplayNameCleared() {
		_spec.ClearField(deploymentprofile.FieldDisplayName, field.TypeString)
	}
	if value, ok := dpu.mutation.DisplayNameLc(); ok {
		_spec.SetField(deploymentprofile.FieldDisplayNameLc, field.TypeString, value)
	}
	if dpu.mutation.DisplayNameLcCleared() {
		_spec.ClearField(deploymentprofile.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := dpu.mutation.Description(); ok {
		_spec.SetField(deploymentprofile.FieldDescription, field.TypeString, value)
	}
	if dpu.mutation.DescriptionCleared() {
		_spec.ClearField(deploymentprofile.FieldDescription, field.TypeString)
	}
	if value, ok := dpu.mutation.UpdateTime(); ok {
		_spec.SetField(deploymentprofile.FieldUpdateTime, field.TypeTime, value)
	}
	if dpu.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentprofile.ProfilesTable,
			Columns: deploymentprofile.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !dpu.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentprofile.ProfilesTable,
			Columns: deploymentprofile.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentprofile.ProfilesTable,
			Columns: deploymentprofile.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.DeploymentPackageFkTable,
			Columns: []string{deploymentprofile.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.DeploymentPackageFkTable,
			Columns: []string{deploymentprofile.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dpu.mutation.done = true
	return n, nil
}

// DeploymentProfileUpdateOne is the builder for updating a single DeploymentProfile entity.
type DeploymentProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentProfileMutation
}

// SetName sets the "name" field.
func (dpuo *DeploymentProfileUpdateOne) SetName(s string) *DeploymentProfileUpdateOne {
	dpuo.mutation.SetName(s)
	return dpuo
}

// SetDisplayName sets the "display_name" field.
func (dpuo *DeploymentProfileUpdateOne) SetDisplayName(s string) *DeploymentProfileUpdateOne {
	dpuo.mutation.SetDisplayName(s)
	return dpuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (dpuo *DeploymentProfileUpdateOne) SetNillableDisplayName(s *string) *DeploymentProfileUpdateOne {
	if s != nil {
		dpuo.SetDisplayName(*s)
	}
	return dpuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (dpuo *DeploymentProfileUpdateOne) ClearDisplayName() *DeploymentProfileUpdateOne {
	dpuo.mutation.ClearDisplayName()
	return dpuo
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (dpuo *DeploymentProfileUpdateOne) SetDisplayNameLc(s string) *DeploymentProfileUpdateOne {
	dpuo.mutation.SetDisplayNameLc(s)
	return dpuo
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (dpuo *DeploymentProfileUpdateOne) SetNillableDisplayNameLc(s *string) *DeploymentProfileUpdateOne {
	if s != nil {
		dpuo.SetDisplayNameLc(*s)
	}
	return dpuo
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (dpuo *DeploymentProfileUpdateOne) ClearDisplayNameLc() *DeploymentProfileUpdateOne {
	dpuo.mutation.ClearDisplayNameLc()
	return dpuo
}

// SetDescription sets the "description" field.
func (dpuo *DeploymentProfileUpdateOne) SetDescription(s string) *DeploymentProfileUpdateOne {
	dpuo.mutation.SetDescription(s)
	return dpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dpuo *DeploymentProfileUpdateOne) SetNillableDescription(s *string) *DeploymentProfileUpdateOne {
	if s != nil {
		dpuo.SetDescription(*s)
	}
	return dpuo
}

// ClearDescription clears the value of the "description" field.
func (dpuo *DeploymentProfileUpdateOne) ClearDescription() *DeploymentProfileUpdateOne {
	dpuo.mutation.ClearDescription()
	return dpuo
}

// SetUpdateTime sets the "update_time" field.
func (dpuo *DeploymentProfileUpdateOne) SetUpdateTime(t time.Time) *DeploymentProfileUpdateOne {
	dpuo.mutation.SetUpdateTime(t)
	return dpuo
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (dpuo *DeploymentProfileUpdateOne) AddProfileIDs(ids ...uint64) *DeploymentProfileUpdateOne {
	dpuo.mutation.AddProfileIDs(ids...)
	return dpuo
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (dpuo *DeploymentProfileUpdateOne) AddProfiles(p ...*Profile) *DeploymentProfileUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dpuo.AddProfileIDs(ids...)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (dpuo *DeploymentProfileUpdateOne) SetDeploymentPackageFkID(id uint64) *DeploymentProfileUpdateOne {
	dpuo.mutation.SetDeploymentPackageFkID(id)
	return dpuo
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (dpuo *DeploymentProfileUpdateOne) SetDeploymentPackageFk(d *DeploymentPackage) *DeploymentProfileUpdateOne {
	return dpuo.SetDeploymentPackageFkID(d.ID)
}

// Mutation returns the DeploymentProfileMutation object of the builder.
func (dpuo *DeploymentProfileUpdateOne) Mutation() *DeploymentProfileMutation {
	return dpuo.mutation
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (dpuo *DeploymentProfileUpdateOne) ClearProfiles() *DeploymentProfileUpdateOne {
	dpuo.mutation.ClearProfiles()
	return dpuo
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (dpuo *DeploymentProfileUpdateOne) RemoveProfileIDs(ids ...uint64) *DeploymentProfileUpdateOne {
	dpuo.mutation.RemoveProfileIDs(ids...)
	return dpuo
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (dpuo *DeploymentProfileUpdateOne) RemoveProfiles(p ...*Profile) *DeploymentProfileUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dpuo.RemoveProfileIDs(ids...)
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (dpuo *DeploymentProfileUpdateOne) ClearDeploymentPackageFk() *DeploymentProfileUpdateOne {
	dpuo.mutation.ClearDeploymentPackageFk()
	return dpuo
}

// Where appends a list predicates to the DeploymentProfileUpdate builder.
func (dpuo *DeploymentProfileUpdateOne) Where(ps ...predicate.DeploymentProfile) *DeploymentProfileUpdateOne {
	dpuo.mutation.Where(ps...)
	return dpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DeploymentProfileUpdateOne) Select(field string, fields ...string) *DeploymentProfileUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DeploymentProfile entity.
func (dpuo *DeploymentProfileUpdateOne) Save(ctx context.Context) (*DeploymentProfile, error) {
	dpuo.defaults()
	return withHooks(ctx, dpuo.sqlSave, dpuo.mutation, dpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DeploymentProfileUpdateOne) SaveX(ctx context.Context) *DeploymentProfile {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DeploymentProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DeploymentProfileUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpuo *DeploymentProfileUpdateOne) defaults() {
	if _, ok := dpuo.mutation.UpdateTime(); !ok {
		v := deploymentprofile.UpdateDefaultUpdateTime()
		dpuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpuo *DeploymentProfileUpdateOne) check() error {
	if _, ok := dpuo.mutation.DeploymentPackageFkID(); dpuo.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "DeploymentProfile.deployment_package_fk"`)
	}
	return nil
}

func (dpuo *DeploymentProfileUpdateOne) sqlSave(ctx context.Context) (_node *DeploymentProfile, err error) {
	if err := dpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deploymentprofile.Table, deploymentprofile.Columns, sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64))
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DeploymentProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentprofile.FieldID)
		for _, f := range fields {
			if !deploymentprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != deploymentprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.Name(); ok {
		_spec.SetField(deploymentprofile.FieldName, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.DisplayName(); ok {
		_spec.SetField(deploymentprofile.FieldDisplayName, field.TypeString, value)
	}
	if dpuo.mutation.DisplayNameCleared() {
		_spec.ClearField(deploymentprofile.FieldDisplayName, field.TypeString)
	}
	if value, ok := dpuo.mutation.DisplayNameLc(); ok {
		_spec.SetField(deploymentprofile.FieldDisplayNameLc, field.TypeString, value)
	}
	if dpuo.mutation.DisplayNameLcCleared() {
		_spec.ClearField(deploymentprofile.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := dpuo.mutation.Description(); ok {
		_spec.SetField(deploymentprofile.FieldDescription, field.TypeString, value)
	}
	if dpuo.mutation.DescriptionCleared() {
		_spec.ClearField(deploymentprofile.FieldDescription, field.TypeString)
	}
	if value, ok := dpuo.mutation.UpdateTime(); ok {
		_spec.SetField(deploymentprofile.FieldUpdateTime, field.TypeTime, value)
	}
	if dpuo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentprofile.ProfilesTable,
			Columns: deploymentprofile.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !dpuo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentprofile.ProfilesTable,
			Columns: deploymentprofile.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentprofile.ProfilesTable,
			Columns: deploymentprofile.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.DeploymentPackageFkTable,
			Columns: []string{deploymentprofile.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.DeploymentPackageFkTable,
			Columns: []string{deploymentprofile.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeploymentProfile{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dpuo.mutation.done = true
	return _node, nil
}
