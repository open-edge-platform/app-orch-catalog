// Code generated by ent, DO NOT EDIT.

package profile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the profile type in the database.
	Label = "profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDisplayNameLc holds the string denoting the display_name_lc field in the database.
	FieldDisplayNameLc = "display_name_lc"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldChartValues holds the string denoting the chart_values field in the database.
	FieldChartValues = "chart_values"
	// EdgeApplicationFk holds the string denoting the application_fk edge name in mutations.
	EdgeApplicationFk = "application_fk"
	// EdgeDeploymentProfiles holds the string denoting the deployment_profiles edge name in mutations.
	EdgeDeploymentProfiles = "deployment_profiles"
	// EdgeParameterTemplates holds the string denoting the parameter_templates edge name in mutations.
	EdgeParameterTemplates = "parameter_templates"
	// EdgeDeploymentRequirements holds the string denoting the deployment_requirements edge name in mutations.
	EdgeDeploymentRequirements = "deployment_requirements"
	// Table holds the table name of the profile in the database.
	Table = "profiles"
	// ApplicationFkTable is the table that holds the application_fk relation/edge.
	ApplicationFkTable = "profiles"
	// ApplicationFkInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationFkInverseTable = "applications"
	// ApplicationFkColumn is the table column denoting the application_fk relation/edge.
	ApplicationFkColumn = "application_profiles"
	// DeploymentProfilesTable is the table that holds the deployment_profiles relation/edge. The primary key declared below.
	DeploymentProfilesTable = "deployment_profile_profiles"
	// DeploymentProfilesInverseTable is the table name for the DeploymentProfile entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentprofile" package.
	DeploymentProfilesInverseTable = "deployment_profiles"
	// ParameterTemplatesTable is the table that holds the parameter_templates relation/edge.
	ParameterTemplatesTable = "parameter_templates"
	// ParameterTemplatesInverseTable is the table name for the ParameterTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "parametertemplate" package.
	ParameterTemplatesInverseTable = "parameter_templates"
	// ParameterTemplatesColumn is the table column denoting the parameter_templates relation/edge.
	ParameterTemplatesColumn = "profile_parameter_templates"
	// DeploymentRequirementsTable is the table that holds the deployment_requirements relation/edge.
	DeploymentRequirementsTable = "deployment_requirements"
	// DeploymentRequirementsInverseTable is the table name for the DeploymentRequirement entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentrequirement" package.
	DeploymentRequirementsInverseTable = "deployment_requirements"
	// DeploymentRequirementsColumn is the table column denoting the deployment_requirements relation/edge.
	DeploymentRequirementsColumn = "profile_deployment_requirements"
)

// Columns holds all SQL columns for profile fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDisplayNameLc,
	FieldDescription,
	FieldCreateTime,
	FieldUpdateTime,
	FieldChartValues,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"application_profiles",
	"parameter_template_profiles",
}

var (
	// DeploymentProfilesPrimaryKey and DeploymentProfilesColumn2 are the table columns denoting the
	// primary key for the deployment_profiles relation (M2M).
	DeploymentProfilesPrimaryKey = []string{"deployment_profile_id", "profile_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the Profile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDisplayNameLc orders the results by the display_name_lc field.
func ByDisplayNameLc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayNameLc, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByChartValues orders the results by the chart_values field.
func ByChartValues(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChartValues, opts...).ToFunc()
}

// ByApplicationFkField orders the results by application_fk field.
func ByApplicationFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationFkStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeploymentProfilesCount orders the results by deployment_profiles count.
func ByDeploymentProfilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeploymentProfilesStep(), opts...)
	}
}

// ByDeploymentProfiles orders the results by deployment_profiles terms.
func ByDeploymentProfiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentProfilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParameterTemplatesCount orders the results by parameter_templates count.
func ByParameterTemplatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParameterTemplatesStep(), opts...)
	}
}

// ByParameterTemplates orders the results by parameter_templates terms.
func ByParameterTemplates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParameterTemplatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeploymentRequirementsCount orders the results by deployment_requirements count.
func ByDeploymentRequirementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeploymentRequirementsStep(), opts...)
	}
}

// ByDeploymentRequirements orders the results by deployment_requirements terms.
func ByDeploymentRequirements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentRequirementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicationFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicationFkTable, ApplicationFkColumn),
	)
}
func newDeploymentProfilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentProfilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DeploymentProfilesTable, DeploymentProfilesPrimaryKey...),
	)
}
func newParameterTemplatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParameterTemplatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ParameterTemplatesTable, ParameterTemplatesColumn),
	)
}
func newDeploymentRequirementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentRequirementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeploymentRequirementsTable, DeploymentRequirementsColumn),
	)
}
