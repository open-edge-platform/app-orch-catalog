// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// DeploymentProfileCreate is the builder for creating a DeploymentProfile entity.
type DeploymentProfileCreate struct {
	config
	mutation *DeploymentProfileMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dpc *DeploymentProfileCreate) SetName(s string) *DeploymentProfileCreate {
	dpc.mutation.SetName(s)
	return dpc
}

// SetDisplayName sets the "display_name" field.
func (dpc *DeploymentProfileCreate) SetDisplayName(s string) *DeploymentProfileCreate {
	dpc.mutation.SetDisplayName(s)
	return dpc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (dpc *DeploymentProfileCreate) SetNillableDisplayName(s *string) *DeploymentProfileCreate {
	if s != nil {
		dpc.SetDisplayName(*s)
	}
	return dpc
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (dpc *DeploymentProfileCreate) SetDisplayNameLc(s string) *DeploymentProfileCreate {
	dpc.mutation.SetDisplayNameLc(s)
	return dpc
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (dpc *DeploymentProfileCreate) SetNillableDisplayNameLc(s *string) *DeploymentProfileCreate {
	if s != nil {
		dpc.SetDisplayNameLc(*s)
	}
	return dpc
}

// SetDescription sets the "description" field.
func (dpc *DeploymentProfileCreate) SetDescription(s string) *DeploymentProfileCreate {
	dpc.mutation.SetDescription(s)
	return dpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dpc *DeploymentProfileCreate) SetNillableDescription(s *string) *DeploymentProfileCreate {
	if s != nil {
		dpc.SetDescription(*s)
	}
	return dpc
}

// SetCreateTime sets the "create_time" field.
func (dpc *DeploymentProfileCreate) SetCreateTime(t time.Time) *DeploymentProfileCreate {
	dpc.mutation.SetCreateTime(t)
	return dpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dpc *DeploymentProfileCreate) SetNillableCreateTime(t *time.Time) *DeploymentProfileCreate {
	if t != nil {
		dpc.SetCreateTime(*t)
	}
	return dpc
}

// SetUpdateTime sets the "update_time" field.
func (dpc *DeploymentProfileCreate) SetUpdateTime(t time.Time) *DeploymentProfileCreate {
	dpc.mutation.SetUpdateTime(t)
	return dpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dpc *DeploymentProfileCreate) SetNillableUpdateTime(t *time.Time) *DeploymentProfileCreate {
	if t != nil {
		dpc.SetUpdateTime(*t)
	}
	return dpc
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (dpc *DeploymentProfileCreate) AddProfileIDs(ids ...uint64) *DeploymentProfileCreate {
	dpc.mutation.AddProfileIDs(ids...)
	return dpc
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (dpc *DeploymentProfileCreate) AddProfiles(p ...*Profile) *DeploymentProfileCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dpc.AddProfileIDs(ids...)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (dpc *DeploymentProfileCreate) SetDeploymentPackageFkID(id uint64) *DeploymentProfileCreate {
	dpc.mutation.SetDeploymentPackageFkID(id)
	return dpc
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (dpc *DeploymentProfileCreate) SetDeploymentPackageFk(d *DeploymentPackage) *DeploymentProfileCreate {
	return dpc.SetDeploymentPackageFkID(d.ID)
}

// Mutation returns the DeploymentProfileMutation object of the builder.
func (dpc *DeploymentProfileCreate) Mutation() *DeploymentProfileMutation {
	return dpc.mutation
}

// Save creates the DeploymentProfile in the database.
func (dpc *DeploymentProfileCreate) Save(ctx context.Context) (*DeploymentProfile, error) {
	dpc.defaults()
	return withHooks(ctx, dpc.sqlSave, dpc.mutation, dpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DeploymentProfileCreate) SaveX(ctx context.Context) *DeploymentProfile {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DeploymentProfileCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DeploymentProfileCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpc *DeploymentProfileCreate) defaults() {
	if _, ok := dpc.mutation.CreateTime(); !ok {
		v := deploymentprofile.DefaultCreateTime()
		dpc.mutation.SetCreateTime(v)
	}
	if _, ok := dpc.mutation.UpdateTime(); !ok {
		v := deploymentprofile.DefaultUpdateTime()
		dpc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DeploymentProfileCreate) check() error {
	if _, ok := dpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "DeploymentProfile.name"`)}
	}
	if _, ok := dpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "DeploymentProfile.create_time"`)}
	}
	if _, ok := dpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "DeploymentProfile.update_time"`)}
	}
	if _, ok := dpc.mutation.DeploymentPackageFkID(); !ok {
		return &ValidationError{Name: "deployment_package_fk", err: errors.New(`generated: missing required edge "DeploymentProfile.deployment_package_fk"`)}
	}
	return nil
}

func (dpc *DeploymentProfileCreate) sqlSave(ctx context.Context) (*DeploymentProfile, error) {
	if err := dpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	dpc.mutation.id = &_node.ID
	dpc.mutation.done = true
	return _node, nil
}

func (dpc *DeploymentProfileCreate) createSpec() (*DeploymentProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &DeploymentProfile{config: dpc.config}
		_spec = sqlgraph.NewCreateSpec(deploymentprofile.Table, sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64))
	)
	if value, ok := dpc.mutation.Name(); ok {
		_spec.SetField(deploymentprofile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dpc.mutation.DisplayName(); ok {
		_spec.SetField(deploymentprofile.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := dpc.mutation.DisplayNameLc(); ok {
		_spec.SetField(deploymentprofile.FieldDisplayNameLc, field.TypeString, value)
		_node.DisplayNameLc = value
	}
	if value, ok := dpc.mutation.Description(); ok {
		_spec.SetField(deploymentprofile.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dpc.mutation.CreateTime(); ok {
		_spec.SetField(deploymentprofile.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dpc.mutation.UpdateTime(); ok {
		_spec.SetField(deploymentprofile.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := dpc.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentprofile.ProfilesTable,
			Columns: deploymentprofile.ProfilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deploymentprofile.DeploymentPackageFkTable,
			Columns: []string{deploymentprofile.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deployment_package_deployment_profiles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeploymentProfileCreateBulk is the builder for creating many DeploymentProfile entities in bulk.
type DeploymentProfileCreateBulk struct {
	config
	err      error
	builders []*DeploymentProfileCreate
}

// Save creates the DeploymentProfile entities in the database.
func (dpcb *DeploymentProfileCreateBulk) Save(ctx context.Context) ([]*DeploymentProfile, error) {
	if dpcb.err != nil {
		return nil, dpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DeploymentProfile, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeploymentProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DeploymentProfileCreateBulk) SaveX(ctx context.Context) []*DeploymentProfile {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DeploymentProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DeploymentProfileCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
