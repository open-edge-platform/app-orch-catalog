// Code generated by ent, DO NOT EDIT.

package parametertemplate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameLc applies equality check predicate on the "display_name_lc" field. It's identical to DisplayNameLcEQ.
func DisplayNameLc(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldDisplayNameLc, v))
}

// Default applies equality check predicate on the "default" field. It's identical to DefaultEQ.
func Default(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldDefault, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldType, v))
}

// Validator applies equality check predicate on the "validator" field. It's identical to ValidatorEQ.
func Validator(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldValidator, v))
}

// Mandatory applies equality check predicate on the "mandatory" field. It's identical to MandatoryEQ.
func Mandatory(v bool) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldMandatory, v))
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v bool) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldSecret, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContainsFold(FieldDisplayName, v))
}

// DisplayNameLcEQ applies the EQ predicate on the "display_name_lc" field.
func DisplayNameLcEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldDisplayNameLc, v))
}

// DisplayNameLcNEQ applies the NEQ predicate on the "display_name_lc" field.
func DisplayNameLcNEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNEQ(FieldDisplayNameLc, v))
}

// DisplayNameLcIn applies the In predicate on the "display_name_lc" field.
func DisplayNameLcIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIn(FieldDisplayNameLc, vs...))
}

// DisplayNameLcNotIn applies the NotIn predicate on the "display_name_lc" field.
func DisplayNameLcNotIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotIn(FieldDisplayNameLc, vs...))
}

// DisplayNameLcGT applies the GT predicate on the "display_name_lc" field.
func DisplayNameLcGT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGT(FieldDisplayNameLc, v))
}

// DisplayNameLcGTE applies the GTE predicate on the "display_name_lc" field.
func DisplayNameLcGTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGTE(FieldDisplayNameLc, v))
}

// DisplayNameLcLT applies the LT predicate on the "display_name_lc" field.
func DisplayNameLcLT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLT(FieldDisplayNameLc, v))
}

// DisplayNameLcLTE applies the LTE predicate on the "display_name_lc" field.
func DisplayNameLcLTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLTE(FieldDisplayNameLc, v))
}

// DisplayNameLcContains applies the Contains predicate on the "display_name_lc" field.
func DisplayNameLcContains(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContains(FieldDisplayNameLc, v))
}

// DisplayNameLcHasPrefix applies the HasPrefix predicate on the "display_name_lc" field.
func DisplayNameLcHasPrefix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasPrefix(FieldDisplayNameLc, v))
}

// DisplayNameLcHasSuffix applies the HasSuffix predicate on the "display_name_lc" field.
func DisplayNameLcHasSuffix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasSuffix(FieldDisplayNameLc, v))
}

// DisplayNameLcIsNil applies the IsNil predicate on the "display_name_lc" field.
func DisplayNameLcIsNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIsNull(FieldDisplayNameLc))
}

// DisplayNameLcNotNil applies the NotNil predicate on the "display_name_lc" field.
func DisplayNameLcNotNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotNull(FieldDisplayNameLc))
}

// DisplayNameLcEqualFold applies the EqualFold predicate on the "display_name_lc" field.
func DisplayNameLcEqualFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEqualFold(FieldDisplayNameLc, v))
}

// DisplayNameLcContainsFold applies the ContainsFold predicate on the "display_name_lc" field.
func DisplayNameLcContainsFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContainsFold(FieldDisplayNameLc, v))
}

// DefaultEQ applies the EQ predicate on the "default" field.
func DefaultEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldDefault, v))
}

// DefaultNEQ applies the NEQ predicate on the "default" field.
func DefaultNEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNEQ(FieldDefault, v))
}

// DefaultIn applies the In predicate on the "default" field.
func DefaultIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIn(FieldDefault, vs...))
}

// DefaultNotIn applies the NotIn predicate on the "default" field.
func DefaultNotIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotIn(FieldDefault, vs...))
}

// DefaultGT applies the GT predicate on the "default" field.
func DefaultGT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGT(FieldDefault, v))
}

// DefaultGTE applies the GTE predicate on the "default" field.
func DefaultGTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGTE(FieldDefault, v))
}

// DefaultLT applies the LT predicate on the "default" field.
func DefaultLT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLT(FieldDefault, v))
}

// DefaultLTE applies the LTE predicate on the "default" field.
func DefaultLTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLTE(FieldDefault, v))
}

// DefaultContains applies the Contains predicate on the "default" field.
func DefaultContains(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContains(FieldDefault, v))
}

// DefaultHasPrefix applies the HasPrefix predicate on the "default" field.
func DefaultHasPrefix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasPrefix(FieldDefault, v))
}

// DefaultHasSuffix applies the HasSuffix predicate on the "default" field.
func DefaultHasSuffix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasSuffix(FieldDefault, v))
}

// DefaultIsNil applies the IsNil predicate on the "default" field.
func DefaultIsNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIsNull(FieldDefault))
}

// DefaultNotNil applies the NotNil predicate on the "default" field.
func DefaultNotNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotNull(FieldDefault))
}

// DefaultEqualFold applies the EqualFold predicate on the "default" field.
func DefaultEqualFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEqualFold(FieldDefault, v))
}

// DefaultContainsFold applies the ContainsFold predicate on the "default" field.
func DefaultContainsFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContainsFold(FieldDefault, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContainsFold(FieldType, v))
}

// ValidatorEQ applies the EQ predicate on the "validator" field.
func ValidatorEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldValidator, v))
}

// ValidatorNEQ applies the NEQ predicate on the "validator" field.
func ValidatorNEQ(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNEQ(FieldValidator, v))
}

// ValidatorIn applies the In predicate on the "validator" field.
func ValidatorIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIn(FieldValidator, vs...))
}

// ValidatorNotIn applies the NotIn predicate on the "validator" field.
func ValidatorNotIn(vs ...string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotIn(FieldValidator, vs...))
}

// ValidatorGT applies the GT predicate on the "validator" field.
func ValidatorGT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGT(FieldValidator, v))
}

// ValidatorGTE applies the GTE predicate on the "validator" field.
func ValidatorGTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldGTE(FieldValidator, v))
}

// ValidatorLT applies the LT predicate on the "validator" field.
func ValidatorLT(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLT(FieldValidator, v))
}

// ValidatorLTE applies the LTE predicate on the "validator" field.
func ValidatorLTE(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldLTE(FieldValidator, v))
}

// ValidatorContains applies the Contains predicate on the "validator" field.
func ValidatorContains(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContains(FieldValidator, v))
}

// ValidatorHasPrefix applies the HasPrefix predicate on the "validator" field.
func ValidatorHasPrefix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasPrefix(FieldValidator, v))
}

// ValidatorHasSuffix applies the HasSuffix predicate on the "validator" field.
func ValidatorHasSuffix(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldHasSuffix(FieldValidator, v))
}

// ValidatorIsNil applies the IsNil predicate on the "validator" field.
func ValidatorIsNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIsNull(FieldValidator))
}

// ValidatorNotNil applies the NotNil predicate on the "validator" field.
func ValidatorNotNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotNull(FieldValidator))
}

// ValidatorEqualFold applies the EqualFold predicate on the "validator" field.
func ValidatorEqualFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEqualFold(FieldValidator, v))
}

// ValidatorContainsFold applies the ContainsFold predicate on the "validator" field.
func ValidatorContainsFold(v string) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldContainsFold(FieldValidator, v))
}

// SuggestedValuesIsNil applies the IsNil predicate on the "suggested_values" field.
func SuggestedValuesIsNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIsNull(FieldSuggestedValues))
}

// SuggestedValuesNotNil applies the NotNil predicate on the "suggested_values" field.
func SuggestedValuesNotNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotNull(FieldSuggestedValues))
}

// MandatoryEQ applies the EQ predicate on the "mandatory" field.
func MandatoryEQ(v bool) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldMandatory, v))
}

// MandatoryNEQ applies the NEQ predicate on the "mandatory" field.
func MandatoryNEQ(v bool) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNEQ(FieldMandatory, v))
}

// MandatoryIsNil applies the IsNil predicate on the "mandatory" field.
func MandatoryIsNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIsNull(FieldMandatory))
}

// MandatoryNotNil applies the NotNil predicate on the "mandatory" field.
func MandatoryNotNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotNull(FieldMandatory))
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v bool) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldEQ(FieldSecret, v))
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v bool) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNEQ(FieldSecret, v))
}

// SecretIsNil applies the IsNil predicate on the "secret" field.
func SecretIsNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldIsNull(FieldSecret))
}

// SecretNotNil applies the NotNil predicate on the "secret" field.
func SecretNotNil() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.FieldNotNull(FieldSecret))
}

// HasProfileFk applies the HasEdge predicate on the "profile_fk" edge.
func HasProfileFk() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileFkTable, ProfileFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileFkWith applies the HasEdge predicate on the "profile_fk" edge with a given conditions (other predicates).
func HasProfileFkWith(preds ...predicate.Profile) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(func(s *sql.Selector) {
		step := newProfileFkStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfiles applies the HasEdge predicate on the "profiles" edge.
func HasProfiles() predicate.ParameterTemplate {
	return predicate.ParameterTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProfilesTable, ProfilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfilesWith applies the HasEdge predicate on the "profiles" edge with a given conditions (other predicates).
func HasProfilesWith(preds ...predicate.Profile) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(func(s *sql.Selector) {
		step := newProfilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ParameterTemplate) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ParameterTemplate) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ParameterTemplate) predicate.ParameterTemplate {
	return predicate.ParameterTemplate(sql.NotPredicates(p))
}
