// Code generated by ent, DO NOT EDIT.

package parametertemplate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the parametertemplate type in the database.
	Label = "parameter_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDisplayNameLc holds the string denoting the display_name_lc field in the database.
	FieldDisplayNameLc = "display_name_lc"
	// FieldDefault holds the string denoting the default field in the database.
	FieldDefault = "default"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldValidator holds the string denoting the validator field in the database.
	FieldValidator = "validator"
	// FieldSuggestedValues holds the string denoting the suggested_values field in the database.
	FieldSuggestedValues = "suggested_values"
	// FieldMandatory holds the string denoting the mandatory field in the database.
	FieldMandatory = "mandatory"
	// FieldSecret holds the string denoting the secret field in the database.
	FieldSecret = "secret"
	// EdgeProfileFk holds the string denoting the profile_fk edge name in mutations.
	EdgeProfileFk = "profile_fk"
	// EdgeProfiles holds the string denoting the profiles edge name in mutations.
	EdgeProfiles = "profiles"
	// Table holds the table name of the parametertemplate in the database.
	Table = "parameter_templates"
	// ProfileFkTable is the table that holds the profile_fk relation/edge.
	ProfileFkTable = "parameter_templates"
	// ProfileFkInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileFkInverseTable = "profiles"
	// ProfileFkColumn is the table column denoting the profile_fk relation/edge.
	ProfileFkColumn = "profile_parameter_templates"
	// ProfilesTable is the table that holds the profiles relation/edge.
	ProfilesTable = "profiles"
	// ProfilesInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfilesInverseTable = "profiles"
	// ProfilesColumn is the table column denoting the profiles relation/edge.
	ProfilesColumn = "parameter_template_profiles"
)

// Columns holds all SQL columns for parametertemplate fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDisplayNameLc,
	FieldDefault,
	FieldType,
	FieldValidator,
	FieldSuggestedValues,
	FieldMandatory,
	FieldSecret,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "parameter_templates"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"profile_parameter_templates",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ParameterTemplate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDisplayNameLc orders the results by the display_name_lc field.
func ByDisplayNameLc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayNameLc, opts...).ToFunc()
}

// ByDefault orders the results by the default field.
func ByDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefault, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByValidator orders the results by the validator field.
func ByValidator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidator, opts...).ToFunc()
}

// ByMandatory orders the results by the mandatory field.
func ByMandatory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMandatory, opts...).ToFunc()
}

// BySecret orders the results by the secret field.
func BySecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecret, opts...).ToFunc()
}

// ByProfileFkField orders the results by profile_fk field.
func ByProfileFkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileFkStep(), sql.OrderByField(field, opts...))
	}
}

// ByProfilesCount orders the results by profiles count.
func ByProfilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfilesStep(), opts...)
	}
}

// ByProfiles orders the results by profiles terms.
func ByProfiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProfileFkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileFkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileFkTable, ProfileFkColumn),
	)
}
func newProfilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProfilesTable, ProfilesColumn),
	)
}
