// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/applicationdependency"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/ignoredresource"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/registry"
)

// ApplicationUpdate is the builder for updating Application entities.
type ApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (au *ApplicationUpdate) Where(ps ...predicate.Application) *ApplicationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *ApplicationUpdate) SetName(s string) *ApplicationUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableName(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetDisplayName sets the "display_name" field.
func (au *ApplicationUpdate) SetDisplayName(s string) *ApplicationUpdate {
	au.mutation.SetDisplayName(s)
	return au
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableDisplayName(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetDisplayName(*s)
	}
	return au
}

// ClearDisplayName clears the value of the "display_name" field.
func (au *ApplicationUpdate) ClearDisplayName() *ApplicationUpdate {
	au.mutation.ClearDisplayName()
	return au
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (au *ApplicationUpdate) SetDisplayNameLc(s string) *ApplicationUpdate {
	au.mutation.SetDisplayNameLc(s)
	return au
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableDisplayNameLc(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetDisplayNameLc(*s)
	}
	return au
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (au *ApplicationUpdate) ClearDisplayNameLc() *ApplicationUpdate {
	au.mutation.ClearDisplayNameLc()
	return au
}

// SetDescription sets the "description" field.
func (au *ApplicationUpdate) SetDescription(s string) *ApplicationUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableDescription(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *ApplicationUpdate) ClearDescription() *ApplicationUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *ApplicationUpdate) SetUpdateTime(t time.Time) *ApplicationUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetProjectUUID sets the "project_uuid" field.
func (au *ApplicationUpdate) SetProjectUUID(s string) *ApplicationUpdate {
	au.mutation.SetProjectUUID(s)
	return au
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableProjectUUID(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetProjectUUID(*s)
	}
	return au
}

// SetVersion sets the "version" field.
func (au *ApplicationUpdate) SetVersion(s string) *ApplicationUpdate {
	au.mutation.SetVersion(s)
	return au
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableVersion(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetVersion(*s)
	}
	return au
}

// SetChartName sets the "chart_name" field.
func (au *ApplicationUpdate) SetChartName(s string) *ApplicationUpdate {
	au.mutation.SetChartName(s)
	return au
}

// SetNillableChartName sets the "chart_name" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableChartName(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetChartName(*s)
	}
	return au
}

// SetChartVersion sets the "chart_version" field.
func (au *ApplicationUpdate) SetChartVersion(s string) *ApplicationUpdate {
	au.mutation.SetChartVersion(s)
	return au
}

// SetNillableChartVersion sets the "chart_version" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableChartVersion(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetChartVersion(*s)
	}
	return au
}

// SetKind sets the "kind" field.
func (au *ApplicationUpdate) SetKind(s string) *ApplicationUpdate {
	au.mutation.SetKind(s)
	return au
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableKind(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetKind(*s)
	}
	return au
}

// ClearKind clears the value of the "kind" field.
func (au *ApplicationUpdate) ClearKind() *ApplicationUpdate {
	au.mutation.ClearKind()
	return au
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (au *ApplicationUpdate) AddProfileIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.AddProfileIDs(ids...)
	return au
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (au *ApplicationUpdate) AddProfiles(p ...*Profile) *ApplicationUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddProfileIDs(ids...)
}

// SetRegistryFkID sets the "registry_fk" edge to the Registry entity by ID.
func (au *ApplicationUpdate) SetRegistryFkID(id uint64) *ApplicationUpdate {
	au.mutation.SetRegistryFkID(id)
	return au
}

// SetRegistryFk sets the "registry_fk" edge to the Registry entity.
func (au *ApplicationUpdate) SetRegistryFk(r *Registry) *ApplicationUpdate {
	return au.SetRegistryFkID(r.ID)
}

// SetImageRegistryFkID sets the "image_registry_fk" edge to the Registry entity by ID.
func (au *ApplicationUpdate) SetImageRegistryFkID(id uint64) *ApplicationUpdate {
	au.mutation.SetImageRegistryFkID(id)
	return au
}

// SetNillableImageRegistryFkID sets the "image_registry_fk" edge to the Registry entity by ID if the given value is not nil.
func (au *ApplicationUpdate) SetNillableImageRegistryFkID(id *uint64) *ApplicationUpdate {
	if id != nil {
		au = au.SetImageRegistryFkID(*id)
	}
	return au
}

// SetImageRegistryFk sets the "image_registry_fk" edge to the Registry entity.
func (au *ApplicationUpdate) SetImageRegistryFk(r *Registry) *ApplicationUpdate {
	return au.SetImageRegistryFkID(r.ID)
}

// AddDeploymentPackageFkIDs adds the "deployment_package_fk" edge to the DeploymentPackage entity by IDs.
func (au *ApplicationUpdate) AddDeploymentPackageFkIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.AddDeploymentPackageFkIDs(ids...)
	return au
}

// AddDeploymentPackageFk adds the "deployment_package_fk" edges to the DeploymentPackage entity.
func (au *ApplicationUpdate) AddDeploymentPackageFk(d ...*DeploymentPackage) *ApplicationUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeploymentPackageFkIDs(ids...)
}

// AddDependencySourceFkIDs adds the "dependency_source_fk" edge to the ApplicationDependency entity by IDs.
func (au *ApplicationUpdate) AddDependencySourceFkIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.AddDependencySourceFkIDs(ids...)
	return au
}

// AddDependencySourceFk adds the "dependency_source_fk" edges to the ApplicationDependency entity.
func (au *ApplicationUpdate) AddDependencySourceFk(a ...*ApplicationDependency) *ApplicationUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddDependencySourceFkIDs(ids...)
}

// AddDependencyTargetFkIDs adds the "dependency_target_fk" edge to the ApplicationDependency entity by IDs.
func (au *ApplicationUpdate) AddDependencyTargetFkIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.AddDependencyTargetFkIDs(ids...)
	return au
}

// AddDependencyTargetFk adds the "dependency_target_fk" edges to the ApplicationDependency entity.
func (au *ApplicationUpdate) AddDependencyTargetFk(a ...*ApplicationDependency) *ApplicationUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddDependencyTargetFkIDs(ids...)
}

// SetDefaultProfileID sets the "default_profile" edge to the Profile entity by ID.
func (au *ApplicationUpdate) SetDefaultProfileID(id uint64) *ApplicationUpdate {
	au.mutation.SetDefaultProfileID(id)
	return au
}

// SetNillableDefaultProfileID sets the "default_profile" edge to the Profile entity by ID if the given value is not nil.
func (au *ApplicationUpdate) SetNillableDefaultProfileID(id *uint64) *ApplicationUpdate {
	if id != nil {
		au = au.SetDefaultProfileID(*id)
	}
	return au
}

// SetDefaultProfile sets the "default_profile" edge to the Profile entity.
func (au *ApplicationUpdate) SetDefaultProfile(p *Profile) *ApplicationUpdate {
	return au.SetDefaultProfileID(p.ID)
}

// AddIgnoredResourceIDs adds the "ignored_resources" edge to the IgnoredResource entity by IDs.
func (au *ApplicationUpdate) AddIgnoredResourceIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.AddIgnoredResourceIDs(ids...)
	return au
}

// AddIgnoredResources adds the "ignored_resources" edges to the IgnoredResource entity.
func (au *ApplicationUpdate) AddIgnoredResources(i ...*IgnoredResource) *ApplicationUpdate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return au.AddIgnoredResourceIDs(ids...)
}

// Mutation returns the ApplicationMutation object of the builder.
func (au *ApplicationUpdate) Mutation() *ApplicationMutation {
	return au.mutation
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (au *ApplicationUpdate) ClearProfiles() *ApplicationUpdate {
	au.mutation.ClearProfiles()
	return au
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (au *ApplicationUpdate) RemoveProfileIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.RemoveProfileIDs(ids...)
	return au
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (au *ApplicationUpdate) RemoveProfiles(p ...*Profile) *ApplicationUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemoveProfileIDs(ids...)
}

// ClearRegistryFk clears the "registry_fk" edge to the Registry entity.
func (au *ApplicationUpdate) ClearRegistryFk() *ApplicationUpdate {
	au.mutation.ClearRegistryFk()
	return au
}

// ClearImageRegistryFk clears the "image_registry_fk" edge to the Registry entity.
func (au *ApplicationUpdate) ClearImageRegistryFk() *ApplicationUpdate {
	au.mutation.ClearImageRegistryFk()
	return au
}

// ClearDeploymentPackageFk clears all "deployment_package_fk" edges to the DeploymentPackage entity.
func (au *ApplicationUpdate) ClearDeploymentPackageFk() *ApplicationUpdate {
	au.mutation.ClearDeploymentPackageFk()
	return au
}

// RemoveDeploymentPackageFkIDs removes the "deployment_package_fk" edge to DeploymentPackage entities by IDs.
func (au *ApplicationUpdate) RemoveDeploymentPackageFkIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.RemoveDeploymentPackageFkIDs(ids...)
	return au
}

// RemoveDeploymentPackageFk removes "deployment_package_fk" edges to DeploymentPackage entities.
func (au *ApplicationUpdate) RemoveDeploymentPackageFk(d ...*DeploymentPackage) *ApplicationUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeploymentPackageFkIDs(ids...)
}

// ClearDependencySourceFk clears all "dependency_source_fk" edges to the ApplicationDependency entity.
func (au *ApplicationUpdate) ClearDependencySourceFk() *ApplicationUpdate {
	au.mutation.ClearDependencySourceFk()
	return au
}

// RemoveDependencySourceFkIDs removes the "dependency_source_fk" edge to ApplicationDependency entities by IDs.
func (au *ApplicationUpdate) RemoveDependencySourceFkIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.RemoveDependencySourceFkIDs(ids...)
	return au
}

// RemoveDependencySourceFk removes "dependency_source_fk" edges to ApplicationDependency entities.
func (au *ApplicationUpdate) RemoveDependencySourceFk(a ...*ApplicationDependency) *ApplicationUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveDependencySourceFkIDs(ids...)
}

// ClearDependencyTargetFk clears all "dependency_target_fk" edges to the ApplicationDependency entity.
func (au *ApplicationUpdate) ClearDependencyTargetFk() *ApplicationUpdate {
	au.mutation.ClearDependencyTargetFk()
	return au
}

// RemoveDependencyTargetFkIDs removes the "dependency_target_fk" edge to ApplicationDependency entities by IDs.
func (au *ApplicationUpdate) RemoveDependencyTargetFkIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.RemoveDependencyTargetFkIDs(ids...)
	return au
}

// RemoveDependencyTargetFk removes "dependency_target_fk" edges to ApplicationDependency entities.
func (au *ApplicationUpdate) RemoveDependencyTargetFk(a ...*ApplicationDependency) *ApplicationUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveDependencyTargetFkIDs(ids...)
}

// ClearDefaultProfile clears the "default_profile" edge to the Profile entity.
func (au *ApplicationUpdate) ClearDefaultProfile() *ApplicationUpdate {
	au.mutation.ClearDefaultProfile()
	return au
}

// ClearIgnoredResources clears all "ignored_resources" edges to the IgnoredResource entity.
func (au *ApplicationUpdate) ClearIgnoredResources() *ApplicationUpdate {
	au.mutation.ClearIgnoredResources()
	return au
}

// RemoveIgnoredResourceIDs removes the "ignored_resources" edge to IgnoredResource entities by IDs.
func (au *ApplicationUpdate) RemoveIgnoredResourceIDs(ids ...uint64) *ApplicationUpdate {
	au.mutation.RemoveIgnoredResourceIDs(ids...)
	return au
}

// RemoveIgnoredResources removes "ignored_resources" edges to IgnoredResource entities.
func (au *ApplicationUpdate) RemoveIgnoredResources(i ...*IgnoredResource) *ApplicationUpdate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return au.RemoveIgnoredResourceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApplicationUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApplicationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApplicationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ApplicationUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := application.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ApplicationUpdate) check() error {
	if _, ok := au.mutation.RegistryFkID(); au.mutation.RegistryFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Application.registry_fk"`)
	}
	return nil
}

func (au *ApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.DisplayName(); ok {
		_spec.SetField(application.FieldDisplayName, field.TypeString, value)
	}
	if au.mutation.DisplayNameCleared() {
		_spec.ClearField(application.FieldDisplayName, field.TypeString)
	}
	if value, ok := au.mutation.DisplayNameLc(); ok {
		_spec.SetField(application.FieldDisplayNameLc, field.TypeString, value)
	}
	if au.mutation.DisplayNameLcCleared() {
		_spec.ClearField(application.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(application.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(application.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(application.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.ProjectUUID(); ok {
		_spec.SetField(application.FieldProjectUUID, field.TypeString, value)
	}
	if value, ok := au.mutation.Version(); ok {
		_spec.SetField(application.FieldVersion, field.TypeString, value)
	}
	if value, ok := au.mutation.ChartName(); ok {
		_spec.SetField(application.FieldChartName, field.TypeString, value)
	}
	if value, ok := au.mutation.ChartVersion(); ok {
		_spec.SetField(application.FieldChartVersion, field.TypeString, value)
	}
	if value, ok := au.mutation.Kind(); ok {
		_spec.SetField(application.FieldKind, field.TypeString, value)
	}
	if au.mutation.KindCleared() {
		_spec.ClearField(application.FieldKind, field.TypeString)
	}
	if au.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.ProfilesTable,
			Columns: []string{application.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !au.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.ProfilesTable,
			Columns: []string{application.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.ProfilesTable,
			Columns: []string{application.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RegistryFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.RegistryFkTable,
			Columns: []string{application.RegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RegistryFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.RegistryFkTable,
			Columns: []string{application.RegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ImageRegistryFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ImageRegistryFkTable,
			Columns: []string{application.ImageRegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ImageRegistryFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ImageRegistryFkTable,
			Columns: []string{application.ImageRegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   application.DeploymentPackageFkTable,
			Columns: application.DeploymentPackageFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeploymentPackageFkIDs(); len(nodes) > 0 && !au.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   application.DeploymentPackageFkTable,
			Columns: application.DeploymentPackageFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   application.DeploymentPackageFkTable,
			Columns: application.DeploymentPackageFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DependencySourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencySourceFkTable,
			Columns: []string{application.DependencySourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDependencySourceFkIDs(); len(nodes) > 0 && !au.mutation.DependencySourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencySourceFkTable,
			Columns: []string{application.DependencySourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DependencySourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencySourceFkTable,
			Columns: []string{application.DependencySourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DependencyTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencyTargetFkTable,
			Columns: []string{application.DependencyTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDependencyTargetFkIDs(); len(nodes) > 0 && !au.mutation.DependencyTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencyTargetFkTable,
			Columns: []string{application.DependencyTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DependencyTargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencyTargetFkTable,
			Columns: []string{application.DependencyTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DefaultProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.DefaultProfileTable,
			Columns: []string{application.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DefaultProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.DefaultProfileTable,
			Columns: []string{application.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.IgnoredResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.IgnoredResourcesTable,
			Columns: []string{application.IgnoredResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedIgnoredResourcesIDs(); len(nodes) > 0 && !au.mutation.IgnoredResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.IgnoredResourcesTable,
			Columns: []string{application.IgnoredResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.IgnoredResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.IgnoredResourcesTable,
			Columns: []string{application.IgnoredResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ApplicationUpdateOne is the builder for updating a single Application entity.
type ApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationMutation
}

// SetName sets the "name" field.
func (auo *ApplicationUpdateOne) SetName(s string) *ApplicationUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableName(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetDisplayName sets the "display_name" field.
func (auo *ApplicationUpdateOne) SetDisplayName(s string) *ApplicationUpdateOne {
	auo.mutation.SetDisplayName(s)
	return auo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableDisplayName(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetDisplayName(*s)
	}
	return auo
}

// ClearDisplayName clears the value of the "display_name" field.
func (auo *ApplicationUpdateOne) ClearDisplayName() *ApplicationUpdateOne {
	auo.mutation.ClearDisplayName()
	return auo
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (auo *ApplicationUpdateOne) SetDisplayNameLc(s string) *ApplicationUpdateOne {
	auo.mutation.SetDisplayNameLc(s)
	return auo
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableDisplayNameLc(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetDisplayNameLc(*s)
	}
	return auo
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (auo *ApplicationUpdateOne) ClearDisplayNameLc() *ApplicationUpdateOne {
	auo.mutation.ClearDisplayNameLc()
	return auo
}

// SetDescription sets the "description" field.
func (auo *ApplicationUpdateOne) SetDescription(s string) *ApplicationUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableDescription(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *ApplicationUpdateOne) ClearDescription() *ApplicationUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetUpdateTime sets the "update_time" field.
func (auo *ApplicationUpdateOne) SetUpdateTime(t time.Time) *ApplicationUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetProjectUUID sets the "project_uuid" field.
func (auo *ApplicationUpdateOne) SetProjectUUID(s string) *ApplicationUpdateOne {
	auo.mutation.SetProjectUUID(s)
	return auo
}

// SetNillableProjectUUID sets the "project_uuid" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableProjectUUID(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetProjectUUID(*s)
	}
	return auo
}

// SetVersion sets the "version" field.
func (auo *ApplicationUpdateOne) SetVersion(s string) *ApplicationUpdateOne {
	auo.mutation.SetVersion(s)
	return auo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableVersion(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetVersion(*s)
	}
	return auo
}

// SetChartName sets the "chart_name" field.
func (auo *ApplicationUpdateOne) SetChartName(s string) *ApplicationUpdateOne {
	auo.mutation.SetChartName(s)
	return auo
}

// SetNillableChartName sets the "chart_name" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableChartName(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetChartName(*s)
	}
	return auo
}

// SetChartVersion sets the "chart_version" field.
func (auo *ApplicationUpdateOne) SetChartVersion(s string) *ApplicationUpdateOne {
	auo.mutation.SetChartVersion(s)
	return auo
}

// SetNillableChartVersion sets the "chart_version" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableChartVersion(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetChartVersion(*s)
	}
	return auo
}

// SetKind sets the "kind" field.
func (auo *ApplicationUpdateOne) SetKind(s string) *ApplicationUpdateOne {
	auo.mutation.SetKind(s)
	return auo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableKind(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetKind(*s)
	}
	return auo
}

// ClearKind clears the value of the "kind" field.
func (auo *ApplicationUpdateOne) ClearKind() *ApplicationUpdateOne {
	auo.mutation.ClearKind()
	return auo
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (auo *ApplicationUpdateOne) AddProfileIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.AddProfileIDs(ids...)
	return auo
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (auo *ApplicationUpdateOne) AddProfiles(p ...*Profile) *ApplicationUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddProfileIDs(ids...)
}

// SetRegistryFkID sets the "registry_fk" edge to the Registry entity by ID.
func (auo *ApplicationUpdateOne) SetRegistryFkID(id uint64) *ApplicationUpdateOne {
	auo.mutation.SetRegistryFkID(id)
	return auo
}

// SetRegistryFk sets the "registry_fk" edge to the Registry entity.
func (auo *ApplicationUpdateOne) SetRegistryFk(r *Registry) *ApplicationUpdateOne {
	return auo.SetRegistryFkID(r.ID)
}

// SetImageRegistryFkID sets the "image_registry_fk" edge to the Registry entity by ID.
func (auo *ApplicationUpdateOne) SetImageRegistryFkID(id uint64) *ApplicationUpdateOne {
	auo.mutation.SetImageRegistryFkID(id)
	return auo
}

// SetNillableImageRegistryFkID sets the "image_registry_fk" edge to the Registry entity by ID if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableImageRegistryFkID(id *uint64) *ApplicationUpdateOne {
	if id != nil {
		auo = auo.SetImageRegistryFkID(*id)
	}
	return auo
}

// SetImageRegistryFk sets the "image_registry_fk" edge to the Registry entity.
func (auo *ApplicationUpdateOne) SetImageRegistryFk(r *Registry) *ApplicationUpdateOne {
	return auo.SetImageRegistryFkID(r.ID)
}

// AddDeploymentPackageFkIDs adds the "deployment_package_fk" edge to the DeploymentPackage entity by IDs.
func (auo *ApplicationUpdateOne) AddDeploymentPackageFkIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.AddDeploymentPackageFkIDs(ids...)
	return auo
}

// AddDeploymentPackageFk adds the "deployment_package_fk" edges to the DeploymentPackage entity.
func (auo *ApplicationUpdateOne) AddDeploymentPackageFk(d ...*DeploymentPackage) *ApplicationUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeploymentPackageFkIDs(ids...)
}

// AddDependencySourceFkIDs adds the "dependency_source_fk" edge to the ApplicationDependency entity by IDs.
func (auo *ApplicationUpdateOne) AddDependencySourceFkIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.AddDependencySourceFkIDs(ids...)
	return auo
}

// AddDependencySourceFk adds the "dependency_source_fk" edges to the ApplicationDependency entity.
func (auo *ApplicationUpdateOne) AddDependencySourceFk(a ...*ApplicationDependency) *ApplicationUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddDependencySourceFkIDs(ids...)
}

// AddDependencyTargetFkIDs adds the "dependency_target_fk" edge to the ApplicationDependency entity by IDs.
func (auo *ApplicationUpdateOne) AddDependencyTargetFkIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.AddDependencyTargetFkIDs(ids...)
	return auo
}

// AddDependencyTargetFk adds the "dependency_target_fk" edges to the ApplicationDependency entity.
func (auo *ApplicationUpdateOne) AddDependencyTargetFk(a ...*ApplicationDependency) *ApplicationUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddDependencyTargetFkIDs(ids...)
}

// SetDefaultProfileID sets the "default_profile" edge to the Profile entity by ID.
func (auo *ApplicationUpdateOne) SetDefaultProfileID(id uint64) *ApplicationUpdateOne {
	auo.mutation.SetDefaultProfileID(id)
	return auo
}

// SetNillableDefaultProfileID sets the "default_profile" edge to the Profile entity by ID if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableDefaultProfileID(id *uint64) *ApplicationUpdateOne {
	if id != nil {
		auo = auo.SetDefaultProfileID(*id)
	}
	return auo
}

// SetDefaultProfile sets the "default_profile" edge to the Profile entity.
func (auo *ApplicationUpdateOne) SetDefaultProfile(p *Profile) *ApplicationUpdateOne {
	return auo.SetDefaultProfileID(p.ID)
}

// AddIgnoredResourceIDs adds the "ignored_resources" edge to the IgnoredResource entity by IDs.
func (auo *ApplicationUpdateOne) AddIgnoredResourceIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.AddIgnoredResourceIDs(ids...)
	return auo
}

// AddIgnoredResources adds the "ignored_resources" edges to the IgnoredResource entity.
func (auo *ApplicationUpdateOne) AddIgnoredResources(i ...*IgnoredResource) *ApplicationUpdateOne {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return auo.AddIgnoredResourceIDs(ids...)
}

// Mutation returns the ApplicationMutation object of the builder.
func (auo *ApplicationUpdateOne) Mutation() *ApplicationMutation {
	return auo.mutation
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (auo *ApplicationUpdateOne) ClearProfiles() *ApplicationUpdateOne {
	auo.mutation.ClearProfiles()
	return auo
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (auo *ApplicationUpdateOne) RemoveProfileIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.RemoveProfileIDs(ids...)
	return auo
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (auo *ApplicationUpdateOne) RemoveProfiles(p ...*Profile) *ApplicationUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemoveProfileIDs(ids...)
}

// ClearRegistryFk clears the "registry_fk" edge to the Registry entity.
func (auo *ApplicationUpdateOne) ClearRegistryFk() *ApplicationUpdateOne {
	auo.mutation.ClearRegistryFk()
	return auo
}

// ClearImageRegistryFk clears the "image_registry_fk" edge to the Registry entity.
func (auo *ApplicationUpdateOne) ClearImageRegistryFk() *ApplicationUpdateOne {
	auo.mutation.ClearImageRegistryFk()
	return auo
}

// ClearDeploymentPackageFk clears all "deployment_package_fk" edges to the DeploymentPackage entity.
func (auo *ApplicationUpdateOne) ClearDeploymentPackageFk() *ApplicationUpdateOne {
	auo.mutation.ClearDeploymentPackageFk()
	return auo
}

// RemoveDeploymentPackageFkIDs removes the "deployment_package_fk" edge to DeploymentPackage entities by IDs.
func (auo *ApplicationUpdateOne) RemoveDeploymentPackageFkIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.RemoveDeploymentPackageFkIDs(ids...)
	return auo
}

// RemoveDeploymentPackageFk removes "deployment_package_fk" edges to DeploymentPackage entities.
func (auo *ApplicationUpdateOne) RemoveDeploymentPackageFk(d ...*DeploymentPackage) *ApplicationUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeploymentPackageFkIDs(ids...)
}

// ClearDependencySourceFk clears all "dependency_source_fk" edges to the ApplicationDependency entity.
func (auo *ApplicationUpdateOne) ClearDependencySourceFk() *ApplicationUpdateOne {
	auo.mutation.ClearDependencySourceFk()
	return auo
}

// RemoveDependencySourceFkIDs removes the "dependency_source_fk" edge to ApplicationDependency entities by IDs.
func (auo *ApplicationUpdateOne) RemoveDependencySourceFkIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.RemoveDependencySourceFkIDs(ids...)
	return auo
}

// RemoveDependencySourceFk removes "dependency_source_fk" edges to ApplicationDependency entities.
func (auo *ApplicationUpdateOne) RemoveDependencySourceFk(a ...*ApplicationDependency) *ApplicationUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveDependencySourceFkIDs(ids...)
}

// ClearDependencyTargetFk clears all "dependency_target_fk" edges to the ApplicationDependency entity.
func (auo *ApplicationUpdateOne) ClearDependencyTargetFk() *ApplicationUpdateOne {
	auo.mutation.ClearDependencyTargetFk()
	return auo
}

// RemoveDependencyTargetFkIDs removes the "dependency_target_fk" edge to ApplicationDependency entities by IDs.
func (auo *ApplicationUpdateOne) RemoveDependencyTargetFkIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.RemoveDependencyTargetFkIDs(ids...)
	return auo
}

// RemoveDependencyTargetFk removes "dependency_target_fk" edges to ApplicationDependency entities.
func (auo *ApplicationUpdateOne) RemoveDependencyTargetFk(a ...*ApplicationDependency) *ApplicationUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveDependencyTargetFkIDs(ids...)
}

// ClearDefaultProfile clears the "default_profile" edge to the Profile entity.
func (auo *ApplicationUpdateOne) ClearDefaultProfile() *ApplicationUpdateOne {
	auo.mutation.ClearDefaultProfile()
	return auo
}

// ClearIgnoredResources clears all "ignored_resources" edges to the IgnoredResource entity.
func (auo *ApplicationUpdateOne) ClearIgnoredResources() *ApplicationUpdateOne {
	auo.mutation.ClearIgnoredResources()
	return auo
}

// RemoveIgnoredResourceIDs removes the "ignored_resources" edge to IgnoredResource entities by IDs.
func (auo *ApplicationUpdateOne) RemoveIgnoredResourceIDs(ids ...uint64) *ApplicationUpdateOne {
	auo.mutation.RemoveIgnoredResourceIDs(ids...)
	return auo
}

// RemoveIgnoredResources removes "ignored_resources" edges to IgnoredResource entities.
func (auo *ApplicationUpdateOne) RemoveIgnoredResources(i ...*IgnoredResource) *ApplicationUpdateOne {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return auo.RemoveIgnoredResourceIDs(ids...)
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (auo *ApplicationUpdateOne) Where(ps ...predicate.Application) *ApplicationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApplicationUpdateOne) Select(field string, fields ...string) *ApplicationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Application entity.
func (auo *ApplicationUpdateOne) Save(ctx context.Context) (*Application, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApplicationUpdateOne) SaveX(ctx context.Context) *Application {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ApplicationUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := application.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ApplicationUpdateOne) check() error {
	if _, ok := auo.mutation.RegistryFkID(); auo.mutation.RegistryFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Application.registry_fk"`)
	}
	return nil
}

func (auo *ApplicationUpdateOne) sqlSave(ctx context.Context) (_node *Application, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Application.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, application.FieldID)
		for _, f := range fields {
			if !application.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != application.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.DisplayName(); ok {
		_spec.SetField(application.FieldDisplayName, field.TypeString, value)
	}
	if auo.mutation.DisplayNameCleared() {
		_spec.ClearField(application.FieldDisplayName, field.TypeString)
	}
	if value, ok := auo.mutation.DisplayNameLc(); ok {
		_spec.SetField(application.FieldDisplayNameLc, field.TypeString, value)
	}
	if auo.mutation.DisplayNameLcCleared() {
		_spec.ClearField(application.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(application.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(application.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(application.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ProjectUUID(); ok {
		_spec.SetField(application.FieldProjectUUID, field.TypeString, value)
	}
	if value, ok := auo.mutation.Version(); ok {
		_spec.SetField(application.FieldVersion, field.TypeString, value)
	}
	if value, ok := auo.mutation.ChartName(); ok {
		_spec.SetField(application.FieldChartName, field.TypeString, value)
	}
	if value, ok := auo.mutation.ChartVersion(); ok {
		_spec.SetField(application.FieldChartVersion, field.TypeString, value)
	}
	if value, ok := auo.mutation.Kind(); ok {
		_spec.SetField(application.FieldKind, field.TypeString, value)
	}
	if auo.mutation.KindCleared() {
		_spec.ClearField(application.FieldKind, field.TypeString)
	}
	if auo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.ProfilesTable,
			Columns: []string{application.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !auo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.ProfilesTable,
			Columns: []string{application.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.ProfilesTable,
			Columns: []string{application.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RegistryFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.RegistryFkTable,
			Columns: []string{application.RegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RegistryFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.RegistryFkTable,
			Columns: []string{application.RegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ImageRegistryFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ImageRegistryFkTable,
			Columns: []string{application.ImageRegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ImageRegistryFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ImageRegistryFkTable,
			Columns: []string{application.ImageRegistryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   application.DeploymentPackageFkTable,
			Columns: application.DeploymentPackageFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeploymentPackageFkIDs(); len(nodes) > 0 && !auo.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   application.DeploymentPackageFkTable,
			Columns: application.DeploymentPackageFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   application.DeploymentPackageFkTable,
			Columns: application.DeploymentPackageFkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DependencySourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencySourceFkTable,
			Columns: []string{application.DependencySourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDependencySourceFkIDs(); len(nodes) > 0 && !auo.mutation.DependencySourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencySourceFkTable,
			Columns: []string{application.DependencySourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DependencySourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencySourceFkTable,
			Columns: []string{application.DependencySourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DependencyTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencyTargetFkTable,
			Columns: []string{application.DependencyTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDependencyTargetFkIDs(); len(nodes) > 0 && !auo.mutation.DependencyTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencyTargetFkTable,
			Columns: []string{application.DependencyTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DependencyTargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   application.DependencyTargetFkTable,
			Columns: []string{application.DependencyTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(applicationdependency.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DefaultProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.DefaultProfileTable,
			Columns: []string{application.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DefaultProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.DefaultProfileTable,
			Columns: []string{application.DefaultProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.IgnoredResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.IgnoredResourcesTable,
			Columns: []string{application.IgnoredResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedIgnoredResourcesIDs(); len(nodes) > 0 && !auo.mutation.IgnoredResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.IgnoredResourcesTable,
			Columns: []string{application.IgnoredResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.IgnoredResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.IgnoredResourcesTable,
			Columns: []string{application.IgnoredResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Application{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
