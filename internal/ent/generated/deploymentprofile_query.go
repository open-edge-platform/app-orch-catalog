// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentprofile"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// DeploymentProfileQuery is the builder for querying DeploymentProfile entities.
type DeploymentProfileQuery struct {
	config
	ctx                     *QueryContext
	order                   []deploymentprofile.OrderOption
	inters                  []Interceptor
	predicates              []predicate.DeploymentProfile
	withProfiles            *ProfileQuery
	withDeploymentPackageFk *DeploymentPackageQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeploymentProfileQuery builder.
func (dpq *DeploymentProfileQuery) Where(ps ...predicate.DeploymentProfile) *DeploymentProfileQuery {
	dpq.predicates = append(dpq.predicates, ps...)
	return dpq
}

// Limit the number of records to be returned by this query.
func (dpq *DeploymentProfileQuery) Limit(limit int) *DeploymentProfileQuery {
	dpq.ctx.Limit = &limit
	return dpq
}

// Offset to start from.
func (dpq *DeploymentProfileQuery) Offset(offset int) *DeploymentProfileQuery {
	dpq.ctx.Offset = &offset
	return dpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dpq *DeploymentProfileQuery) Unique(unique bool) *DeploymentProfileQuery {
	dpq.ctx.Unique = &unique
	return dpq
}

// Order specifies how the records should be ordered.
func (dpq *DeploymentProfileQuery) Order(o ...deploymentprofile.OrderOption) *DeploymentProfileQuery {
	dpq.order = append(dpq.order, o...)
	return dpq
}

// QueryProfiles chains the current query on the "profiles" edge.
func (dpq *DeploymentProfileQuery) QueryProfiles() *ProfileQuery {
	query := (&ProfileClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentprofile.Table, deploymentprofile.FieldID, selector),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deploymentprofile.ProfilesTable, deploymentprofile.ProfilesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeploymentPackageFk chains the current query on the "deployment_package_fk" edge.
func (dpq *DeploymentProfileQuery) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	query := (&DeploymentPackageClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentprofile.Table, deploymentprofile.FieldID, selector),
			sqlgraph.To(deploymentpackage.Table, deploymentpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deploymentprofile.DeploymentPackageFkTable, deploymentprofile.DeploymentPackageFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeploymentProfile entity from the query.
// Returns a *NotFoundError when no DeploymentProfile was found.
func (dpq *DeploymentProfileQuery) First(ctx context.Context) (*DeploymentProfile, error) {
	nodes, err := dpq.Limit(1).All(setContextOp(ctx, dpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deploymentprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dpq *DeploymentProfileQuery) FirstX(ctx context.Context) *DeploymentProfile {
	node, err := dpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeploymentProfile ID from the query.
// Returns a *NotFoundError when no DeploymentProfile ID was found.
func (dpq *DeploymentProfileQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = dpq.Limit(1).IDs(setContextOp(ctx, dpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deploymentprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dpq *DeploymentProfileQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := dpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeploymentProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeploymentProfile entity is found.
// Returns a *NotFoundError when no DeploymentProfile entities are found.
func (dpq *DeploymentProfileQuery) Only(ctx context.Context) (*DeploymentProfile, error) {
	nodes, err := dpq.Limit(2).All(setContextOp(ctx, dpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deploymentprofile.Label}
	default:
		return nil, &NotSingularError{deploymentprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dpq *DeploymentProfileQuery) OnlyX(ctx context.Context) *DeploymentProfile {
	node, err := dpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeploymentProfile ID in the query.
// Returns a *NotSingularError when more than one DeploymentProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (dpq *DeploymentProfileQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = dpq.Limit(2).IDs(setContextOp(ctx, dpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deploymentprofile.Label}
	default:
		err = &NotSingularError{deploymentprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dpq *DeploymentProfileQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := dpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeploymentProfiles.
func (dpq *DeploymentProfileQuery) All(ctx context.Context) ([]*DeploymentProfile, error) {
	ctx = setContextOp(ctx, dpq.ctx, "All")
	if err := dpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeploymentProfile, *DeploymentProfileQuery]()
	return withInterceptors[[]*DeploymentProfile](ctx, dpq, qr, dpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dpq *DeploymentProfileQuery) AllX(ctx context.Context) []*DeploymentProfile {
	nodes, err := dpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeploymentProfile IDs.
func (dpq *DeploymentProfileQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if dpq.ctx.Unique == nil && dpq.path != nil {
		dpq.Unique(true)
	}
	ctx = setContextOp(ctx, dpq.ctx, "IDs")
	if err = dpq.Select(deploymentprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dpq *DeploymentProfileQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := dpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dpq *DeploymentProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dpq.ctx, "Count")
	if err := dpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dpq, querierCount[*DeploymentProfileQuery](), dpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dpq *DeploymentProfileQuery) CountX(ctx context.Context) int {
	count, err := dpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dpq *DeploymentProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dpq.ctx, "Exist")
	switch _, err := dpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dpq *DeploymentProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := dpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeploymentProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dpq *DeploymentProfileQuery) Clone() *DeploymentProfileQuery {
	if dpq == nil {
		return nil
	}
	return &DeploymentProfileQuery{
		config:                  dpq.config,
		ctx:                     dpq.ctx.Clone(),
		order:                   append([]deploymentprofile.OrderOption{}, dpq.order...),
		inters:                  append([]Interceptor{}, dpq.inters...),
		predicates:              append([]predicate.DeploymentProfile{}, dpq.predicates...),
		withProfiles:            dpq.withProfiles.Clone(),
		withDeploymentPackageFk: dpq.withDeploymentPackageFk.Clone(),
		// clone intermediate query.
		sql:  dpq.sql.Clone(),
		path: dpq.path,
	}
}

// WithProfiles tells the query-builder to eager-load the nodes that are connected to
// the "profiles" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentProfileQuery) WithProfiles(opts ...func(*ProfileQuery)) *DeploymentProfileQuery {
	query := (&ProfileClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withProfiles = query
	return dpq
}

// WithDeploymentPackageFk tells the query-builder to eager-load the nodes that are connected to
// the "deployment_package_fk" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DeploymentProfileQuery) WithDeploymentPackageFk(opts ...func(*DeploymentPackageQuery)) *DeploymentProfileQuery {
	query := (&DeploymentPackageClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withDeploymentPackageFk = query
	return dpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeploymentProfile.Query().
//		GroupBy(deploymentprofile.FieldName).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (dpq *DeploymentProfileQuery) GroupBy(field string, fields ...string) *DeploymentProfileGroupBy {
	dpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeploymentProfileGroupBy{build: dpq}
	grbuild.flds = &dpq.ctx.Fields
	grbuild.label = deploymentprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.DeploymentProfile.Query().
//		Select(deploymentprofile.FieldName).
//		Scan(ctx, &v)
func (dpq *DeploymentProfileQuery) Select(fields ...string) *DeploymentProfileSelect {
	dpq.ctx.Fields = append(dpq.ctx.Fields, fields...)
	sbuild := &DeploymentProfileSelect{DeploymentProfileQuery: dpq}
	sbuild.label = deploymentprofile.Label
	sbuild.flds, sbuild.scan = &dpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeploymentProfileSelect configured with the given aggregations.
func (dpq *DeploymentProfileQuery) Aggregate(fns ...AggregateFunc) *DeploymentProfileSelect {
	return dpq.Select().Aggregate(fns...)
}

func (dpq *DeploymentProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dpq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dpq); err != nil {
				return err
			}
		}
	}
	for _, f := range dpq.ctx.Fields {
		if !deploymentprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if dpq.path != nil {
		prev, err := dpq.path(ctx)
		if err != nil {
			return err
		}
		dpq.sql = prev
	}
	return nil
}

func (dpq *DeploymentProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeploymentProfile, error) {
	var (
		nodes       = []*DeploymentProfile{}
		withFKs     = dpq.withFKs
		_spec       = dpq.querySpec()
		loadedTypes = [2]bool{
			dpq.withProfiles != nil,
			dpq.withDeploymentPackageFk != nil,
		}
	)
	if dpq.withDeploymentPackageFk != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentprofile.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeploymentProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeploymentProfile{config: dpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dpq.withProfiles; query != nil {
		if err := dpq.loadProfiles(ctx, query, nodes,
			func(n *DeploymentProfile) { n.Edges.Profiles = []*Profile{} },
			func(n *DeploymentProfile, e *Profile) { n.Edges.Profiles = append(n.Edges.Profiles, e) }); err != nil {
			return nil, err
		}
	}
	if query := dpq.withDeploymentPackageFk; query != nil {
		if err := dpq.loadDeploymentPackageFk(ctx, query, nodes, nil,
			func(n *DeploymentProfile, e *DeploymentPackage) { n.Edges.DeploymentPackageFk = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dpq *DeploymentProfileQuery) loadProfiles(ctx context.Context, query *ProfileQuery, nodes []*DeploymentProfile, init func(*DeploymentProfile), assign func(*DeploymentProfile, *Profile)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*DeploymentProfile)
	nids := make(map[uint64]map[*DeploymentProfile]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(deploymentprofile.ProfilesTable)
		s.Join(joinT).On(s.C(profile.FieldID), joinT.C(deploymentprofile.ProfilesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(deploymentprofile.ProfilesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(deploymentprofile.ProfilesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*DeploymentProfile]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Profile](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "profiles" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dpq *DeploymentProfileQuery) loadDeploymentPackageFk(ctx context.Context, query *DeploymentPackageQuery, nodes []*DeploymentProfile, init func(*DeploymentProfile), assign func(*DeploymentProfile, *DeploymentPackage)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*DeploymentProfile)
	for i := range nodes {
		if nodes[i].deployment_package_deployment_profiles == nil {
			continue
		}
		fk := *nodes[i].deployment_package_deployment_profiles
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deploymentpackage.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "deployment_package_deployment_profiles" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dpq *DeploymentProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dpq.querySpec()
	_spec.Node.Columns = dpq.ctx.Fields
	if len(dpq.ctx.Fields) > 0 {
		_spec.Unique = dpq.ctx.Unique != nil && *dpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dpq.driver, _spec)
}

func (dpq *DeploymentProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deploymentprofile.Table, deploymentprofile.Columns, sqlgraph.NewFieldSpec(deploymentprofile.FieldID, field.TypeUint64))
	_spec.From = dpq.sql
	if unique := dpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dpq.path != nil {
		_spec.Unique = true
	}
	if fields := dpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentprofile.FieldID)
		for i := range fields {
			if fields[i] != deploymentprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dpq *DeploymentProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dpq.driver.Dialect())
	t1 := builder.Table(deploymentprofile.Table)
	columns := dpq.ctx.Fields
	if len(columns) == 0 {
		columns = deploymentprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dpq.sql != nil {
		selector = dpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dpq.ctx.Unique != nil && *dpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dpq.predicates {
		p(selector)
	}
	for _, p := range dpq.order {
		p(selector)
	}
	if offset := dpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DeploymentProfileGroupBy is the group-by builder for DeploymentProfile entities.
type DeploymentProfileGroupBy struct {
	selector
	build *DeploymentProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dpgb *DeploymentProfileGroupBy) Aggregate(fns ...AggregateFunc) *DeploymentProfileGroupBy {
	dpgb.fns = append(dpgb.fns, fns...)
	return dpgb
}

// Scan applies the selector query and scans the result into the given value.
func (dpgb *DeploymentProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dpgb.build.ctx, "GroupBy")
	if err := dpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeploymentProfileQuery, *DeploymentProfileGroupBy](ctx, dpgb.build, dpgb, dpgb.build.inters, v)
}

func (dpgb *DeploymentProfileGroupBy) sqlScan(ctx context.Context, root *DeploymentProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dpgb.fns))
	for _, fn := range dpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dpgb.flds)+len(dpgb.fns))
		for _, f := range *dpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeploymentProfileSelect is the builder for selecting fields of DeploymentProfile entities.
type DeploymentProfileSelect struct {
	*DeploymentProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dps *DeploymentProfileSelect) Aggregate(fns ...AggregateFunc) *DeploymentProfileSelect {
	dps.fns = append(dps.fns, fns...)
	return dps
}

// Scan applies the selector query and scans the result into the given value.
func (dps *DeploymentProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dps.ctx, "Select")
	if err := dps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeploymentProfileQuery, *DeploymentProfileSelect](ctx, dps.DeploymentProfileQuery, dps, dps.inters, v)
}

func (dps *DeploymentProfileSelect) sqlScan(ctx context.Context, root *DeploymentProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dps.fns))
	for _, fn := range dps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
