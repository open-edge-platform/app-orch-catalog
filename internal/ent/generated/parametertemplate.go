// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/parametertemplate"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/profile"
)

// ParameterTemplate is the model entity for the ParameterTemplate schema.
type ParameterTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// A unique name. Used in HTTP network paths.
	Name string `json:"name,omitempty"`
	// A display name.
	DisplayName string `json:"display_name,omitempty"`
	// Lowercase display name.
	DisplayNameLc string `json:"display_name_lc,omitempty"`
	// Default value for the parameter.
	Default string `json:"default,omitempty"`
	// Type of parameter.
	Type string `json:"type,omitempty"`
	// Validator.
	Validator string `json:"validator,omitempty"`
	// SuggestedValues holds the value of the "suggested_values" field.
	SuggestedValues []string `json:"suggested_values,omitempty"`
	// Indicates a mandatory parameter.
	Mandatory bool `json:"mandatory,omitempty"`
	// Indicates a secret parameter.
	Secret bool `json:"secret,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParameterTemplateQuery when eager-loading is set.
	Edges                       ParameterTemplateEdges `json:"edges"`
	profile_parameter_templates *uint64
	selectValues                sql.SelectValues
}

// ParameterTemplateEdges holds the relations/edges for other nodes in the graph.
type ParameterTemplateEdges struct {
	// Many parameter templates can be referenced by a profile
	ProfileFk *Profile `json:"profile_fk,omitempty"`
	// Profile can have 0 to many ParameterTemplates
	Profiles []*Profile `json:"profiles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfileFkOrErr returns the ProfileFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParameterTemplateEdges) ProfileFkOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.ProfileFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.ProfileFk, nil
	}
	return nil, &NotLoadedError{edge: "profile_fk"}
}

// ProfilesOrErr returns the Profiles value or an error if the edge
// was not loaded in eager-loading.
func (e ParameterTemplateEdges) ProfilesOrErr() ([]*Profile, error) {
	if e.loadedTypes[1] {
		return e.Profiles, nil
	}
	return nil, &NotLoadedError{edge: "profiles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ParameterTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case parametertemplate.FieldSuggestedValues:
			values[i] = new([]byte)
		case parametertemplate.FieldMandatory, parametertemplate.FieldSecret:
			values[i] = new(sql.NullBool)
		case parametertemplate.FieldID:
			values[i] = new(sql.NullInt64)
		case parametertemplate.FieldName, parametertemplate.FieldDisplayName, parametertemplate.FieldDisplayNameLc, parametertemplate.FieldDefault, parametertemplate.FieldType, parametertemplate.FieldValidator:
			values[i] = new(sql.NullString)
		case parametertemplate.ForeignKeys[0]: // profile_parameter_templates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ParameterTemplate fields.
func (pt *ParameterTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parametertemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = uint64(value.Int64)
		case parametertemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pt.Name = value.String
			}
		case parametertemplate.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pt.DisplayName = value.String
			}
		case parametertemplate.FieldDisplayNameLc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name_lc", values[i])
			} else if value.Valid {
				pt.DisplayNameLc = value.String
			}
		case parametertemplate.FieldDefault:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default", values[i])
			} else if value.Valid {
				pt.Default = value.String
			}
		case parametertemplate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pt.Type = value.String
			}
		case parametertemplate.FieldValidator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validator", values[i])
			} else if value.Valid {
				pt.Validator = value.String
			}
		case parametertemplate.FieldSuggestedValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field suggested_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pt.SuggestedValues); err != nil {
					return fmt.Errorf("unmarshal field suggested_values: %w", err)
				}
			}
		case parametertemplate.FieldMandatory:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mandatory", values[i])
			} else if value.Valid {
				pt.Mandatory = value.Bool
			}
		case parametertemplate.FieldSecret:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				pt.Secret = value.Bool
			}
		case parametertemplate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profile_parameter_templates", value)
			} else if value.Valid {
				pt.profile_parameter_templates = new(uint64)
				*pt.profile_parameter_templates = uint64(value.Int64)
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ParameterTemplate.
// This includes values selected through modifiers, order, etc.
func (pt *ParameterTemplate) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryProfileFk queries the "profile_fk" edge of the ParameterTemplate entity.
func (pt *ParameterTemplate) QueryProfileFk() *ProfileQuery {
	return NewParameterTemplateClient(pt.config).QueryProfileFk(pt)
}

// QueryProfiles queries the "profiles" edge of the ParameterTemplate entity.
func (pt *ParameterTemplate) QueryProfiles() *ProfileQuery {
	return NewParameterTemplateClient(pt.config).QueryProfiles(pt)
}

// Update returns a builder for updating this ParameterTemplate.
// Note that you need to call ParameterTemplate.Unwrap() before calling this method if this ParameterTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ParameterTemplate) Update() *ParameterTemplateUpdateOne {
	return NewParameterTemplateClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the ParameterTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ParameterTemplate) Unwrap() *ParameterTemplate {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("generated: ParameterTemplate is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ParameterTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("ParameterTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("name=")
	builder.WriteString(pt.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pt.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("display_name_lc=")
	builder.WriteString(pt.DisplayNameLc)
	builder.WriteString(", ")
	builder.WriteString("default=")
	builder.WriteString(pt.Default)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pt.Type)
	builder.WriteString(", ")
	builder.WriteString("validator=")
	builder.WriteString(pt.Validator)
	builder.WriteString(", ")
	builder.WriteString("suggested_values=")
	builder.WriteString(fmt.Sprintf("%v", pt.SuggestedValues))
	builder.WriteString(", ")
	builder.WriteString("mandatory=")
	builder.WriteString(fmt.Sprintf("%v", pt.Mandatory))
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(fmt.Sprintf("%v", pt.Secret))
	builder.WriteByte(')')
	return builder.String()
}

// ParameterTemplates is a parsable slice of ParameterTemplate.
type ParameterTemplates []*ParameterTemplate
