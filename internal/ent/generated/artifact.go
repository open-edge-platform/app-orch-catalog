// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/artifact"
)

// Artifact is the model entity for the Artifact schema.
type Artifact struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// A unique name. Used in HTTP network paths.
	Name string `json:"name,omitempty"`
	// A display name.
	DisplayName string `json:"display_name,omitempty"`
	// Lowercase display name.
	DisplayNameLc string `json:"display_name_lc,omitempty"`
	// A description. Displayed on user interfaces.
	Description string `json:"description,omitempty"`
	// The creation timestamp.
	CreateTime time.Time `json:"create_time,omitempty"`
	// The last update timestamp.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// UUID of the owner project.
	ProjectUUID string `json:"project_uuid,omitempty"`
	// MIME type of artifact.
	MimeType string `json:"mime_type,omitempty"`
	// bytes containing an image or other digital media.
	Artifact []byte `json:"artifact,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtifactQuery when eager-loading is set.
	Edges        ArtifactEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArtifactEdges holds the relations/edges for other nodes in the graph.
type ArtifactEdges struct {
	// An Artifact may be referenced as icon by 0-many Deployment Packages
	CaIconFk []*DeploymentPackage `json:"ca_icon_fk,omitempty"`
	// An Artifact may be referenced as thumbnail by 0-many Deployment Packages
	CaThumbnailFk []*DeploymentPackage `json:"ca_thumbnail_fk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CaIconFkOrErr returns the CaIconFk value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactEdges) CaIconFkOrErr() ([]*DeploymentPackage, error) {
	if e.loadedTypes[0] {
		return e.CaIconFk, nil
	}
	return nil, &NotLoadedError{edge: "ca_icon_fk"}
}

// CaThumbnailFkOrErr returns the CaThumbnailFk value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactEdges) CaThumbnailFkOrErr() ([]*DeploymentPackage, error) {
	if e.loadedTypes[1] {
		return e.CaThumbnailFk, nil
	}
	return nil, &NotLoadedError{edge: "ca_thumbnail_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Artifact) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case artifact.FieldArtifact:
			values[i] = new([]byte)
		case artifact.FieldID:
			values[i] = new(sql.NullInt64)
		case artifact.FieldName, artifact.FieldDisplayName, artifact.FieldDisplayNameLc, artifact.FieldDescription, artifact.FieldProjectUUID, artifact.FieldMimeType:
			values[i] = new(sql.NullString)
		case artifact.FieldCreateTime, artifact.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Artifact fields.
func (a *Artifact) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case artifact.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case artifact.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case artifact.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				a.DisplayName = value.String
			}
		case artifact.FieldDisplayNameLc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name_lc", values[i])
			} else if value.Valid {
				a.DisplayNameLc = value.String
			}
		case artifact.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case artifact.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case artifact.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case artifact.FieldProjectUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_uuid", values[i])
			} else if value.Valid {
				a.ProjectUUID = value.String
			}
		case artifact.FieldMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime_type", values[i])
			} else if value.Valid {
				a.MimeType = value.String
			}
		case artifact.FieldArtifact:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field artifact", values[i])
			} else if value != nil {
				a.Artifact = *value
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Artifact.
// This includes values selected through modifiers, order, etc.
func (a *Artifact) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryCaIconFk queries the "ca_icon_fk" edge of the Artifact entity.
func (a *Artifact) QueryCaIconFk() *DeploymentPackageQuery {
	return NewArtifactClient(a.config).QueryCaIconFk(a)
}

// QueryCaThumbnailFk queries the "ca_thumbnail_fk" edge of the Artifact entity.
func (a *Artifact) QueryCaThumbnailFk() *DeploymentPackageQuery {
	return NewArtifactClient(a.config).QueryCaThumbnailFk(a)
}

// Update returns a builder for updating this Artifact.
// Note that you need to call Artifact.Unwrap() before calling this method if this Artifact
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Artifact) Update() *ArtifactUpdateOne {
	return NewArtifactClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Artifact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Artifact) Unwrap() *Artifact {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("generated: Artifact is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Artifact) String() string {
	var builder strings.Builder
	builder.WriteString("Artifact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(a.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("display_name_lc=")
	builder.WriteString(a.DisplayNameLc)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("project_uuid=")
	builder.WriteString(a.ProjectUUID)
	builder.WriteString(", ")
	builder.WriteString("mime_type=")
	builder.WriteString(a.MimeType)
	builder.WriteString(", ")
	builder.WriteString("artifact=")
	builder.WriteString(fmt.Sprintf("%v", a.Artifact))
	builder.WriteByte(')')
	return builder.String()
}

// Artifacts is a parsable slice of Artifact.
type Artifacts []*Artifact
