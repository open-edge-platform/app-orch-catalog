// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/application"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/ignoredresource"
)

// IgnoredResourceCreate is the builder for creating a IgnoredResource entity.
type IgnoredResourceCreate struct {
	config
	mutation *IgnoredResourceMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (irc *IgnoredResourceCreate) SetName(s string) *IgnoredResourceCreate {
	irc.mutation.SetName(s)
	return irc
}

// SetKind sets the "kind" field.
func (irc *IgnoredResourceCreate) SetKind(s string) *IgnoredResourceCreate {
	irc.mutation.SetKind(s)
	return irc
}

// SetNamespace sets the "namespace" field.
func (irc *IgnoredResourceCreate) SetNamespace(s string) *IgnoredResourceCreate {
	irc.mutation.SetNamespace(s)
	return irc
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (irc *IgnoredResourceCreate) SetNillableNamespace(s *string) *IgnoredResourceCreate {
	if s != nil {
		irc.SetNamespace(*s)
	}
	return irc
}

// SetApplicationFkID sets the "application_fk" edge to the Application entity by ID.
func (irc *IgnoredResourceCreate) SetApplicationFkID(id uint64) *IgnoredResourceCreate {
	irc.mutation.SetApplicationFkID(id)
	return irc
}

// SetApplicationFk sets the "application_fk" edge to the Application entity.
func (irc *IgnoredResourceCreate) SetApplicationFk(a *Application) *IgnoredResourceCreate {
	return irc.SetApplicationFkID(a.ID)
}

// Mutation returns the IgnoredResourceMutation object of the builder.
func (irc *IgnoredResourceCreate) Mutation() *IgnoredResourceMutation {
	return irc.mutation
}

// Save creates the IgnoredResource in the database.
func (irc *IgnoredResourceCreate) Save(ctx context.Context) (*IgnoredResource, error) {
	return withHooks(ctx, irc.sqlSave, irc.mutation, irc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (irc *IgnoredResourceCreate) SaveX(ctx context.Context) *IgnoredResource {
	v, err := irc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (irc *IgnoredResourceCreate) Exec(ctx context.Context) error {
	_, err := irc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (irc *IgnoredResourceCreate) ExecX(ctx context.Context) {
	if err := irc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (irc *IgnoredResourceCreate) check() error {
	if _, ok := irc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "IgnoredResource.name"`)}
	}
	if _, ok := irc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`generated: missing required field "IgnoredResource.kind"`)}
	}
	if _, ok := irc.mutation.ApplicationFkID(); !ok {
		return &ValidationError{Name: "application_fk", err: errors.New(`generated: missing required edge "IgnoredResource.application_fk"`)}
	}
	return nil
}

func (irc *IgnoredResourceCreate) sqlSave(ctx context.Context) (*IgnoredResource, error) {
	if err := irc.check(); err != nil {
		return nil, err
	}
	_node, _spec := irc.createSpec()
	if err := sqlgraph.CreateNode(ctx, irc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	irc.mutation.id = &_node.ID
	irc.mutation.done = true
	return _node, nil
}

func (irc *IgnoredResourceCreate) createSpec() (*IgnoredResource, *sqlgraph.CreateSpec) {
	var (
		_node = &IgnoredResource{config: irc.config}
		_spec = sqlgraph.NewCreateSpec(ignoredresource.Table, sqlgraph.NewFieldSpec(ignoredresource.FieldID, field.TypeUint64))
	)
	if value, ok := irc.mutation.Name(); ok {
		_spec.SetField(ignoredresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := irc.mutation.Kind(); ok {
		_spec.SetField(ignoredresource.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := irc.mutation.Namespace(); ok {
		_spec.SetField(ignoredresource.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if nodes := irc.mutation.ApplicationFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ignoredresource.ApplicationFkTable,
			Columns: []string{ignoredresource.ApplicationFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.application_ignored_resources = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IgnoredResourceCreateBulk is the builder for creating many IgnoredResource entities in bulk.
type IgnoredResourceCreateBulk struct {
	config
	builders []*IgnoredResourceCreate
}

// Save creates the IgnoredResource entities in the database.
func (ircb *IgnoredResourceCreateBulk) Save(ctx context.Context) ([]*IgnoredResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ircb.builders))
	nodes := make([]*IgnoredResource, len(ircb.builders))
	mutators := make([]Mutator, len(ircb.builders))
	for i := range ircb.builders {
		func(i int, root context.Context) {
			builder := ircb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IgnoredResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ircb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ircb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ircb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ircb *IgnoredResourceCreateBulk) SaveX(ctx context.Context) []*IgnoredResource {
	v, err := ircb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ircb *IgnoredResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := ircb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ircb *IgnoredResourceCreateBulk) ExecX(ctx context.Context) {
	if err := ircb.Exec(ctx); err != nil {
		panic(err)
	}
}
