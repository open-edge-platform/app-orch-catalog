// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/endpoint"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/extension"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/predicate"
)

// ExtensionUpdate is the builder for updating Extension entities.
type ExtensionUpdate struct {
	config
	hooks    []Hook
	mutation *ExtensionMutation
}

// Where appends a list predicates to the ExtensionUpdate builder.
func (eu *ExtensionUpdate) Where(ps ...predicate.Extension) *ExtensionUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *ExtensionUpdate) SetName(s string) *ExtensionUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetVersion sets the "version" field.
func (eu *ExtensionUpdate) SetVersion(s string) *ExtensionUpdate {
	eu.mutation.SetVersion(s)
	return eu
}

// SetDisplayName sets the "display_name" field.
func (eu *ExtensionUpdate) SetDisplayName(s string) *ExtensionUpdate {
	eu.mutation.SetDisplayName(s)
	return eu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (eu *ExtensionUpdate) SetNillableDisplayName(s *string) *ExtensionUpdate {
	if s != nil {
		eu.SetDisplayName(*s)
	}
	return eu
}

// ClearDisplayName clears the value of the "display_name" field.
func (eu *ExtensionUpdate) ClearDisplayName() *ExtensionUpdate {
	eu.mutation.ClearDisplayName()
	return eu
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (eu *ExtensionUpdate) SetDisplayNameLc(s string) *ExtensionUpdate {
	eu.mutation.SetDisplayNameLc(s)
	return eu
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (eu *ExtensionUpdate) SetNillableDisplayNameLc(s *string) *ExtensionUpdate {
	if s != nil {
		eu.SetDisplayNameLc(*s)
	}
	return eu
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (eu *ExtensionUpdate) ClearDisplayNameLc() *ExtensionUpdate {
	eu.mutation.ClearDisplayNameLc()
	return eu
}

// SetDescription sets the "description" field.
func (eu *ExtensionUpdate) SetDescription(s string) *ExtensionUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *ExtensionUpdate) SetNillableDescription(s *string) *ExtensionUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *ExtensionUpdate) ClearDescription() *ExtensionUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetUILabel sets the "ui_label" field.
func (eu *ExtensionUpdate) SetUILabel(s string) *ExtensionUpdate {
	eu.mutation.SetUILabel(s)
	return eu
}

// SetNillableUILabel sets the "ui_label" field if the given value is not nil.
func (eu *ExtensionUpdate) SetNillableUILabel(s *string) *ExtensionUpdate {
	if s != nil {
		eu.SetUILabel(*s)
	}
	return eu
}

// ClearUILabel clears the value of the "ui_label" field.
func (eu *ExtensionUpdate) ClearUILabel() *ExtensionUpdate {
	eu.mutation.ClearUILabel()
	return eu
}

// SetUIServiceName sets the "ui_service_name" field.
func (eu *ExtensionUpdate) SetUIServiceName(s string) *ExtensionUpdate {
	eu.mutation.SetUIServiceName(s)
	return eu
}

// SetNillableUIServiceName sets the "ui_service_name" field if the given value is not nil.
func (eu *ExtensionUpdate) SetNillableUIServiceName(s *string) *ExtensionUpdate {
	if s != nil {
		eu.SetUIServiceName(*s)
	}
	return eu
}

// ClearUIServiceName clears the value of the "ui_service_name" field.
func (eu *ExtensionUpdate) ClearUIServiceName() *ExtensionUpdate {
	eu.mutation.ClearUIServiceName()
	return eu
}

// SetUIDescription sets the "ui_description" field.
func (eu *ExtensionUpdate) SetUIDescription(s string) *ExtensionUpdate {
	eu.mutation.SetUIDescription(s)
	return eu
}

// SetNillableUIDescription sets the "ui_description" field if the given value is not nil.
func (eu *ExtensionUpdate) SetNillableUIDescription(s *string) *ExtensionUpdate {
	if s != nil {
		eu.SetUIDescription(*s)
	}
	return eu
}

// ClearUIDescription clears the value of the "ui_description" field.
func (eu *ExtensionUpdate) ClearUIDescription() *ExtensionUpdate {
	eu.mutation.ClearUIDescription()
	return eu
}

// SetUIFileName sets the "ui_file_name" field.
func (eu *ExtensionUpdate) SetUIFileName(s string) *ExtensionUpdate {
	eu.mutation.SetUIFileName(s)
	return eu
}

// SetNillableUIFileName sets the "ui_file_name" field if the given value is not nil.
func (eu *ExtensionUpdate) SetNillableUIFileName(s *string) *ExtensionUpdate {
	if s != nil {
		eu.SetUIFileName(*s)
	}
	return eu
}

// ClearUIFileName clears the value of the "ui_file_name" field.
func (eu *ExtensionUpdate) ClearUIFileName() *ExtensionUpdate {
	eu.mutation.ClearUIFileName()
	return eu
}

// SetUIAppName sets the "ui_app_name" field.
func (eu *ExtensionUpdate) SetUIAppName(s string) *ExtensionUpdate {
	eu.mutation.SetUIAppName(s)
	return eu
}

// SetNillableUIAppName sets the "ui_app_name" field if the given value is not nil.
func (eu *ExtensionUpdate) SetNillableUIAppName(s *string) *ExtensionUpdate {
	if s != nil {
		eu.SetUIAppName(*s)
	}
	return eu
}

// ClearUIAppName clears the value of the "ui_app_name" field.
func (eu *ExtensionUpdate) ClearUIAppName() *ExtensionUpdate {
	eu.mutation.ClearUIAppName()
	return eu
}

// SetUIModuleName sets the "ui_module_name" field.
func (eu *ExtensionUpdate) SetUIModuleName(s string) *ExtensionUpdate {
	eu.mutation.SetUIModuleName(s)
	return eu
}

// SetNillableUIModuleName sets the "ui_module_name" field if the given value is not nil.
func (eu *ExtensionUpdate) SetNillableUIModuleName(s *string) *ExtensionUpdate {
	if s != nil {
		eu.SetUIModuleName(*s)
	}
	return eu
}

// ClearUIModuleName clears the value of the "ui_module_name" field.
func (eu *ExtensionUpdate) ClearUIModuleName() *ExtensionUpdate {
	eu.mutation.ClearUIModuleName()
	return eu
}

// AddEndpointIDs adds the "endpoints" edge to the Endpoint entity by IDs.
func (eu *ExtensionUpdate) AddEndpointIDs(ids ...uint64) *ExtensionUpdate {
	eu.mutation.AddEndpointIDs(ids...)
	return eu
}

// AddEndpoints adds the "endpoints" edges to the Endpoint entity.
func (eu *ExtensionUpdate) AddEndpoints(e ...*Endpoint) *ExtensionUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEndpointIDs(ids...)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (eu *ExtensionUpdate) SetDeploymentPackageFkID(id uint64) *ExtensionUpdate {
	eu.mutation.SetDeploymentPackageFkID(id)
	return eu
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (eu *ExtensionUpdate) SetDeploymentPackageFk(d *DeploymentPackage) *ExtensionUpdate {
	return eu.SetDeploymentPackageFkID(d.ID)
}

// Mutation returns the ExtensionMutation object of the builder.
func (eu *ExtensionUpdate) Mutation() *ExtensionMutation {
	return eu.mutation
}

// ClearEndpoints clears all "endpoints" edges to the Endpoint entity.
func (eu *ExtensionUpdate) ClearEndpoints() *ExtensionUpdate {
	eu.mutation.ClearEndpoints()
	return eu
}

// RemoveEndpointIDs removes the "endpoints" edge to Endpoint entities by IDs.
func (eu *ExtensionUpdate) RemoveEndpointIDs(ids ...uint64) *ExtensionUpdate {
	eu.mutation.RemoveEndpointIDs(ids...)
	return eu
}

// RemoveEndpoints removes "endpoints" edges to Endpoint entities.
func (eu *ExtensionUpdate) RemoveEndpoints(e ...*Endpoint) *ExtensionUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEndpointIDs(ids...)
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (eu *ExtensionUpdate) ClearDeploymentPackageFk() *ExtensionUpdate {
	eu.mutation.ClearDeploymentPackageFk()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExtensionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExtensionUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExtensionUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExtensionUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExtensionUpdate) check() error {
	if _, ok := eu.mutation.DeploymentPackageFkID(); eu.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Extension.deployment_package_fk"`)
	}
	return nil
}

func (eu *ExtensionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(extension.Table, extension.Columns, sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(extension.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Version(); ok {
		_spec.SetField(extension.FieldVersion, field.TypeString, value)
	}
	if value, ok := eu.mutation.DisplayName(); ok {
		_spec.SetField(extension.FieldDisplayName, field.TypeString, value)
	}
	if eu.mutation.DisplayNameCleared() {
		_spec.ClearField(extension.FieldDisplayName, field.TypeString)
	}
	if value, ok := eu.mutation.DisplayNameLc(); ok {
		_spec.SetField(extension.FieldDisplayNameLc, field.TypeString, value)
	}
	if eu.mutation.DisplayNameLcCleared() {
		_spec.ClearField(extension.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(extension.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(extension.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.UILabel(); ok {
		_spec.SetField(extension.FieldUILabel, field.TypeString, value)
	}
	if eu.mutation.UILabelCleared() {
		_spec.ClearField(extension.FieldUILabel, field.TypeString)
	}
	if value, ok := eu.mutation.UIServiceName(); ok {
		_spec.SetField(extension.FieldUIServiceName, field.TypeString, value)
	}
	if eu.mutation.UIServiceNameCleared() {
		_spec.ClearField(extension.FieldUIServiceName, field.TypeString)
	}
	if value, ok := eu.mutation.UIDescription(); ok {
		_spec.SetField(extension.FieldUIDescription, field.TypeString, value)
	}
	if eu.mutation.UIDescriptionCleared() {
		_spec.ClearField(extension.FieldUIDescription, field.TypeString)
	}
	if value, ok := eu.mutation.UIFileName(); ok {
		_spec.SetField(extension.FieldUIFileName, field.TypeString, value)
	}
	if eu.mutation.UIFileNameCleared() {
		_spec.ClearField(extension.FieldUIFileName, field.TypeString)
	}
	if value, ok := eu.mutation.UIAppName(); ok {
		_spec.SetField(extension.FieldUIAppName, field.TypeString, value)
	}
	if eu.mutation.UIAppNameCleared() {
		_spec.ClearField(extension.FieldUIAppName, field.TypeString)
	}
	if value, ok := eu.mutation.UIModuleName(); ok {
		_spec.SetField(extension.FieldUIModuleName, field.TypeString, value)
	}
	if eu.mutation.UIModuleNameCleared() {
		_spec.ClearField(extension.FieldUIModuleName, field.TypeString)
	}
	if eu.mutation.EndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extension.EndpointsTable,
			Columns: []string{extension.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEndpointsIDs(); len(nodes) > 0 && !eu.mutation.EndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extension.EndpointsTable,
			Columns: []string{extension.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EndpointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extension.EndpointsTable,
			Columns: []string{extension.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extension.DeploymentPackageFkTable,
			Columns: []string{extension.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extension.DeploymentPackageFkTable,
			Columns: []string{extension.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extension.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExtensionUpdateOne is the builder for updating a single Extension entity.
type ExtensionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExtensionMutation
}

// SetName sets the "name" field.
func (euo *ExtensionUpdateOne) SetName(s string) *ExtensionUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetVersion sets the "version" field.
func (euo *ExtensionUpdateOne) SetVersion(s string) *ExtensionUpdateOne {
	euo.mutation.SetVersion(s)
	return euo
}

// SetDisplayName sets the "display_name" field.
func (euo *ExtensionUpdateOne) SetDisplayName(s string) *ExtensionUpdateOne {
	euo.mutation.SetDisplayName(s)
	return euo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (euo *ExtensionUpdateOne) SetNillableDisplayName(s *string) *ExtensionUpdateOne {
	if s != nil {
		euo.SetDisplayName(*s)
	}
	return euo
}

// ClearDisplayName clears the value of the "display_name" field.
func (euo *ExtensionUpdateOne) ClearDisplayName() *ExtensionUpdateOne {
	euo.mutation.ClearDisplayName()
	return euo
}

// SetDisplayNameLc sets the "display_name_lc" field.
func (euo *ExtensionUpdateOne) SetDisplayNameLc(s string) *ExtensionUpdateOne {
	euo.mutation.SetDisplayNameLc(s)
	return euo
}

// SetNillableDisplayNameLc sets the "display_name_lc" field if the given value is not nil.
func (euo *ExtensionUpdateOne) SetNillableDisplayNameLc(s *string) *ExtensionUpdateOne {
	if s != nil {
		euo.SetDisplayNameLc(*s)
	}
	return euo
}

// ClearDisplayNameLc clears the value of the "display_name_lc" field.
func (euo *ExtensionUpdateOne) ClearDisplayNameLc() *ExtensionUpdateOne {
	euo.mutation.ClearDisplayNameLc()
	return euo
}

// SetDescription sets the "description" field.
func (euo *ExtensionUpdateOne) SetDescription(s string) *ExtensionUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *ExtensionUpdateOne) SetNillableDescription(s *string) *ExtensionUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *ExtensionUpdateOne) ClearDescription() *ExtensionUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetUILabel sets the "ui_label" field.
func (euo *ExtensionUpdateOne) SetUILabel(s string) *ExtensionUpdateOne {
	euo.mutation.SetUILabel(s)
	return euo
}

// SetNillableUILabel sets the "ui_label" field if the given value is not nil.
func (euo *ExtensionUpdateOne) SetNillableUILabel(s *string) *ExtensionUpdateOne {
	if s != nil {
		euo.SetUILabel(*s)
	}
	return euo
}

// ClearUILabel clears the value of the "ui_label" field.
func (euo *ExtensionUpdateOne) ClearUILabel() *ExtensionUpdateOne {
	euo.mutation.ClearUILabel()
	return euo
}

// SetUIServiceName sets the "ui_service_name" field.
func (euo *ExtensionUpdateOne) SetUIServiceName(s string) *ExtensionUpdateOne {
	euo.mutation.SetUIServiceName(s)
	return euo
}

// SetNillableUIServiceName sets the "ui_service_name" field if the given value is not nil.
func (euo *ExtensionUpdateOne) SetNillableUIServiceName(s *string) *ExtensionUpdateOne {
	if s != nil {
		euo.SetUIServiceName(*s)
	}
	return euo
}

// ClearUIServiceName clears the value of the "ui_service_name" field.
func (euo *ExtensionUpdateOne) ClearUIServiceName() *ExtensionUpdateOne {
	euo.mutation.ClearUIServiceName()
	return euo
}

// SetUIDescription sets the "ui_description" field.
func (euo *ExtensionUpdateOne) SetUIDescription(s string) *ExtensionUpdateOne {
	euo.mutation.SetUIDescription(s)
	return euo
}

// SetNillableUIDescription sets the "ui_description" field if the given value is not nil.
func (euo *ExtensionUpdateOne) SetNillableUIDescription(s *string) *ExtensionUpdateOne {
	if s != nil {
		euo.SetUIDescription(*s)
	}
	return euo
}

// ClearUIDescription clears the value of the "ui_description" field.
func (euo *ExtensionUpdateOne) ClearUIDescription() *ExtensionUpdateOne {
	euo.mutation.ClearUIDescription()
	return euo
}

// SetUIFileName sets the "ui_file_name" field.
func (euo *ExtensionUpdateOne) SetUIFileName(s string) *ExtensionUpdateOne {
	euo.mutation.SetUIFileName(s)
	return euo
}

// SetNillableUIFileName sets the "ui_file_name" field if the given value is not nil.
func (euo *ExtensionUpdateOne) SetNillableUIFileName(s *string) *ExtensionUpdateOne {
	if s != nil {
		euo.SetUIFileName(*s)
	}
	return euo
}

// ClearUIFileName clears the value of the "ui_file_name" field.
func (euo *ExtensionUpdateOne) ClearUIFileName() *ExtensionUpdateOne {
	euo.mutation.ClearUIFileName()
	return euo
}

// SetUIAppName sets the "ui_app_name" field.
func (euo *ExtensionUpdateOne) SetUIAppName(s string) *ExtensionUpdateOne {
	euo.mutation.SetUIAppName(s)
	return euo
}

// SetNillableUIAppName sets the "ui_app_name" field if the given value is not nil.
func (euo *ExtensionUpdateOne) SetNillableUIAppName(s *string) *ExtensionUpdateOne {
	if s != nil {
		euo.SetUIAppName(*s)
	}
	return euo
}

// ClearUIAppName clears the value of the "ui_app_name" field.
func (euo *ExtensionUpdateOne) ClearUIAppName() *ExtensionUpdateOne {
	euo.mutation.ClearUIAppName()
	return euo
}

// SetUIModuleName sets the "ui_module_name" field.
func (euo *ExtensionUpdateOne) SetUIModuleName(s string) *ExtensionUpdateOne {
	euo.mutation.SetUIModuleName(s)
	return euo
}

// SetNillableUIModuleName sets the "ui_module_name" field if the given value is not nil.
func (euo *ExtensionUpdateOne) SetNillableUIModuleName(s *string) *ExtensionUpdateOne {
	if s != nil {
		euo.SetUIModuleName(*s)
	}
	return euo
}

// ClearUIModuleName clears the value of the "ui_module_name" field.
func (euo *ExtensionUpdateOne) ClearUIModuleName() *ExtensionUpdateOne {
	euo.mutation.ClearUIModuleName()
	return euo
}

// AddEndpointIDs adds the "endpoints" edge to the Endpoint entity by IDs.
func (euo *ExtensionUpdateOne) AddEndpointIDs(ids ...uint64) *ExtensionUpdateOne {
	euo.mutation.AddEndpointIDs(ids...)
	return euo
}

// AddEndpoints adds the "endpoints" edges to the Endpoint entity.
func (euo *ExtensionUpdateOne) AddEndpoints(e ...*Endpoint) *ExtensionUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEndpointIDs(ids...)
}

// SetDeploymentPackageFkID sets the "deployment_package_fk" edge to the DeploymentPackage entity by ID.
func (euo *ExtensionUpdateOne) SetDeploymentPackageFkID(id uint64) *ExtensionUpdateOne {
	euo.mutation.SetDeploymentPackageFkID(id)
	return euo
}

// SetDeploymentPackageFk sets the "deployment_package_fk" edge to the DeploymentPackage entity.
func (euo *ExtensionUpdateOne) SetDeploymentPackageFk(d *DeploymentPackage) *ExtensionUpdateOne {
	return euo.SetDeploymentPackageFkID(d.ID)
}

// Mutation returns the ExtensionMutation object of the builder.
func (euo *ExtensionUpdateOne) Mutation() *ExtensionMutation {
	return euo.mutation
}

// ClearEndpoints clears all "endpoints" edges to the Endpoint entity.
func (euo *ExtensionUpdateOne) ClearEndpoints() *ExtensionUpdateOne {
	euo.mutation.ClearEndpoints()
	return euo
}

// RemoveEndpointIDs removes the "endpoints" edge to Endpoint entities by IDs.
func (euo *ExtensionUpdateOne) RemoveEndpointIDs(ids ...uint64) *ExtensionUpdateOne {
	euo.mutation.RemoveEndpointIDs(ids...)
	return euo
}

// RemoveEndpoints removes "endpoints" edges to Endpoint entities.
func (euo *ExtensionUpdateOne) RemoveEndpoints(e ...*Endpoint) *ExtensionUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEndpointIDs(ids...)
}

// ClearDeploymentPackageFk clears the "deployment_package_fk" edge to the DeploymentPackage entity.
func (euo *ExtensionUpdateOne) ClearDeploymentPackageFk() *ExtensionUpdateOne {
	euo.mutation.ClearDeploymentPackageFk()
	return euo
}

// Where appends a list predicates to the ExtensionUpdate builder.
func (euo *ExtensionUpdateOne) Where(ps ...predicate.Extension) *ExtensionUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExtensionUpdateOne) Select(field string, fields ...string) *ExtensionUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Extension entity.
func (euo *ExtensionUpdateOne) Save(ctx context.Context) (*Extension, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExtensionUpdateOne) SaveX(ctx context.Context) *Extension {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExtensionUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExtensionUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExtensionUpdateOne) check() error {
	if _, ok := euo.mutation.DeploymentPackageFkID(); euo.mutation.DeploymentPackageFkCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Extension.deployment_package_fk"`)
	}
	return nil
}

func (euo *ExtensionUpdateOne) sqlSave(ctx context.Context) (_node *Extension, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extension.Table, extension.Columns, sqlgraph.NewFieldSpec(extension.FieldID, field.TypeUint64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Extension.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extension.FieldID)
		for _, f := range fields {
			if !extension.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != extension.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(extension.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Version(); ok {
		_spec.SetField(extension.FieldVersion, field.TypeString, value)
	}
	if value, ok := euo.mutation.DisplayName(); ok {
		_spec.SetField(extension.FieldDisplayName, field.TypeString, value)
	}
	if euo.mutation.DisplayNameCleared() {
		_spec.ClearField(extension.FieldDisplayName, field.TypeString)
	}
	if value, ok := euo.mutation.DisplayNameLc(); ok {
		_spec.SetField(extension.FieldDisplayNameLc, field.TypeString, value)
	}
	if euo.mutation.DisplayNameLcCleared() {
		_spec.ClearField(extension.FieldDisplayNameLc, field.TypeString)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(extension.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(extension.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.UILabel(); ok {
		_spec.SetField(extension.FieldUILabel, field.TypeString, value)
	}
	if euo.mutation.UILabelCleared() {
		_spec.ClearField(extension.FieldUILabel, field.TypeString)
	}
	if value, ok := euo.mutation.UIServiceName(); ok {
		_spec.SetField(extension.FieldUIServiceName, field.TypeString, value)
	}
	if euo.mutation.UIServiceNameCleared() {
		_spec.ClearField(extension.FieldUIServiceName, field.TypeString)
	}
	if value, ok := euo.mutation.UIDescription(); ok {
		_spec.SetField(extension.FieldUIDescription, field.TypeString, value)
	}
	if euo.mutation.UIDescriptionCleared() {
		_spec.ClearField(extension.FieldUIDescription, field.TypeString)
	}
	if value, ok := euo.mutation.UIFileName(); ok {
		_spec.SetField(extension.FieldUIFileName, field.TypeString, value)
	}
	if euo.mutation.UIFileNameCleared() {
		_spec.ClearField(extension.FieldUIFileName, field.TypeString)
	}
	if value, ok := euo.mutation.UIAppName(); ok {
		_spec.SetField(extension.FieldUIAppName, field.TypeString, value)
	}
	if euo.mutation.UIAppNameCleared() {
		_spec.ClearField(extension.FieldUIAppName, field.TypeString)
	}
	if value, ok := euo.mutation.UIModuleName(); ok {
		_spec.SetField(extension.FieldUIModuleName, field.TypeString, value)
	}
	if euo.mutation.UIModuleNameCleared() {
		_spec.ClearField(extension.FieldUIModuleName, field.TypeString)
	}
	if euo.mutation.EndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extension.EndpointsTable,
			Columns: []string{extension.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEndpointsIDs(); len(nodes) > 0 && !euo.mutation.EndpointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extension.EndpointsTable,
			Columns: []string{extension.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EndpointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extension.EndpointsTable,
			Columns: []string{extension.EndpointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpoint.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DeploymentPackageFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extension.DeploymentPackageFkTable,
			Columns: []string{extension.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DeploymentPackageFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   extension.DeploymentPackageFkTable,
			Columns: []string{extension.DeploymentPackageFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentpackage.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Extension{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extension.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
