// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/deploymentpackage"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/namespace"
)

// Namespace is the model entity for the Namespace schema.
type Namespace struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Namespace name.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NamespaceQuery when eager-loading is set.
	Edges                         NamespaceEdges `json:"edges"`
	deployment_package_namespaces *uint64
	selectValues                  sql.SelectValues
}

// NamespaceEdges holds the relations/edges for other nodes in the graph.
type NamespaceEdges struct {
	// Namespace must belong to a Deployment Package
	DeploymentPackageFk *DeploymentPackage `json:"deployment_package_fk,omitempty"`
	// Namespace adornments
	Adornments []*NamespaceAdornment `json:"adornments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DeploymentPackageFkOrErr returns the DeploymentPackageFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NamespaceEdges) DeploymentPackageFkOrErr() (*DeploymentPackage, error) {
	if e.loadedTypes[0] {
		if e.DeploymentPackageFk == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deploymentpackage.Label}
		}
		return e.DeploymentPackageFk, nil
	}
	return nil, &NotLoadedError{edge: "deployment_package_fk"}
}

// AdornmentsOrErr returns the Adornments value or an error if the edge
// was not loaded in eager-loading.
func (e NamespaceEdges) AdornmentsOrErr() ([]*NamespaceAdornment, error) {
	if e.loadedTypes[1] {
		return e.Adornments, nil
	}
	return nil, &NotLoadedError{edge: "adornments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Namespace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case namespace.FieldID:
			values[i] = new(sql.NullInt64)
		case namespace.FieldName:
			values[i] = new(sql.NullString)
		case namespace.ForeignKeys[0]: // deployment_package_namespaces
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Namespace fields.
func (n *Namespace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case namespace.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = uint64(value.Int64)
		case namespace.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case namespace.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_package_namespaces", value)
			} else if value.Valid {
				n.deployment_package_namespaces = new(uint64)
				*n.deployment_package_namespaces = uint64(value.Int64)
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Namespace.
// This includes values selected through modifiers, order, etc.
func (n *Namespace) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryDeploymentPackageFk queries the "deployment_package_fk" edge of the Namespace entity.
func (n *Namespace) QueryDeploymentPackageFk() *DeploymentPackageQuery {
	return NewNamespaceClient(n.config).QueryDeploymentPackageFk(n)
}

// QueryAdornments queries the "adornments" edge of the Namespace entity.
func (n *Namespace) QueryAdornments() *NamespaceAdornmentQuery {
	return NewNamespaceClient(n.config).QueryAdornments(n)
}

// Update returns a builder for updating this Namespace.
// Note that you need to call Namespace.Unwrap() before calling this method if this Namespace
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Namespace) Update() *NamespaceUpdateOne {
	return NewNamespaceClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Namespace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Namespace) Unwrap() *Namespace {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("generated: Namespace is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Namespace) String() string {
	var builder strings.Builder
	builder.WriteString("Namespace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("name=")
	builder.WriteString(n.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Namespaces is a parsable slice of Namespace.
type Namespaces []*Namespace
