// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/app-orch-catalog/internal/ent/generated/registry"
)

// Registry is the model entity for the Registry schema.
type Registry struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// A unique name. Used in HTTP network paths.
	Name string `json:"name,omitempty"`
	// A display name.
	DisplayName string `json:"display_name,omitempty"`
	// Lowercase display name.
	DisplayNameLc string `json:"display_name_lc,omitempty"`
	// A description. Displayed on user interfaces.
	Description string `json:"description,omitempty"`
	// The creation timestamp.
	CreateTime time.Time `json:"create_time,omitempty"`
	// The last update timestamp.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// UUID of the owner project.
	ProjectUUID string `json:"project_uuid,omitempty"`
	// A login token for registry access.
	AuthToken string `json:"auth_token,omitempty"`
	// Registry type (helm or image).
	Type string `json:"type,omitempty"`
	// Registry API type.
	APIType string `json:"api_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegistryQuery when eager-loading is set.
	Edges        RegistryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RegistryEdges holds the relations/edges for other nodes in the graph.
type RegistryEdges struct {
	// Many Applications can refer to a HELM Registry
	Applications []*Application `json:"applications,omitempty"`
	// Many Applications can refer to an IMAGE Registry
	ApplicationImages []*Application `json:"application_images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e RegistryEdges) ApplicationsOrErr() ([]*Application, error) {
	if e.loadedTypes[0] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// ApplicationImagesOrErr returns the ApplicationImages value or an error if the edge
// was not loaded in eager-loading.
func (e RegistryEdges) ApplicationImagesOrErr() ([]*Application, error) {
	if e.loadedTypes[1] {
		return e.ApplicationImages, nil
	}
	return nil, &NotLoadedError{edge: "application_images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Registry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case registry.FieldID:
			values[i] = new(sql.NullInt64)
		case registry.FieldName, registry.FieldDisplayName, registry.FieldDisplayNameLc, registry.FieldDescription, registry.FieldProjectUUID, registry.FieldAuthToken, registry.FieldType, registry.FieldAPIType:
			values[i] = new(sql.NullString)
		case registry.FieldCreateTime, registry.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Registry fields.
func (r *Registry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case registry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = uint64(value.Int64)
		case registry.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case registry.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				r.DisplayName = value.String
			}
		case registry.FieldDisplayNameLc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name_lc", values[i])
			} else if value.Valid {
				r.DisplayNameLc = value.String
			}
		case registry.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case registry.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = value.Time
			}
		case registry.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = value.Time
			}
		case registry.FieldProjectUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_uuid", values[i])
			} else if value.Valid {
				r.ProjectUUID = value.String
			}
		case registry.FieldAuthToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_token", values[i])
			} else if value.Valid {
				r.AuthToken = value.String
			}
		case registry.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = value.String
			}
		case registry.FieldAPIType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_type", values[i])
			} else if value.Valid {
				r.APIType = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Registry.
// This includes values selected through modifiers, order, etc.
func (r *Registry) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryApplications queries the "applications" edge of the Registry entity.
func (r *Registry) QueryApplications() *ApplicationQuery {
	return NewRegistryClient(r.config).QueryApplications(r)
}

// QueryApplicationImages queries the "application_images" edge of the Registry entity.
func (r *Registry) QueryApplicationImages() *ApplicationQuery {
	return NewRegistryClient(r.config).QueryApplicationImages(r)
}

// Update returns a builder for updating this Registry.
// Note that you need to call Registry.Unwrap() before calling this method if this Registry
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Registry) Update() *RegistryUpdateOne {
	return NewRegistryClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Registry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Registry) Unwrap() *Registry {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("generated: Registry is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Registry) String() string {
	var builder strings.Builder
	builder.WriteString("Registry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(r.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("display_name_lc=")
	builder.WriteString(r.DisplayNameLc)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("project_uuid=")
	builder.WriteString(r.ProjectUUID)
	builder.WriteString(", ")
	builder.WriteString("auth_token=")
	builder.WriteString(r.AuthToken)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(r.Type)
	builder.WriteString(", ")
	builder.WriteString("api_type=")
	builder.WriteString(r.APIType)
	builder.WriteByte(')')
	return builder.String()
}

// Registries is a parsable slice of Registry.
type Registries []*Registry
