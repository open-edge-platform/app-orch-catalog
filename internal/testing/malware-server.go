// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

package testing

import (
	"fmt"
	"io"
	"net"
	"strings"
	"time"
)

type MalwareServer struct {
	addr   string
	server net.Listener
	closed bool
}

const MalwareTestString = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"

// Run starts the TCP Server.
func (t *MalwareServer) Run(ready chan bool) error {
	var err error
	t.server, err = net.Listen("tcp", t.addr)
	if err != nil {
		return err
	}
	ready <- true
	for {
		conn, err := t.server.Accept()
		if err != nil {
			if strings.Contains(err.Error(), "use of closed network connection") {
				return nil
			}
			return fmt.Errorf("could not accept connection %s", err.Error())
		}

		if conn == nil {
			return fmt.Errorf("could not create connection")
		}

		// read from the incoming TCP into a socket, which we'll use
		// to look for our virus

		buffer := []byte{}
		tmp := make([]byte, 256)
		for {
			n, err := conn.Read(tmp)
			if n <= 0 {
				break
			}
			if err != nil {
				if err != io.EOF {
					panic("read error")
				}
				break
			}
			buffer = append(buffer, tmp[:n]...)
			if len(buffer) > 28 {
				// rather than decoding the full clamav protocol, cheat by stopping
				// as soon as we've received about 28 characters, which we can
				// look for our mock virus.
				break
			}
		}

		if strings.Contains(string(buffer), "slow") {
			time.Sleep(time.Duration(250) * time.Millisecond) // for testing timeout; delay a quarter second
		}

		s := string(buffer)
		if strings.Contains(s, MalwareTestString) {
			_, err := conn.Write([]byte("stream: somevirus FOUND"))
			if err != nil {
				return fmt.Errorf("Failed to write: %s", err)
			}
		} else {
			_, err := conn.Write([]byte("stream: OK"))
			if err != nil {
				return fmt.Errorf("Failed to write: %s", err)
			}
		}
		_ = conn.Close()

	}
}

func (t *MalwareServer) Close() (err error) {
	t.closed = true
	return t.server.Close()
}

func StartMalwareServer() *MalwareServer {
	// Start the new server
	tcp := &MalwareServer{addr: ":1123"}
	ready := make(chan bool)
	// Run the servers in goroutines to stop blocking
	go func() {
		err := tcp.Run(ready)
		if err != nil {
			panic("failed to run mock tcp server")
		}
	}()
	<-ready
	return tcp
}
