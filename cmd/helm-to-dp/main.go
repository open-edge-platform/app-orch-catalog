// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

package main

import (
	"github.com/open-edge-platform/app-orch-catalog/internal/dp"
	"github.com/open-edge-platform/app-orch-catalog/internal/helm"
	"github.com/open-edge-platform/app-orch-catalog/internal/shared/verboseerror"
	"github.com/spf13/cobra"
)

var (
	username    string
	password    string
	valuesFile  string
	outputDir   string
	namespace   string
	includeAuth bool
	rootCmd     = &cobra.Command{
		Use:   "helm-to-dp <oci-url>",
		Short: "Convert a Helm chart to a Deployment Package",
		Long: `This tool converts OCI helm charts into Deployment Packages for use with
the Edge Orchestrator. The tool will fetch the Helm chart from the specified OCI URL and
validate that it is a valid Helm chart. The tool will then generate a Deployment Package
from the Helm chart and store that package in an output directory`,
	}
)

func mainCommand(cmd *cobra.Command, args []string) {
	if len(args) != 1 {
		err := cmd.Usage()
		verboseerror.FatalErrCheck(err, "Failed to print usage: %v", err)
		return
	}

	if (username != "" || password != "") && (!includeAuth) {
		verboseerror.Infof("NOTE: Username and password are specified, but -A was not used.\n")
		verboseerror.Infof("      Auth will be used to pull chart, but will not be included in deployment package.\n")
	}

	url := args[0]

	helm, err := helm.FetchHelmChartOCI(url, username, password)
	verboseerror.FatalErrCheck(err, "Failed to fetch Helm chart: %v", err)

	err = dp.GenerateDeploymentPackage(helm, valuesFile, outputDir, namespace, includeAuth)
	verboseerror.FatalErrCheck(err, "Failed to generate Deployment Package: %v", err)
}

func main() {
	rootCmd.PersistentFlags().BoolVarP(&verboseerror.Quiet, "quiet", "q", false, "enable quiet mode, suppressing info level messages")
	rootCmd.PersistentFlags().StringVarP(&valuesFile, "values-file", "f", "", "read values from a custom values.yaml file")
	rootCmd.PersistentFlags().StringVarP(&username, "username", "u", "", "authenticate with helm registry using this username")
	rootCmd.PersistentFlags().StringVarP(&password, "password", "p", "", "authenticate with helm registry using this password")
	rootCmd.PersistentFlags().BoolVarP(&includeAuth, "auth", "A", false, "include authentication username and password from -u and -p in deployment package")
	rootCmd.PersistentFlags().StringVarP(&outputDir, "output", "o", "output", "output directory to store the deployment package")
	rootCmd.PersistentFlags().StringVarP(&namespace, "namespace", "n", "", "rather than using default autogenerated namespace, place the deployment package in this namespace")
	rootCmd.Run = mainCommand

	err := rootCmd.Execute()
	verboseerror.FatalErrCheck(err, "Failed to execute root command: %v", err)
}
