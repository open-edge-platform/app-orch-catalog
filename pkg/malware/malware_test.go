// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Package malware provides an interface for using the clamav service to scan for malware.
package malware

import (
	internal_testing "github.com/open-edge-platform/app-orch-catalog/internal/testing"
	"github.com/stretchr/testify/suite"
	"strings"
	"testing"
	"time"
)

// Suite of malware tests
type MalwareTestSuite struct {
	suite.Suite

	malwareRetryInterval time.Duration
	malwareMaxRetries    int
}

func (s *MalwareTestSuite) SetupSuite() {
	// Start the new malware server
	internal_testing.StartMalwareServer()
	time.Sleep(5 * time.Second) // we need to wait for the server to be ready

	s.malwareRetryInterval = ErrorRetryInterval
	s.malwareMaxRetries = MaxErrorRetries
	ErrorRetryInterval = 1
	MaxErrorRetries = 1
}

func (s *MalwareTestSuite) TearDownSuite() {
	ErrorRetryInterval = s.malwareRetryInterval
	MaxErrorRetries = s.malwareMaxRetries
}

func (s *MalwareTestSuite) SetupTest() {
}

func (s *MalwareTestSuite) TearDownTest() {
}

func TestMalware(t *testing.T) {
	suite.Run(t, &MalwareTestSuite{})
}

func (s *MalwareTestSuite) TestScannerUnreachable() {
	m := NewScanner("nobody-here.fake.address:1123", time.Duration(120)*time.Second, false)

	previousRetries := MaxErrorRetries
	previousInterval := ErrorRetryInterval
	MaxErrorRetries = 1
	ErrorRetryInterval = 1
	defer func() {
		MaxErrorRetries = previousRetries
		ErrorRetryInterval = previousInterval
	}()

	okay, _, err := m.ScanBytes([]byte("goodcontents"))
	s.Error(err)
	s.True(strings.Contains(err.Error(), "no such host") || strings.Contains(err.Error(), "failure in name resolution"))
	s.False(okay)
}

func (s *MalwareTestSuite) TestScannerTimeout() {
	previousRetries := MaxErrorRetries
	previousInterval := ErrorRetryInterval
	MaxErrorRetries = 1
	ErrorRetryInterval = 1
	defer func() {
		MaxErrorRetries = previousRetries
		ErrorRetryInterval = previousInterval
	}()

	m := NewScanner(":1123", time.Duration(200)*time.Millisecond, false)

	_, _, err := m.ScanBytes([]byte("iamslowjunkjunkjunk"))
	s.ErrorContains(err, "timeout")
}
