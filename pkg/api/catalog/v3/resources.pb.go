// SPDX-FileCopyrightText: (C) 2023 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: catalog/v3/resources.proto

package catalogv3

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Kind designation for applications and packages, normal (unspecified), extension, or addon.
type Kind int32

const (
	Kind_KIND_UNSPECIFIED Kind = 0
	Kind_KIND_NORMAL      Kind = 1
	Kind_KIND_EXTENSION   Kind = 2
	Kind_KIND_ADDON       Kind = 3
)

// Enum value maps for Kind.
var (
	Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_NORMAL",
		2: "KIND_EXTENSION",
		3: "KIND_ADDON",
	}
	Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"KIND_NORMAL":      1,
		"KIND_EXTENSION":   2,
		"KIND_ADDON":       3,
	}
)

func (x Kind) Enum() *Kind {
	p := new(Kind)
	*p = x
	return p
}

func (x Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_catalog_v3_resources_proto_enumTypes[0].Descriptor()
}

func (Kind) Type() protoreflect.EnumType {
	return &file_catalog_v3_resources_proto_enumTypes[0]
}

func (x Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Kind.Descriptor instead.
func (Kind) EnumDescriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{0}
}

// Event message carries the event type detected by the catalog service during the invocation of
// the "watch" RPC.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type field specifies whether an entity was created, updated, or deleted. The replayed type is used
	// to annotate entities during the replay phase of the watch RPC.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// ID of the project to which the subject belongs.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Registry represents a repository from which various artifacts, such as application Docker\* images or Helm\* charts
// can be retrieved. As such, the registry entity holds information used for finding and accessing the represented repository.
type Registry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a human-readable unique identifier for the registry and must be unique for all registries of a
	// given project.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Display name is an optional human-readable name for the registry. When specified, it must be unique among all
	// registries within a project. It is used for display purposes on user interfaces.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the registry. Displayed on user interfaces.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Root URL for retrieving artifacts, e.g. Docker images and Helm charts, from the registry.
	RootUrl string `protobuf:"bytes,4,opt,name=root_url,json=rootUrl,proto3" json:"root_url,omitempty"`
	// Optional username for accessing the registry.
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// Optional authentication token or password for accessing the registry.
	AuthToken string `protobuf:"bytes,6,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// Type indicates whether the registry holds Docker images or Helm charts; defaults to Helm charts.
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// Optional CA certificates for accessing the registry using secure channels, such as HTTPS.
	Cacerts string `protobuf:"bytes,8,opt,name=cacerts,proto3" json:"cacerts,omitempty"`
	// Optional type of the API used to obtain inventory of the articles hosted by the registry.
	ApiType string `protobuf:"bytes,9,opt,name=api_type,json=apiType,proto3" json:"api_type,omitempty"`
	// Optional URL of the API for accessing inventory of artifacts hosted by the registry.
	InventoryUrl string `protobuf:"bytes,10,opt,name=inventory_url,json=inventoryUrl,proto3" json:"inventory_url,omitempty"`
	// The creation time of the registry.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The last update time of the registry.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Registry) Reset() {
	*x = Registry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registry) ProtoMessage() {}

func (x *Registry) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registry.ProtoReflect.Descriptor instead.
func (*Registry) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{1}
}

func (x *Registry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Registry) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Registry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Registry) GetRootUrl() string {
	if x != nil {
		return x.RootUrl
	}
	return ""
}

func (x *Registry) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Registry) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *Registry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Registry) GetCacerts() string {
	if x != nil {
		return x.Cacerts
	}
	return ""
}

func (x *Registry) GetApiType() string {
	if x != nil {
		return x.ApiType
	}
	return ""
}

func (x *Registry) GetInventoryUrl() string {
	if x != nil {
		return x.InventoryUrl
	}
	return ""
}

func (x *Registry) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Registry) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// DeploymentPackage represents a collection of applications (referenced by their name and a version) that are
// deployed together. The package can define one or more deployment profiles that specify the individual application
// profiles to be used when deploying each application. If applications need to be deployed in a particular order, the
// package can also define any startup dependencies between its constituent applications as a set of dependency graph edges.
//
// The deployment package can also refer to a set of artifacts used for miscellaneous purposes,
// e.g. a thumbnail, icon, or a Grafana extension.
type DeploymentPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a human-readable unique identifier for the deployment package and must be unique for all packages of a
	// given project.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Display name is an optional human-readable name for the deployment package. When specified, it must be unique among all
	// packages within a project. It is used for display purposes on user interfaces.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the deployment package. Displayed on user interfaces.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Version of the deployment package.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Field designating whether the deployment package is a system add-on, system extension, or a normal package.
	Kind Kind `protobuf:"varint,5,opt,name=kind,proto3,enum=catalog.v3.Kind" json:"kind,omitempty"`
	// List of applications comprising this deployment package. Expressed as (name, version) pairs.
	ApplicationReferences []*ApplicationReference `protobuf:"bytes,6,rep,name=application_references,json=applicationReferences,proto3" json:"application_references,omitempty"`
	// Flag indicating whether the deployment package has been deployed.
	// The mutability of the deployment package entity can be limited when this flag is true. For example, one may
	// not be able to update when an application is removed from a package after it has been marked as
	// deployed.
	IsDeployed bool `protobuf:"varint,7,opt,name=is_deployed,json=isDeployed,proto3" json:"is_deployed,omitempty"`
	// Flag indicating whether the deployment package is visible in the UI.
	// Some deployment packages can be classified as auxiliary platform extensions and therefore are to be deployed
	// indirectly only when specified as deployment requirements, rather than directly by the platform operator.
	IsVisible bool `protobuf:"varint,8,opt,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
	// Set of deployment profiles to choose from when deploying this package.
	Profiles []*DeploymentProfile `protobuf:"bytes,9,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// Name of the default deployment profile to be used by default when deploying this package.
	DefaultProfileName string `protobuf:"bytes,10,opt,name=default_profile_name,json=defaultProfileName,proto3" json:"default_profile_name,omitempty"`
	// Optional set of application deployment dependencies, expressed as (name, requires) pairs of edges in the
	// deployment order dependency graph.
	ApplicationDependencies []*ApplicationDependency `protobuf:"bytes,11,rep,name=application_dependencies,json=applicationDependencies,proto3" json:"application_dependencies,omitempty"`
	// Optional list of API and UI extensions.
	Extensions []*APIExtension `protobuf:"bytes,12,rep,name=extensions,proto3" json:"extensions,omitempty"`
	// Optional list of artifacts required for displaying or deploying this package. For example, icon or thumbnail
	// artifacts can be used by the UI; Grafana\* dashboard definitions can be used by the deployment manager.
	Artifacts []*ArtifactReference `protobuf:"bytes,13,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// Optional map of application-to-namespace bindings to be used as a default when deploying the applications that
	// comprise the package.
	// If a namespace is not defined in the set of "namespaces" in this Deployment Package,
	// it will be inferred that it is a simple namespace with no predefined labels or annotations.
	DefaultNamespaces map[string]string `protobuf:"bytes,14,rep,name=default_namespaces,json=defaultNamespaces,proto3" json:"default_namespaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional flag indicating whether multiple deployments of this package are forbidden within the same realm.
	ForbidsMultipleDeployments bool `protobuf:"varint,15,opt,name=forbids_multiple_deployments,json=forbidsMultipleDeployments,proto3" json:"forbids_multiple_deployments,omitempty"`
	// Namespace definitions to be created before resources are deployed.
	// This allows complex namespaces to be defined with predefined labels and annotations.
	// If not defined, simple namespaces will be created as needed.
	Namespaces []*Namespace `protobuf:"bytes,16,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// The creation time of the deployment package.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The last update time of the deployment package.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *DeploymentPackage) Reset() {
	*x = DeploymentPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentPackage) ProtoMessage() {}

func (x *DeploymentPackage) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentPackage.ProtoReflect.Descriptor instead.
func (*DeploymentPackage) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{2}
}

func (x *DeploymentPackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentPackage) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DeploymentPackage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeploymentPackage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeploymentPackage) GetKind() Kind {
	if x != nil {
		return x.Kind
	}
	return Kind_KIND_UNSPECIFIED
}

func (x *DeploymentPackage) GetApplicationReferences() []*ApplicationReference {
	if x != nil {
		return x.ApplicationReferences
	}
	return nil
}

func (x *DeploymentPackage) GetIsDeployed() bool {
	if x != nil {
		return x.IsDeployed
	}
	return false
}

func (x *DeploymentPackage) GetIsVisible() bool {
	if x != nil {
		return x.IsVisible
	}
	return false
}

func (x *DeploymentPackage) GetProfiles() []*DeploymentProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *DeploymentPackage) GetDefaultProfileName() string {
	if x != nil {
		return x.DefaultProfileName
	}
	return ""
}

func (x *DeploymentPackage) GetApplicationDependencies() []*ApplicationDependency {
	if x != nil {
		return x.ApplicationDependencies
	}
	return nil
}

func (x *DeploymentPackage) GetExtensions() []*APIExtension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *DeploymentPackage) GetArtifacts() []*ArtifactReference {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *DeploymentPackage) GetDefaultNamespaces() map[string]string {
	if x != nil {
		return x.DefaultNamespaces
	}
	return nil
}

func (x *DeploymentPackage) GetForbidsMultipleDeployments() bool {
	if x != nil {
		return x.ForbidsMultipleDeployments
	}
	return false
}

func (x *DeploymentPackage) GetNamespaces() []*Namespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *DeploymentPackage) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeploymentPackage) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// DeploymentProfile specifies which application profiles will be used for deployment of which applications.
type DeploymentProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a human-readable unique identifier for the profile and must be unique for all profiles of a
	// given deployment package.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Display name is an optional human-readable name for the registry. When specified, it must be unique among all
	// profiles of a given package. It is used for display purposes on user interfaces.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the deployment profile. Displayed on user interfaces.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Application profiles map application names to the names of its profile, to be used when deploying the application
	// as part of the deployment package together with the deployment profile.
	ApplicationProfiles map[string]string `protobuf:"bytes,4,rep,name=application_profiles,json=applicationProfiles,proto3" json:"application_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The creation time of the deployment profile.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The last update time of the deployment profile.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *DeploymentProfile) Reset() {
	*x = DeploymentProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentProfile) ProtoMessage() {}

func (x *DeploymentProfile) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentProfile.ProtoReflect.Descriptor instead.
func (*DeploymentProfile) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{3}
}

func (x *DeploymentProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentProfile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DeploymentProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeploymentProfile) GetApplicationProfiles() map[string]string {
	if x != nil {
		return x.ApplicationProfiles
	}
	return nil
}

func (x *DeploymentProfile) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeploymentProfile) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// ApplicationReference represents a reference to an application by its name and its version.
type ApplicationReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the referenced application.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the referenced application.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ApplicationReference) Reset() {
	*x = ApplicationReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationReference) ProtoMessage() {}

func (x *ApplicationReference) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationReference.ProtoReflect.Descriptor instead.
func (*ApplicationReference) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{4}
}

func (x *ApplicationReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationReference) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// ApplicationDependency represents the dependency of one application on another within the context of a deployment package.
// This dependency is specified as the name of the application that has the dependency, and the name of the application
// that is the dependency.
type ApplicationDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the application that has the dependency on the other.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the application that is required by the other.
	Requires string `protobuf:"bytes,2,opt,name=requires,proto3" json:"requires,omitempty"`
}

func (x *ApplicationDependency) Reset() {
	*x = ApplicationDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDependency) ProtoMessage() {}

func (x *ApplicationDependency) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDependency.ProtoReflect.Descriptor instead.
func (*ApplicationDependency) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationDependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationDependency) GetRequires() string {
	if x != nil {
		return x.Requires
	}
	return ""
}

// APIExtensions represents some form of an extension to the external API provided by deployment package.
type APIExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a human-readable unique identifier for the API extension and must be unique for all extensions of a
	// given deployment package.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the API extension.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Display name is an optional human-readable name for the API extension. When specified, it must be unique among all
	// extensions of a given deployment package. It is used for display purposes on user interfaces.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the API extension. Displayed on user interfaces.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// One or more API endpoints provided by the API extension.
	Endpoints []*Endpoint `protobuf:"bytes,5,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// Additional information specific to UI extensions.
	UiExtension *UIExtension `protobuf:"bytes,6,opt,name=ui_extension,json=uiExtension,proto3" json:"ui_extension,omitempty"`
}

func (x *APIExtension) Reset() {
	*x = APIExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIExtension) ProtoMessage() {}

func (x *APIExtension) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIExtension.ProtoReflect.Descriptor instead.
func (*APIExtension) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{6}
}

func (x *APIExtension) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIExtension) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *APIExtension) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *APIExtension) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *APIExtension) GetEndpoints() []*Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *APIExtension) GetUiExtension() *UIExtension {
	if x != nil {
		return x.UiExtension
	}
	return nil
}

// UIExtension is an augmentation of an API extension.
type UIExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label is a human readable text used for display in the main UI dashboard
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// The name of the API extension endpoint.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Description of the API extension, used on the main UI dashboard.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The name of the main file to load this specific UI extension.
	FileName string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// The name of the application corresponding to this UI extension.
	AppName string `protobuf:"bytes,5,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// Name of the application module to be loaded.
	ModuleName string `protobuf:"bytes,6,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
}

func (x *UIExtension) Reset() {
	*x = UIExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIExtension) ProtoMessage() {}

func (x *UIExtension) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIExtension.ProtoReflect.Descriptor instead.
func (*UIExtension) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{7}
}

func (x *UIExtension) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UIExtension) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UIExtension) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UIExtension) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UIExtension) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *UIExtension) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

// Endpoint represents an application service endpoint.
type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the service hosted by the endpoint.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Externally accessible path to the endpoint.
	ExternalPath string `protobuf:"bytes,2,opt,name=external_path,json=externalPath,proto3" json:"external_path,omitempty"`
	// Internally accessible path to the endpoint.
	InternalPath string `protobuf:"bytes,3,opt,name=internal_path,json=internalPath,proto3" json:"internal_path,omitempty"`
	// Protocol scheme provided by the endpoint.
	Scheme string `protobuf:"bytes,4,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// Authentication type expected by the endpoint.
	AuthType string `protobuf:"bytes,5,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
	// The name of the application providing this endpoint.
	AppName string `protobuf:"bytes,6,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{8}
}

func (x *Endpoint) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Endpoint) GetExternalPath() string {
	if x != nil {
		return x.ExternalPath
	}
	return ""
}

func (x *Endpoint) GetInternalPath() string {
	if x != nil {
		return x.InternalPath
	}
	return ""
}

func (x *Endpoint) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Endpoint) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *Endpoint) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// ArtifactReference serves as a reference to an artifact, together with the artifact's purpose within a deployment package.
type ArtifactReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the artifact.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Purpose of the artifact, e.g. icon, thumbnail, Grafana dashboard, etc.
	Purpose string `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
}

func (x *ArtifactReference) Reset() {
	*x = ArtifactReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactReference) ProtoMessage() {}

func (x *ArtifactReference) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactReference.ProtoReflect.Descriptor instead.
func (*ArtifactReference) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{9}
}

func (x *ArtifactReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactReference) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

// Namespace represents a complex namespace definition with predefined labels and annotations.
// They are created before any other resources in the deployment.
type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// namespace names must be valid RFC 1123 DNS labels.
	// Avoid creating namespaces with the prefix `kube-`, since it is reserved for Kubernetes\* system namespaces.
	// Avoid `default` - will already exist
	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels      map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{10}
}

func (x *Namespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Namespace) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Namespace) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Application represents a Helm chart that can be deployed to one or more Kubernetes pods.
type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a human readable unique identifier for the application and must be unique for all applications of a
	// given project. Used in network URIs.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Display name is an optional human-readable name for the application. When specified, it must be unique among all
	// applications within a project. It is used for display purposes on user interfaces.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the application. Displayed on user interfaces.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Version of the application. Used in combination with the name to identify a unique application within a project.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Field designating whether the application is a system add-on, system extension, or a normal application.
	Kind Kind `protobuf:"varint,5,opt,name=kind,proto3,enum=catalog.v3.Kind" json:"kind,omitempty"`
	// Helm chart name.
	ChartName string `protobuf:"bytes,6,opt,name=chart_name,json=chartName,proto3" json:"chart_name,omitempty"`
	// Helm chart version.
	ChartVersion string `protobuf:"bytes,7,opt,name=chart_version,json=chartVersion,proto3" json:"chart_version,omitempty"`
	// ID of the project's registry where the Helm chart of the application is available for download.
	HelmRegistryName string `protobuf:"bytes,8,opt,name=helm_registry_name,json=helmRegistryName,proto3" json:"helm_registry_name,omitempty"`
	// Set of profiles that can be used when deploying the application.
	Profiles []*Profile `protobuf:"bytes,9,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// Name of the profile to be used by default when deploying this application.
	// If at least one profile is available, this field must be set.
	DefaultProfileName string `protobuf:"bytes,10,opt,name=default_profile_name,json=defaultProfileName,proto3" json:"default_profile_name,omitempty"`
	// ID of the project's registry where the Docker image of the application is available for download.
	ImageRegistryName string `protobuf:"bytes,11,opt,name=image_registry_name,json=imageRegistryName,proto3" json:"image_registry_name,omitempty"`
	// List of Kubernetes resources that must be ignored during the application deployment.
	IgnoredResources []*ResourceReference `protobuf:"bytes,12,rep,name=ignored_resources,json=ignoredResources,proto3" json:"ignored_resources,omitempty"`
	// The creation time of the application.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The last update time of the application.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{11}
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Application) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Application) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Application) GetKind() Kind {
	if x != nil {
		return x.Kind
	}
	return Kind_KIND_UNSPECIFIED
}

func (x *Application) GetChartName() string {
	if x != nil {
		return x.ChartName
	}
	return ""
}

func (x *Application) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *Application) GetHelmRegistryName() string {
	if x != nil {
		return x.HelmRegistryName
	}
	return ""
}

func (x *Application) GetProfiles() []*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Application) GetDefaultProfileName() string {
	if x != nil {
		return x.DefaultProfileName
	}
	return ""
}

func (x *Application) GetImageRegistryName() string {
	if x != nil {
		return x.ImageRegistryName
	}
	return ""
}

func (x *Application) GetIgnoredResources() []*ResourceReference {
	if x != nil {
		return x.IgnoredResources
	}
	return nil
}

func (x *Application) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Application) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// ResourceReference represents a Kubernetes resource identifier.
type ResourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Kubernetes resource kind, e.g. ConfigMap.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Kubernetes namespace where the ignored resource resides. When empty, the application namespace will be used.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ResourceReference) Reset() {
	*x = ResourceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceReference) ProtoMessage() {}

func (x *ResourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceReference.ProtoReflect.Descriptor instead.
func (*ResourceReference) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{12}
}

func (x *ResourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceReference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// ParameterTemplate describes override values for Helm chart values
type ParameterTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name for the parameter template.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Display name is an optional human-readable name for the template. It is used for display purposes on user interfaces.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Default value for the parameter.
	Default string `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	// Type of parameter: string, number, or boolean.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Optional validator for the parameter. Usage TBD.
	Validator string `protobuf:"bytes,5,opt,name=validator,proto3" json:"validator,omitempty"`
	// List of suggested values to use, to override the default value.
	SuggestedValues []string `protobuf:"bytes,6,rep,name=suggested_values,json=suggestedValues,proto3" json:"suggested_values,omitempty"`
	// Optional secret flag for the parameter.
	Secret bool `protobuf:"varint,7,opt,name=secret,proto3" json:"secret,omitempty"`
	// Optional mandatory flag for the parameter.
	Mandatory bool `protobuf:"varint,8,opt,name=mandatory,proto3" json:"mandatory,omitempty"`
}

func (x *ParameterTemplate) Reset() {
	*x = ParameterTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTemplate) ProtoMessage() {}

func (x *ParameterTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTemplate.ProtoReflect.Descriptor instead.
func (*ParameterTemplate) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{13}
}

func (x *ParameterTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterTemplate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ParameterTemplate) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *ParameterTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ParameterTemplate) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *ParameterTemplate) GetSuggestedValues() []string {
	if x != nil {
		return x.SuggestedValues
	}
	return nil
}

func (x *ParameterTemplate) GetSecret() bool {
	if x != nil {
		return x.Secret
	}
	return false
}

func (x *ParameterTemplate) GetMandatory() bool {
	if x != nil {
		return x.Mandatory
	}
	return false
}

// Profile is a set of configuration values for customizing application deployment.
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name for the profile. Unique among all profiles of the same application.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Display name is an optional human-readable name for the profile. When specified, it must be unique among all
	// profiles of a given application. It is used for display purposes on user interfaces.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the profile. Displayed on user interfaces.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Raw byte value containing the chart values as raw YAML bytes.
	ChartValues string `protobuf:"bytes,4,opt,name=chart_values,json=chartValues,proto3" json:"chart_values,omitempty"`
	// Parameter templates available for this profile.
	ParameterTemplates []*ParameterTemplate `protobuf:"bytes,5,rep,name=parameter_templates,json=parameterTemplates,proto3" json:"parameter_templates,omitempty"`
	// List of deployment requirements for this profile.
	DeploymentRequirement []*DeploymentRequirement `protobuf:"bytes,6,rep,name=deployment_requirement,json=deploymentRequirement,proto3" json:"deployment_requirement,omitempty"`
	// The creation time of the profile.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The last update time of the profile.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{14}
}

func (x *Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Profile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Profile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Profile) GetChartValues() string {
	if x != nil {
		return x.ChartValues
	}
	return ""
}

func (x *Profile) GetParameterTemplates() []*ParameterTemplate {
	if x != nil {
		return x.ParameterTemplates
	}
	return nil
}

func (x *Profile) GetDeploymentRequirement() []*DeploymentRequirement {
	if x != nil {
		return x.DeploymentRequirement
	}
	return nil
}

func (x *Profile) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Profile) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// DeploymentRequirement is a reference to the deployment package that must be deployed first,
// as a requirement for an application to be deployed.
type DeploymentRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the required deployment package.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the required deployment package.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Optional name of the deployment profile to be used. When not provided, the default deployment profile will be used.
	DeploymentProfileName string `protobuf:"bytes,3,opt,name=deployment_profile_name,json=deploymentProfileName,proto3" json:"deployment_profile_name,omitempty"`
}

func (x *DeploymentRequirement) Reset() {
	*x = DeploymentRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRequirement) ProtoMessage() {}

func (x *DeploymentRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRequirement.ProtoReflect.Descriptor instead.
func (*DeploymentRequirement) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{15}
}

func (x *DeploymentRequirement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentRequirement) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeploymentRequirement) GetDeploymentProfileName() string {
	if x != nil {
		return x.DeploymentProfileName
	}
	return ""
}

// Artifact represents a binary artifact that can be used for various purposes, e.g. icon or thumbnail for UI display, or
// auxiliary artifacts for integration with various platform services such as Grafana dashboard and similar. An artifact may be
// used by multiple deployment packages.
type Artifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a human-readable unique identifier for the artifact and must be unique for all artifacts within a project.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Display name is an optional human-readable name for the artifact. When specified, it must be unique among all
	// artifacts within a project. It is used for display purposes on user interfaces.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Description of the artifact. Displayed on user interfaces.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Artifact's MIME type. Only text/plain, application/json, application/yaml, image/png, and image/jpeg are allowed at this time.
	//
	// MIME types are defined and standardized in IETF's RFC 6838.
	MimeType string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Raw byte content of the artifact encoded as base64. The limits refer to the number of raw bytes.
	Artifact []byte `protobuf:"bytes,5,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// The creation time of the artifact.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The last update time of the artifact.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{16}
}

func (x *Artifact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Artifact) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Artifact) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Artifact) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Artifact) GetArtifact() []byte {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *Artifact) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Artifact) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Upload represents a single file-upload record.
type Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the file being uploaded.
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// Raw bytes content of the file being uploaded.
	Artifact []byte `protobuf:"bytes,2,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *Upload) Reset() {
	*x = Upload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_catalog_v3_resources_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upload) ProtoMessage() {}

func (x *Upload) ProtoReflect() protoreflect.Message {
	mi := &file_catalog_v3_resources_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upload.ProtoReflect.Descriptor instead.
func (*Upload) Descriptor() ([]byte, []int) {
	return file_catalog_v3_resources_proto_rawDescGZIP(), []int{17}
}

func (x *Upload) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Upload) GetArtifact() []byte {
	if x != nil {
		return x.Artifact
	}
	return nil
}

var File_catalog_v3_resources_proto protoreflect.FileDescriptor

var file_catalog_v3_resources_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x42, 0x38, 0x72, 0x36, 0x10, 0x07, 0x18, 0x07, 0x32, 0x30, 0x5e, 0x28, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x29, 0x24, 0x7c, 0x5e, 0x28, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x29, 0x24, 0x7c, 0x5e, 0x28, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x29, 0x24,
	0x7c, 0x5e, 0x28, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x29, 0x24, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xe3, 0x05, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18,
	0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x0e, 0x72, 0x0c,
	0x10, 0x00, 0x18, 0x28, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0xe8, 0x07, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x08, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0xe2,
	0x41, 0x01, 0x02, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x10, 0x01, 0x18, 0xe8, 0x07, 0x32, 0x43, 0x5e,
	0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3f, 0x7c, 0x6f, 0x63, 0x69, 0x29, 0x3a, 0x2f, 0x2f, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x28, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x29, 0x2b, 0x28, 0x5b, 0x2f, 0x3f, 0x5d, 0x5b, 0x5c, 0x77, 0x5f,
	0x5c, 0x2d, 0x40, 0x3a, 0x25, 0x2e, 0x2b, 0x7e, 0x23, 0x3f, 0x26, 0x2f, 0x3d, 0x5d, 0x2a, 0x29,
	0x3f, 0x24, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xfa,
	0x42, 0x0f, 0x72, 0x0d, 0x10, 0x00, 0x18, 0xe8, 0x07, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a,
	0x24, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0xfa, 0x42, 0x0f, 0x72, 0x0d, 0x10, 0x00, 0x18, 0xe8, 0x07, 0x32, 0x06, 0x5e, 0x5c, 0x50,
	0x43, 0x2a, 0x24, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe2, 0x41,
	0x01, 0x02, 0xfa, 0x42, 0x1a, 0x72, 0x18, 0x10, 0x01, 0x18, 0x28, 0x32, 0x12, 0x5e, 0x28, 0x48,
	0x45, 0x4c, 0x4d, 0x29, 0x24, 0x7c, 0x5e, 0x28, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x29, 0x24, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x61, 0x63, 0x65, 0x72, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x08, 0x72,
	0x06, 0x10, 0x00, 0x18, 0x80, 0x80, 0x01, 0x52, 0x07, 0x63, 0x61, 0x63, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x10, 0x00, 0x18,
	0x10, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24, 0x52, 0x07, 0x61, 0x70, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0x41, 0x01, 0x01, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0xe8, 0x07, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x0a,
	0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18, 0x28,
	0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x10,
	0x00, 0x18, 0x28, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2,
	0x41, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0xe8, 0x07, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x10, 0x01, 0x18, 0x14, 0x32, 0x27, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x2e, 0x5d, 0x7b,
	0x30, 0x2c, 0x31, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c,
	0x31, 0x7d, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x01, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x50, 0x49, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x10, 0x64, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x69, 0x0a,
	0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x1c, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x01, 0x52, 0x1a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x01, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x44, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x04, 0x0a, 0x11, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe2,
	0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18, 0x28, 0x32, 0x26, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x7b, 0x30, 0x2c, 0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30,
	0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x10, 0x00, 0x18, 0x28, 0x32,
	0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0x41, 0x01, 0x01, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0xe8, 0x07, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x46, 0x0a,
	0x18, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe2, 0x41,
	0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18, 0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b,
	0x30, 0x2c, 0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c,
	0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x10, 0x01, 0x18, 0x14, 0x32, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x2e, 0x5d, 0x7b, 0x30,
	0x2c, 0x31, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31,
	0x7d, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x15,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01,
	0x18, 0x1a, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x32, 0x34, 0x7d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18,
	0x1a, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x32, 0x34, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x0c, 0x41, 0x50, 0x49, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18,
	0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x50, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x10, 0x01, 0x18, 0x14, 0x32,
	0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x2e, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x0e,
	0x72, 0x0c, 0x10, 0x00, 0x18, 0x28, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0xe8, 0x07,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x40, 0x0a, 0x0c, 0x75, 0x69, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x49, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x0b, 0x75, 0x69, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x0b, 0x55, 0x49, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x10, 0x00, 0x18,
	0x28, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x30, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xe8, 0x07, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x28, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x08, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe2,
	0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18, 0x28, 0x32, 0x26, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x7b, 0x30, 0x2c, 0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30,
	0x2c, 0x31, 0x7d, 0x24, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2,
	0x41, 0x01, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x42, 0x2d, 0x72, 0x2b, 0x10, 0x00, 0x18, 0x20, 0x32, 0x25, 0x5e, 0x28, 0x5b, 0x61,
	0x2d, 0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x33,
	0x30, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x7b, 0x30, 0x2c, 0x31, 0x7d,
	0x24, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xe2, 0x41,
	0x01, 0x02, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x10, 0x00, 0x18, 0x10, 0x32, 0x0d, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x00, 0x18, 0x28, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f,
	0x01, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18,
	0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x10, 0x00, 0x18, 0x14, 0x32,
	0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x22, 0xe2, 0x02, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe2, 0x41,
	0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18, 0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b,
	0x30, 0x2c, 0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c,
	0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x07, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01,
	0x18, 0x1a, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x32, 0x34, 0x7d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x0e, 0x72,
	0x0c, 0x10, 0x00, 0x18, 0x28, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0xe8, 0x07, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe2,
	0x41, 0x01, 0x02, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x10, 0x01, 0x18, 0x14, 0x32, 0x27, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x2e,
	0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x32, 0x0d,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x2d, 0x2f, 0x5d, 0x2a, 0x24, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x36, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x10, 0x01, 0x18, 0x35, 0x32, 0x27,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x2e, 0x5d, 0x7b, 0x30, 0x2c, 0x35, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x12, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x10, 0x68, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x14, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xdb, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x31, 0x72, 0x2f, 0x10,
	0x01, 0x18, 0x28, 0x32, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x2e, 0x5f, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x38, 0x7d,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x40, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x39, 0x72, 0x37, 0x10, 0x01, 0x18,
	0x28, 0x32, 0x31, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x2d, 0x5d, 0x7b, 0x30, 0x2c,
	0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30,
	0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xad,
	0x03, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x10, 0x01, 0x18,
	0x80, 0x20, 0x32, 0x19, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x2f, 0x5f, 0x5c, 0x5b, 0x5c, 0x5d, 0x5c, 0x2e, 0x5c, 0x5c, 0x5d, 0x2a, 0x24, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0x41, 0x01, 0x01, 0xfa,
	0x42, 0x0e, 0x72, 0x0c, 0x10, 0x00, 0x18, 0x64, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x20, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x27, 0x72, 0x25,
	0x10, 0x01, 0x32, 0x21, 0x5e, 0x28, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x24, 0x7c, 0x5e,
	0x28, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x29, 0x24, 0x7c, 0x5e, 0x28, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x29, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x00, 0x18, 0x28, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x17, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x10, 0x92, 0x01, 0x0d, 0x10, 0x64,
	0x18, 0x01, 0x22, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x20, 0x52, 0x0f, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xb1,
	0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42,
	0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18, 0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x38,
	0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0x41, 0x01,
	0x01, 0xfa, 0x42, 0x0e, 0x72, 0x0c, 0x10, 0x00, 0x18, 0x28, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43,
	0x2a, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x00, 0x18, 0xe8, 0x07, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x09,
	0x72, 0x07, 0x10, 0x00, 0x18, 0x80, 0x92, 0xf4, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x16,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18, 0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c,
	0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d,
	0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42,
	0x2f, 0x72, 0x2d, 0x10, 0x01, 0x18, 0x14, 0x32, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x2e, 0x5d, 0x7b, 0x30, 0x2c, 0x31,
	0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x17, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01,
	0x52, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x2e, 0x72, 0x2c, 0x10, 0x01, 0x18,
	0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x0e, 0x72, 0x0c,
	0x10, 0x00, 0x18, 0x28, 0x32, 0x06, 0x5e, 0x5c, 0x50, 0x43, 0x2a, 0x24, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0xe8, 0x07, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x09,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x64, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x5d, 0x72, 0x5b, 0x10, 0x01, 0x18, 0x28, 0x32, 0x55,
	0x5e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x29, 0x24, 0x7c, 0x5e,
	0x28, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x29, 0x24, 0x7c, 0x5e, 0x28, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x79, 0x61, 0x6d, 0x6c, 0x29, 0x24, 0x7c, 0x5e, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2f, 0x70, 0x6e, 0x67, 0x29, 0x24, 0x7c, 0x5e, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6a,
	0x70, 0x65, 0x67, 0x29, 0x24, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x10, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x09, 0x7a, 0x07, 0x10, 0x04, 0x18, 0x80,
	0x92, 0xf4, 0x01, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x41, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2a, 0x51, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x44,
	0x44, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0xb6, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x33, 0x42, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x65, 0x64, 0x67, 0x65,
	0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x6f, 0x72,
	0x63, 0x68, 0x2d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x33, 0x3b, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x76, 0x33, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0a,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x33, 0xca, 0x02, 0x0a, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5c, 0x56, 0x33, 0xe2, 0x02, 0x16, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x5c, 0x56, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x3a, 0x3a, 0x56, 0x33, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_catalog_v3_resources_proto_rawDescOnce sync.Once
	file_catalog_v3_resources_proto_rawDescData = file_catalog_v3_resources_proto_rawDesc
)

func file_catalog_v3_resources_proto_rawDescGZIP() []byte {
	file_catalog_v3_resources_proto_rawDescOnce.Do(func() {
		file_catalog_v3_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_catalog_v3_resources_proto_rawDescData)
	})
	return file_catalog_v3_resources_proto_rawDescData
}

var file_catalog_v3_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_catalog_v3_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_catalog_v3_resources_proto_goTypes = []any{
	(Kind)(0),                     // 0: catalog.v3.Kind
	(*Event)(nil),                 // 1: catalog.v3.Event
	(*Registry)(nil),              // 2: catalog.v3.Registry
	(*DeploymentPackage)(nil),     // 3: catalog.v3.DeploymentPackage
	(*DeploymentProfile)(nil),     // 4: catalog.v3.DeploymentProfile
	(*ApplicationReference)(nil),  // 5: catalog.v3.ApplicationReference
	(*ApplicationDependency)(nil), // 6: catalog.v3.ApplicationDependency
	(*APIExtension)(nil),          // 7: catalog.v3.APIExtension
	(*UIExtension)(nil),           // 8: catalog.v3.UIExtension
	(*Endpoint)(nil),              // 9: catalog.v3.Endpoint
	(*ArtifactReference)(nil),     // 10: catalog.v3.ArtifactReference
	(*Namespace)(nil),             // 11: catalog.v3.Namespace
	(*Application)(nil),           // 12: catalog.v3.Application
	(*ResourceReference)(nil),     // 13: catalog.v3.ResourceReference
	(*ParameterTemplate)(nil),     // 14: catalog.v3.ParameterTemplate
	(*Profile)(nil),               // 15: catalog.v3.Profile
	(*DeploymentRequirement)(nil), // 16: catalog.v3.DeploymentRequirement
	(*Artifact)(nil),              // 17: catalog.v3.Artifact
	(*Upload)(nil),                // 18: catalog.v3.Upload
	nil,                           // 19: catalog.v3.DeploymentPackage.DefaultNamespacesEntry
	nil,                           // 20: catalog.v3.DeploymentProfile.ApplicationProfilesEntry
	nil,                           // 21: catalog.v3.Namespace.LabelsEntry
	nil,                           // 22: catalog.v3.Namespace.AnnotationsEntry
	(*timestamppb.Timestamp)(nil), // 23: google.protobuf.Timestamp
}
var file_catalog_v3_resources_proto_depIdxs = []int32{
	23, // 0: catalog.v3.Registry.create_time:type_name -> google.protobuf.Timestamp
	23, // 1: catalog.v3.Registry.update_time:type_name -> google.protobuf.Timestamp
	0,  // 2: catalog.v3.DeploymentPackage.kind:type_name -> catalog.v3.Kind
	5,  // 3: catalog.v3.DeploymentPackage.application_references:type_name -> catalog.v3.ApplicationReference
	4,  // 4: catalog.v3.DeploymentPackage.profiles:type_name -> catalog.v3.DeploymentProfile
	6,  // 5: catalog.v3.DeploymentPackage.application_dependencies:type_name -> catalog.v3.ApplicationDependency
	7,  // 6: catalog.v3.DeploymentPackage.extensions:type_name -> catalog.v3.APIExtension
	10, // 7: catalog.v3.DeploymentPackage.artifacts:type_name -> catalog.v3.ArtifactReference
	19, // 8: catalog.v3.DeploymentPackage.default_namespaces:type_name -> catalog.v3.DeploymentPackage.DefaultNamespacesEntry
	11, // 9: catalog.v3.DeploymentPackage.namespaces:type_name -> catalog.v3.Namespace
	23, // 10: catalog.v3.DeploymentPackage.create_time:type_name -> google.protobuf.Timestamp
	23, // 11: catalog.v3.DeploymentPackage.update_time:type_name -> google.protobuf.Timestamp
	20, // 12: catalog.v3.DeploymentProfile.application_profiles:type_name -> catalog.v3.DeploymentProfile.ApplicationProfilesEntry
	23, // 13: catalog.v3.DeploymentProfile.create_time:type_name -> google.protobuf.Timestamp
	23, // 14: catalog.v3.DeploymentProfile.update_time:type_name -> google.protobuf.Timestamp
	9,  // 15: catalog.v3.APIExtension.endpoints:type_name -> catalog.v3.Endpoint
	8,  // 16: catalog.v3.APIExtension.ui_extension:type_name -> catalog.v3.UIExtension
	21, // 17: catalog.v3.Namespace.labels:type_name -> catalog.v3.Namespace.LabelsEntry
	22, // 18: catalog.v3.Namespace.annotations:type_name -> catalog.v3.Namespace.AnnotationsEntry
	0,  // 19: catalog.v3.Application.kind:type_name -> catalog.v3.Kind
	15, // 20: catalog.v3.Application.profiles:type_name -> catalog.v3.Profile
	13, // 21: catalog.v3.Application.ignored_resources:type_name -> catalog.v3.ResourceReference
	23, // 22: catalog.v3.Application.create_time:type_name -> google.protobuf.Timestamp
	23, // 23: catalog.v3.Application.update_time:type_name -> google.protobuf.Timestamp
	14, // 24: catalog.v3.Profile.parameter_templates:type_name -> catalog.v3.ParameterTemplate
	16, // 25: catalog.v3.Profile.deployment_requirement:type_name -> catalog.v3.DeploymentRequirement
	23, // 26: catalog.v3.Profile.create_time:type_name -> google.protobuf.Timestamp
	23, // 27: catalog.v3.Profile.update_time:type_name -> google.protobuf.Timestamp
	23, // 28: catalog.v3.Artifact.create_time:type_name -> google.protobuf.Timestamp
	23, // 29: catalog.v3.Artifact.update_time:type_name -> google.protobuf.Timestamp
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_catalog_v3_resources_proto_init() }
func file_catalog_v3_resources_proto_init() {
	if File_catalog_v3_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_catalog_v3_resources_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Registry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ApplicationReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ApplicationDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*APIExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UIExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ArtifactReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ParameterTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Artifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_catalog_v3_resources_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Upload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_catalog_v3_resources_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_catalog_v3_resources_proto_goTypes,
		DependencyIndexes: file_catalog_v3_resources_proto_depIdxs,
		EnumInfos:         file_catalog_v3_resources_proto_enumTypes,
		MessageInfos:      file_catalog_v3_resources_proto_msgTypes,
	}.Build()
	File_catalog_v3_resources_proto = out.File
	file_catalog_v3_resources_proto_rawDesc = nil
	file_catalog_v3_resources_proto_goTypes = nil
	file_catalog_v3_resources_proto_depIdxs = nil
}
