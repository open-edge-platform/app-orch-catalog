// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: catalog/v3/service.proto

package catalogv3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	// Allows uploading of a YAML file containing various application catalog entities. Multiple RPC invocations
	// tagged with the same upload session ID can be used to upload multiple files and to create or update several
	// catalog entities as a single transaction.
	UploadCatalogEntities(ctx context.Context, in *UploadCatalogEntitiesRequest, opts ...grpc.CallOption) (*UploadCatalogEntitiesResponse, error)
	// Creates a new registry.
	CreateRegistry(ctx context.Context, in *CreateRegistryRequest, opts ...grpc.CallOption) (*CreateRegistryResponse, error)
	// Gets a list of registries.
	ListRegistries(ctx context.Context, in *ListRegistriesRequest, opts ...grpc.CallOption) (*ListRegistriesResponse, error)
	// Gets a specific registry.
	GetRegistry(ctx context.Context, in *GetRegistryRequest, opts ...grpc.CallOption) (*GetRegistryResponse, error)
	// Updates a registry.
	UpdateRegistry(ctx context.Context, in *UpdateRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes a registry.
	DeleteRegistry(ctx context.Context, in *DeleteRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Watches inventory of registries for changes.
	WatchRegistries(ctx context.Context, in *WatchRegistriesRequest, opts ...grpc.CallOption) (CatalogService_WatchRegistriesClient, error)
	// Creates a new deployment package.
	CreateDeploymentPackage(ctx context.Context, in *CreateDeploymentPackageRequest, opts ...grpc.CallOption) (*CreateDeploymentPackageResponse, error)
	// Gets a list of deployment packages.
	ListDeploymentPackages(ctx context.Context, in *ListDeploymentPackagesRequest, opts ...grpc.CallOption) (*ListDeploymentPackagesResponse, error)
	// Gets a specific deployment package.
	GetDeploymentPackage(ctx context.Context, in *GetDeploymentPackageRequest, opts ...grpc.CallOption) (*GetDeploymentPackageResponse, error)
	// Gets all versions of a named deployment package.
	GetDeploymentPackageVersions(ctx context.Context, in *GetDeploymentPackageVersionsRequest, opts ...grpc.CallOption) (*GetDeploymentPackageVersionsResponse, error)
	// Updates a deployment package.
	UpdateDeploymentPackage(ctx context.Context, in *UpdateDeploymentPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes a deployment package.
	DeleteDeploymentPackage(ctx context.Context, in *DeleteDeploymentPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Watches inventory of deployment packages for changes.
	WatchDeploymentPackages(ctx context.Context, in *WatchDeploymentPackagesRequest, opts ...grpc.CallOption) (CatalogService_WatchDeploymentPackagesClient, error)
	// Creates a new application.
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	// Gets a list of applications.
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	// Gets a specific application.
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	// Gets application reference count - the number of deployment packages using this application.
	GetApplicationReferenceCount(ctx context.Context, in *GetApplicationReferenceCountRequest, opts ...grpc.CallOption) (*GetApplicationReferenceCountResponse, error)
	// Gets all versions of a named application.
	GetApplicationVersions(ctx context.Context, in *GetApplicationVersionsRequest, opts ...grpc.CallOption) (*GetApplicationVersionsResponse, error)
	// Updates an application.
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes an application.
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Watches inventory of applications for changes.
	WatchApplications(ctx context.Context, in *WatchApplicationsRequest, opts ...grpc.CallOption) (CatalogService_WatchApplicationsClient, error)
	// Creates a new artifact.
	CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*CreateArtifactResponse, error)
	// Gets a list of artifacts.
	ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error)
	// Gets a specific artifact.
	GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error)
	// Updates an artifact.
	UpdateArtifact(ctx context.Context, in *UpdateArtifactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes an artifact.
	DeleteArtifact(ctx context.Context, in *DeleteArtifactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Watches inventory of artifacts for changes.
	WatchArtifacts(ctx context.Context, in *WatchArtifactsRequest, opts ...grpc.CallOption) (CatalogService_WatchArtifactsClient, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) UploadCatalogEntities(ctx context.Context, in *UploadCatalogEntitiesRequest, opts ...grpc.CallOption) (*UploadCatalogEntitiesResponse, error) {
	out := new(UploadCatalogEntitiesResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/UploadCatalogEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CreateRegistry(ctx context.Context, in *CreateRegistryRequest, opts ...grpc.CallOption) (*CreateRegistryResponse, error) {
	out := new(CreateRegistryResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/CreateRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListRegistries(ctx context.Context, in *ListRegistriesRequest, opts ...grpc.CallOption) (*ListRegistriesResponse, error) {
	out := new(ListRegistriesResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/ListRegistries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetRegistry(ctx context.Context, in *GetRegistryRequest, opts ...grpc.CallOption) (*GetRegistryResponse, error) {
	out := new(GetRegistryResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/GetRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateRegistry(ctx context.Context, in *UpdateRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/UpdateRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteRegistry(ctx context.Context, in *DeleteRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/DeleteRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) WatchRegistries(ctx context.Context, in *WatchRegistriesRequest, opts ...grpc.CallOption) (CatalogService_WatchRegistriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatalogService_ServiceDesc.Streams[0], "/catalog.v3.CatalogService/WatchRegistries", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogServiceWatchRegistriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatalogService_WatchRegistriesClient interface {
	Recv() (*WatchRegistriesResponse, error)
	grpc.ClientStream
}

type catalogServiceWatchRegistriesClient struct {
	grpc.ClientStream
}

func (x *catalogServiceWatchRegistriesClient) Recv() (*WatchRegistriesResponse, error) {
	m := new(WatchRegistriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogServiceClient) CreateDeploymentPackage(ctx context.Context, in *CreateDeploymentPackageRequest, opts ...grpc.CallOption) (*CreateDeploymentPackageResponse, error) {
	out := new(CreateDeploymentPackageResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/CreateDeploymentPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListDeploymentPackages(ctx context.Context, in *ListDeploymentPackagesRequest, opts ...grpc.CallOption) (*ListDeploymentPackagesResponse, error) {
	out := new(ListDeploymentPackagesResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/ListDeploymentPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetDeploymentPackage(ctx context.Context, in *GetDeploymentPackageRequest, opts ...grpc.CallOption) (*GetDeploymentPackageResponse, error) {
	out := new(GetDeploymentPackageResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/GetDeploymentPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetDeploymentPackageVersions(ctx context.Context, in *GetDeploymentPackageVersionsRequest, opts ...grpc.CallOption) (*GetDeploymentPackageVersionsResponse, error) {
	out := new(GetDeploymentPackageVersionsResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/GetDeploymentPackageVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateDeploymentPackage(ctx context.Context, in *UpdateDeploymentPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/UpdateDeploymentPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteDeploymentPackage(ctx context.Context, in *DeleteDeploymentPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/DeleteDeploymentPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) WatchDeploymentPackages(ctx context.Context, in *WatchDeploymentPackagesRequest, opts ...grpc.CallOption) (CatalogService_WatchDeploymentPackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatalogService_ServiceDesc.Streams[1], "/catalog.v3.CatalogService/WatchDeploymentPackages", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogServiceWatchDeploymentPackagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatalogService_WatchDeploymentPackagesClient interface {
	Recv() (*WatchDeploymentPackagesResponse, error)
	grpc.ClientStream
}

type catalogServiceWatchDeploymentPackagesClient struct {
	grpc.ClientStream
}

func (x *catalogServiceWatchDeploymentPackagesClient) Recv() (*WatchDeploymentPackagesResponse, error) {
	m := new(WatchDeploymentPackagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/CreateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/ListApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetApplicationReferenceCount(ctx context.Context, in *GetApplicationReferenceCountRequest, opts ...grpc.CallOption) (*GetApplicationReferenceCountResponse, error) {
	out := new(GetApplicationReferenceCountResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/GetApplicationReferenceCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetApplicationVersions(ctx context.Context, in *GetApplicationVersionsRequest, opts ...grpc.CallOption) (*GetApplicationVersionsResponse, error) {
	out := new(GetApplicationVersionsResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/GetApplicationVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/DeleteApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) WatchApplications(ctx context.Context, in *WatchApplicationsRequest, opts ...grpc.CallOption) (CatalogService_WatchApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatalogService_ServiceDesc.Streams[2], "/catalog.v3.CatalogService/WatchApplications", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogServiceWatchApplicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatalogService_WatchApplicationsClient interface {
	Recv() (*WatchApplicationsResponse, error)
	grpc.ClientStream
}

type catalogServiceWatchApplicationsClient struct {
	grpc.ClientStream
}

func (x *catalogServiceWatchApplicationsClient) Recv() (*WatchApplicationsResponse, error) {
	m := new(WatchApplicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogServiceClient) CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*CreateArtifactResponse, error) {
	out := new(CreateArtifactResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/CreateArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error) {
	out := new(ListArtifactsResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/ListArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error) {
	out := new(GetArtifactResponse)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/GetArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateArtifact(ctx context.Context, in *UpdateArtifactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/UpdateArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteArtifact(ctx context.Context, in *DeleteArtifactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.v3.CatalogService/DeleteArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) WatchArtifacts(ctx context.Context, in *WatchArtifactsRequest, opts ...grpc.CallOption) (CatalogService_WatchArtifactsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatalogService_ServiceDesc.Streams[3], "/catalog.v3.CatalogService/WatchArtifacts", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogServiceWatchArtifactsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatalogService_WatchArtifactsClient interface {
	Recv() (*WatchArtifactsResponse, error)
	grpc.ClientStream
}

type catalogServiceWatchArtifactsClient struct {
	grpc.ClientStream
}

func (x *catalogServiceWatchArtifactsClient) Recv() (*WatchArtifactsResponse, error) {
	m := new(WatchArtifactsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations should embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	// Allows uploading of a YAML file containing various application catalog entities. Multiple RPC invocations
	// tagged with the same upload session ID can be used to upload multiple files and to create or update several
	// catalog entities as a single transaction.
	UploadCatalogEntities(context.Context, *UploadCatalogEntitiesRequest) (*UploadCatalogEntitiesResponse, error)
	// Creates a new registry.
	CreateRegistry(context.Context, *CreateRegistryRequest) (*CreateRegistryResponse, error)
	// Gets a list of registries.
	ListRegistries(context.Context, *ListRegistriesRequest) (*ListRegistriesResponse, error)
	// Gets a specific registry.
	GetRegistry(context.Context, *GetRegistryRequest) (*GetRegistryResponse, error)
	// Updates a registry.
	UpdateRegistry(context.Context, *UpdateRegistryRequest) (*emptypb.Empty, error)
	// Deletes a registry.
	DeleteRegistry(context.Context, *DeleteRegistryRequest) (*emptypb.Empty, error)
	// Watches inventory of registries for changes.
	WatchRegistries(*WatchRegistriesRequest, CatalogService_WatchRegistriesServer) error
	// Creates a new deployment package.
	CreateDeploymentPackage(context.Context, *CreateDeploymentPackageRequest) (*CreateDeploymentPackageResponse, error)
	// Gets a list of deployment packages.
	ListDeploymentPackages(context.Context, *ListDeploymentPackagesRequest) (*ListDeploymentPackagesResponse, error)
	// Gets a specific deployment package.
	GetDeploymentPackage(context.Context, *GetDeploymentPackageRequest) (*GetDeploymentPackageResponse, error)
	// Gets all versions of a named deployment package.
	GetDeploymentPackageVersions(context.Context, *GetDeploymentPackageVersionsRequest) (*GetDeploymentPackageVersionsResponse, error)
	// Updates a deployment package.
	UpdateDeploymentPackage(context.Context, *UpdateDeploymentPackageRequest) (*emptypb.Empty, error)
	// Deletes a deployment package.
	DeleteDeploymentPackage(context.Context, *DeleteDeploymentPackageRequest) (*emptypb.Empty, error)
	// Watches inventory of deployment packages for changes.
	WatchDeploymentPackages(*WatchDeploymentPackagesRequest, CatalogService_WatchDeploymentPackagesServer) error
	// Creates a new application.
	CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	// Gets a list of applications.
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	// Gets a specific application.
	GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	// Gets application reference count - the number of deployment packages using this application.
	GetApplicationReferenceCount(context.Context, *GetApplicationReferenceCountRequest) (*GetApplicationReferenceCountResponse, error)
	// Gets all versions of a named application.
	GetApplicationVersions(context.Context, *GetApplicationVersionsRequest) (*GetApplicationVersionsResponse, error)
	// Updates an application.
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*emptypb.Empty, error)
	// Deletes an application.
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error)
	// Watches inventory of applications for changes.
	WatchApplications(*WatchApplicationsRequest, CatalogService_WatchApplicationsServer) error
	// Creates a new artifact.
	CreateArtifact(context.Context, *CreateArtifactRequest) (*CreateArtifactResponse, error)
	// Gets a list of artifacts.
	ListArtifacts(context.Context, *ListArtifactsRequest) (*ListArtifactsResponse, error)
	// Gets a specific artifact.
	GetArtifact(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error)
	// Updates an artifact.
	UpdateArtifact(context.Context, *UpdateArtifactRequest) (*emptypb.Empty, error)
	// Deletes an artifact.
	DeleteArtifact(context.Context, *DeleteArtifactRequest) (*emptypb.Empty, error)
	// Watches inventory of artifacts for changes.
	WatchArtifacts(*WatchArtifactsRequest, CatalogService_WatchArtifactsServer) error
}

// UnimplementedCatalogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) UploadCatalogEntities(context.Context, *UploadCatalogEntitiesRequest) (*UploadCatalogEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCatalogEntities not implemented")
}
func (UnimplementedCatalogServiceServer) CreateRegistry(context.Context, *CreateRegistryRequest) (*CreateRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistry not implemented")
}
func (UnimplementedCatalogServiceServer) ListRegistries(context.Context, *ListRegistriesRequest) (*ListRegistriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistries not implemented")
}
func (UnimplementedCatalogServiceServer) GetRegistry(context.Context, *GetRegistryRequest) (*GetRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistry not implemented")
}
func (UnimplementedCatalogServiceServer) UpdateRegistry(context.Context, *UpdateRegistryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistry not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteRegistry(context.Context, *DeleteRegistryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistry not implemented")
}
func (UnimplementedCatalogServiceServer) WatchRegistries(*WatchRegistriesRequest, CatalogService_WatchRegistriesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchRegistries not implemented")
}
func (UnimplementedCatalogServiceServer) CreateDeploymentPackage(context.Context, *CreateDeploymentPackageRequest) (*CreateDeploymentPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeploymentPackage not implemented")
}
func (UnimplementedCatalogServiceServer) ListDeploymentPackages(context.Context, *ListDeploymentPackagesRequest) (*ListDeploymentPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentPackages not implemented")
}
func (UnimplementedCatalogServiceServer) GetDeploymentPackage(context.Context, *GetDeploymentPackageRequest) (*GetDeploymentPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentPackage not implemented")
}
func (UnimplementedCatalogServiceServer) GetDeploymentPackageVersions(context.Context, *GetDeploymentPackageVersionsRequest) (*GetDeploymentPackageVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentPackageVersions not implemented")
}
func (UnimplementedCatalogServiceServer) UpdateDeploymentPackage(context.Context, *UpdateDeploymentPackageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentPackage not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteDeploymentPackage(context.Context, *DeleteDeploymentPackageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeploymentPackage not implemented")
}
func (UnimplementedCatalogServiceServer) WatchDeploymentPackages(*WatchDeploymentPackagesRequest, CatalogService_WatchDeploymentPackagesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchDeploymentPackages not implemented")
}
func (UnimplementedCatalogServiceServer) CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedCatalogServiceServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedCatalogServiceServer) GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedCatalogServiceServer) GetApplicationReferenceCount(context.Context, *GetApplicationReferenceCountRequest) (*GetApplicationReferenceCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationReferenceCount not implemented")
}
func (UnimplementedCatalogServiceServer) GetApplicationVersions(context.Context, *GetApplicationVersionsRequest) (*GetApplicationVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationVersions not implemented")
}
func (UnimplementedCatalogServiceServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedCatalogServiceServer) WatchApplications(*WatchApplicationsRequest, CatalogService_WatchApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchApplications not implemented")
}
func (UnimplementedCatalogServiceServer) CreateArtifact(context.Context, *CreateArtifactRequest) (*CreateArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtifact not implemented")
}
func (UnimplementedCatalogServiceServer) ListArtifacts(context.Context, *ListArtifactsRequest) (*ListArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}
func (UnimplementedCatalogServiceServer) GetArtifact(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (UnimplementedCatalogServiceServer) UpdateArtifact(context.Context, *UpdateArtifactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtifact not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteArtifact(context.Context, *DeleteArtifactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifact not implemented")
}
func (UnimplementedCatalogServiceServer) WatchArtifacts(*WatchArtifactsRequest, CatalogService_WatchArtifactsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchArtifacts not implemented")
}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_UploadCatalogEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCatalogEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UploadCatalogEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/UploadCatalogEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UploadCatalogEntities(ctx, req.(*UploadCatalogEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CreateRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/CreateRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateRegistry(ctx, req.(*CreateRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ListRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/ListRegistries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ListRegistries(ctx, req.(*ListRegistriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/GetRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetRegistry(ctx, req.(*GetRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/UpdateRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateRegistry(ctx, req.(*UpdateRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/DeleteRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteRegistry(ctx, req.(*DeleteRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_WatchRegistries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRegistriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServiceServer).WatchRegistries(m, &catalogServiceWatchRegistriesServer{stream})
}

type CatalogService_WatchRegistriesServer interface {
	Send(*WatchRegistriesResponse) error
	grpc.ServerStream
}

type catalogServiceWatchRegistriesServer struct {
	grpc.ServerStream
}

func (x *catalogServiceWatchRegistriesServer) Send(m *WatchRegistriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CatalogService_CreateDeploymentPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateDeploymentPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/CreateDeploymentPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateDeploymentPackage(ctx, req.(*CreateDeploymentPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListDeploymentPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ListDeploymentPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/ListDeploymentPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ListDeploymentPackages(ctx, req.(*ListDeploymentPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetDeploymentPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetDeploymentPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/GetDeploymentPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetDeploymentPackage(ctx, req.(*GetDeploymentPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetDeploymentPackageVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentPackageVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetDeploymentPackageVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/GetDeploymentPackageVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetDeploymentPackageVersions(ctx, req.(*GetDeploymentPackageVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateDeploymentPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateDeploymentPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/UpdateDeploymentPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateDeploymentPackage(ctx, req.(*UpdateDeploymentPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteDeploymentPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteDeploymentPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/DeleteDeploymentPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteDeploymentPackage(ctx, req.(*DeleteDeploymentPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_WatchDeploymentPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDeploymentPackagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServiceServer).WatchDeploymentPackages(m, &catalogServiceWatchDeploymentPackagesServer{stream})
}

type CatalogService_WatchDeploymentPackagesServer interface {
	Send(*WatchDeploymentPackagesResponse) error
	grpc.ServerStream
}

type catalogServiceWatchDeploymentPackagesServer struct {
	grpc.ServerStream
}

func (x *catalogServiceWatchDeploymentPackagesServer) Send(m *WatchDeploymentPackagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CatalogService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetApplicationReferenceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationReferenceCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetApplicationReferenceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/GetApplicationReferenceCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetApplicationReferenceCount(ctx, req.(*GetApplicationReferenceCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetApplicationVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetApplicationVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/GetApplicationVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetApplicationVersions(ctx, req.(*GetApplicationVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_WatchApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchApplicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServiceServer).WatchApplications(m, &catalogServiceWatchApplicationsServer{stream})
}

type CatalogService_WatchApplicationsServer interface {
	Send(*WatchApplicationsResponse) error
	grpc.ServerStream
}

type catalogServiceWatchApplicationsServer struct {
	grpc.ServerStream
}

func (x *catalogServiceWatchApplicationsServer) Send(m *WatchApplicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CatalogService_CreateArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/CreateArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateArtifact(ctx, req.(*CreateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ListArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/ListArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ListArtifacts(ctx, req.(*ListArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/GetArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetArtifact(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/UpdateArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateArtifact(ctx, req.(*UpdateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.v3.CatalogService/DeleteArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteArtifact(ctx, req.(*DeleteArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_WatchArtifacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchArtifactsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServiceServer).WatchArtifacts(m, &catalogServiceWatchArtifactsServer{stream})
}

type CatalogService_WatchArtifactsServer interface {
	Send(*WatchArtifactsResponse) error
	grpc.ServerStream
}

type catalogServiceWatchArtifactsServer struct {
	grpc.ServerStream
}

func (x *catalogServiceWatchArtifactsServer) Send(m *WatchArtifactsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.v3.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadCatalogEntities",
			Handler:    _CatalogService_UploadCatalogEntities_Handler,
		},
		{
			MethodName: "CreateRegistry",
			Handler:    _CatalogService_CreateRegistry_Handler,
		},
		{
			MethodName: "ListRegistries",
			Handler:    _CatalogService_ListRegistries_Handler,
		},
		{
			MethodName: "GetRegistry",
			Handler:    _CatalogService_GetRegistry_Handler,
		},
		{
			MethodName: "UpdateRegistry",
			Handler:    _CatalogService_UpdateRegistry_Handler,
		},
		{
			MethodName: "DeleteRegistry",
			Handler:    _CatalogService_DeleteRegistry_Handler,
		},
		{
			MethodName: "CreateDeploymentPackage",
			Handler:    _CatalogService_CreateDeploymentPackage_Handler,
		},
		{
			MethodName: "ListDeploymentPackages",
			Handler:    _CatalogService_ListDeploymentPackages_Handler,
		},
		{
			MethodName: "GetDeploymentPackage",
			Handler:    _CatalogService_GetDeploymentPackage_Handler,
		},
		{
			MethodName: "GetDeploymentPackageVersions",
			Handler:    _CatalogService_GetDeploymentPackageVersions_Handler,
		},
		{
			MethodName: "UpdateDeploymentPackage",
			Handler:    _CatalogService_UpdateDeploymentPackage_Handler,
		},
		{
			MethodName: "DeleteDeploymentPackage",
			Handler:    _CatalogService_DeleteDeploymentPackage_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _CatalogService_CreateApplication_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _CatalogService_ListApplications_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _CatalogService_GetApplication_Handler,
		},
		{
			MethodName: "GetApplicationReferenceCount",
			Handler:    _CatalogService_GetApplicationReferenceCount_Handler,
		},
		{
			MethodName: "GetApplicationVersions",
			Handler:    _CatalogService_GetApplicationVersions_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _CatalogService_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _CatalogService_DeleteApplication_Handler,
		},
		{
			MethodName: "CreateArtifact",
			Handler:    _CatalogService_CreateArtifact_Handler,
		},
		{
			MethodName: "ListArtifacts",
			Handler:    _CatalogService_ListArtifacts_Handler,
		},
		{
			MethodName: "GetArtifact",
			Handler:    _CatalogService_GetArtifact_Handler,
		},
		{
			MethodName: "UpdateArtifact",
			Handler:    _CatalogService_UpdateArtifact_Handler,
		},
		{
			MethodName: "DeleteArtifact",
			Handler:    _CatalogService_DeleteArtifact_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchRegistries",
			Handler:       _CatalogService_WatchRegistries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchDeploymentPackages",
			Handler:       _CatalogService_WatchDeploymentPackages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchApplications",
			Handler:       _CatalogService_WatchApplications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchArtifacts",
			Handler:       _CatalogService_WatchArtifacts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "catalog/v3/service.proto",
}
