// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: catalog/v3/service.proto

package catalogv3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UploadCatalogEntitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadCatalogEntitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadCatalogEntitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadCatalogEntitiesRequestMultiError, or nil if none found.
func (m *UploadCatalogEntitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadCatalogEntitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for UploadNumber

	// no validation rules for LastUpload

	if all {
		switch v := interface{}(m.GetUpload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadCatalogEntitiesRequestValidationError{
					field:  "Upload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadCatalogEntitiesRequestValidationError{
					field:  "Upload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadCatalogEntitiesRequestValidationError{
				field:  "Upload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadCatalogEntitiesRequestMultiError(errors)
	}

	return nil
}

// UploadCatalogEntitiesRequestMultiError is an error wrapping multiple
// validation errors returned by UploadCatalogEntitiesRequest.ValidateAll() if
// the designated constraints aren't met.
type UploadCatalogEntitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadCatalogEntitiesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadCatalogEntitiesRequestMultiError) AllErrors() []error { return m }

// UploadCatalogEntitiesRequestValidationError is the validation error returned
// by UploadCatalogEntitiesRequest.Validate if the designated constraints
// aren't met.
type UploadCatalogEntitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadCatalogEntitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadCatalogEntitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadCatalogEntitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadCatalogEntitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadCatalogEntitiesRequestValidationError) ErrorName() string {
	return "UploadCatalogEntitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadCatalogEntitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadCatalogEntitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadCatalogEntitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadCatalogEntitiesRequestValidationError{}

// Validate checks the field values on UploadCatalogEntitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadCatalogEntitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadCatalogEntitiesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UploadCatalogEntitiesResponseMultiError, or nil if none found.
func (m *UploadCatalogEntitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadCatalogEntitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for UploadNumber

	if len(errors) > 0 {
		return UploadCatalogEntitiesResponseMultiError(errors)
	}

	return nil
}

// UploadCatalogEntitiesResponseMultiError is an error wrapping multiple
// validation errors returned by UploadCatalogEntitiesResponse.ValidateAll()
// if the designated constraints aren't met.
type UploadCatalogEntitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadCatalogEntitiesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadCatalogEntitiesResponseMultiError) AllErrors() []error { return m }

// UploadCatalogEntitiesResponseValidationError is the validation error
// returned by UploadCatalogEntitiesResponse.Validate if the designated
// constraints aren't met.
type UploadCatalogEntitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadCatalogEntitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadCatalogEntitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadCatalogEntitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadCatalogEntitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadCatalogEntitiesResponseValidationError) ErrorName() string {
	return "UploadCatalogEntitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadCatalogEntitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadCatalogEntitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadCatalogEntitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadCatalogEntitiesResponseValidationError{}

// Validate checks the field values on UploadMultipleCatalogEntitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UploadMultipleCatalogEntitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadMultipleCatalogEntitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UploadMultipleCatalogEntitiesResponseMultiError, or nil if none found.
func (m *UploadMultipleCatalogEntitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadMultipleCatalogEntitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadMultipleCatalogEntitiesResponseValidationError{
						field:  fmt.Sprintf("Responses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadMultipleCatalogEntitiesResponseValidationError{
						field:  fmt.Sprintf("Responses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadMultipleCatalogEntitiesResponseValidationError{
					field:  fmt.Sprintf("Responses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UploadMultipleCatalogEntitiesResponseMultiError(errors)
	}

	return nil
}

// UploadMultipleCatalogEntitiesResponseMultiError is an error wrapping
// multiple validation errors returned by
// UploadMultipleCatalogEntitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadMultipleCatalogEntitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadMultipleCatalogEntitiesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadMultipleCatalogEntitiesResponseMultiError) AllErrors() []error { return m }

// UploadMultipleCatalogEntitiesResponseValidationError is the validation error
// returned by UploadMultipleCatalogEntitiesResponse.Validate if the
// designated constraints aren't met.
type UploadMultipleCatalogEntitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadMultipleCatalogEntitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadMultipleCatalogEntitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadMultipleCatalogEntitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadMultipleCatalogEntitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadMultipleCatalogEntitiesResponseValidationError) ErrorName() string {
	return "UploadMultipleCatalogEntitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadMultipleCatalogEntitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadMultipleCatalogEntitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadMultipleCatalogEntitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadMultipleCatalogEntitiesResponseValidationError{}

// Validate checks the field values on ImportRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImportRequestMultiError, or
// nil if none found.
func (m *ImportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUrl()); l < 0 || l > 1000 {
		err := ImportRequestValidationError{
			field:  "Url",
			reason: "value length must be between 0 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 0 || l > 1000 {
		err := ImportRequestValidationError{
			field:  "Username",
			reason: "value length must be between 0 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImportRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := ImportRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^\\\\PC*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAuthToken()); l < 0 || l > 4500 {
		err := ImportRequestValidationError{
			field:  "AuthToken",
			reason: "value length must be between 0 and 4500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImportRequest_AuthToken_Pattern.MatchString(m.GetAuthToken()) {
		err := ImportRequestValidationError{
			field:  "AuthToken",
			reason: "value does not match regex pattern \"^\\\\PC*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetChartValues()); l < 0 || l > 4000000 {
		err := ImportRequestValidationError{
			field:  "ChartValues",
			reason: "value length must be between 0 and 4000000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IncludeAuth

	// no validation rules for GenerateDefaultValues

	// no validation rules for GenerateDefaultParameters

	if len(errors) > 0 {
		return ImportRequestMultiError(errors)
	}

	return nil
}

// ImportRequestMultiError is an error wrapping multiple validation errors
// returned by ImportRequest.ValidateAll() if the designated constraints
// aren't met.
type ImportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportRequestMultiError) AllErrors() []error { return m }

// ImportRequestValidationError is the validation error returned by
// ImportRequest.Validate if the designated constraints aren't met.
type ImportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportRequestValidationError) ErrorName() string { return "ImportRequestValidationError" }

// Error satisfies the builtin error interface
func (e ImportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportRequestValidationError{}

var _ImportRequest_Username_Pattern = regexp.MustCompile("^\\PC*$")

var _ImportRequest_AuthToken_Pattern = regexp.MustCompile("^\\PC*$")

// Validate checks the field values on ImportResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImportResponseMultiError,
// or nil if none found.
func (m *ImportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImportResponseMultiError(errors)
	}

	return nil
}

// ImportResponseMultiError is an error wrapping multiple validation errors
// returned by ImportResponse.ValidateAll() if the designated constraints
// aren't met.
type ImportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportResponseMultiError) AllErrors() []error { return m }

// ImportResponseValidationError is the validation error returned by
// ImportResponse.Validate if the designated constraints aren't met.
type ImportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportResponseValidationError) ErrorName() string { return "ImportResponseValidationError" }

// Error satisfies the builtin error interface
func (e ImportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportResponseValidationError{}

// Validate checks the field values on CreateRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRegistryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRegistryRequestMultiError, or nil if none found.
func (m *CreateRegistryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRegistryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegistry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRegistryRequestValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRegistryRequestValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRegistryRequestValidationError{
				field:  "Registry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRegistryRequestMultiError(errors)
	}

	return nil
}

// CreateRegistryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRegistryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRegistryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRegistryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRegistryRequestMultiError) AllErrors() []error { return m }

// CreateRegistryRequestValidationError is the validation error returned by
// CreateRegistryRequest.Validate if the designated constraints aren't met.
type CreateRegistryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRegistryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRegistryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRegistryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRegistryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRegistryRequestValidationError) ErrorName() string {
	return "CreateRegistryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRegistryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRegistryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRegistryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRegistryRequestValidationError{}

// Validate checks the field values on CreateRegistryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRegistryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRegistryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRegistryResponseMultiError, or nil if none found.
func (m *CreateRegistryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRegistryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegistry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRegistryResponseValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRegistryResponseValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRegistryResponseValidationError{
				field:  "Registry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRegistryResponseMultiError(errors)
	}

	return nil
}

// CreateRegistryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRegistryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateRegistryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRegistryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRegistryResponseMultiError) AllErrors() []error { return m }

// CreateRegistryResponseValidationError is the validation error returned by
// CreateRegistryResponse.Validate if the designated constraints aren't met.
type CreateRegistryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRegistryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRegistryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRegistryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRegistryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRegistryResponseValidationError) ErrorName() string {
	return "CreateRegistryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRegistryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRegistryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRegistryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRegistryResponseValidationError{}

// Validate checks the field values on ListRegistriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegistriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegistriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegistriesRequestMultiError, or nil if none found.
func (m *ListRegistriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegistriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderBy

	// no validation rules for Filter

	// no validation rules for PageSize

	// no validation rules for Offset

	// no validation rules for ShowSensitiveInfo

	if len(errors) > 0 {
		return ListRegistriesRequestMultiError(errors)
	}

	return nil
}

// ListRegistriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListRegistriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRegistriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegistriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegistriesRequestMultiError) AllErrors() []error { return m }

// ListRegistriesRequestValidationError is the validation error returned by
// ListRegistriesRequest.Validate if the designated constraints aren't met.
type ListRegistriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegistriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegistriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegistriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegistriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegistriesRequestValidationError) ErrorName() string {
	return "ListRegistriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegistriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegistriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegistriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegistriesRequestValidationError{}

// Validate checks the field values on ListRegistriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegistriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegistriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegistriesResponseMultiError, or nil if none found.
func (m *ListRegistriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegistriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRegistries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRegistriesResponseValidationError{
						field:  fmt.Sprintf("Registries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRegistriesResponseValidationError{
						field:  fmt.Sprintf("Registries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRegistriesResponseValidationError{
					field:  fmt.Sprintf("Registries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	if len(errors) > 0 {
		return ListRegistriesResponseMultiError(errors)
	}

	return nil
}

// ListRegistriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListRegistriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRegistriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegistriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegistriesResponseMultiError) AllErrors() []error { return m }

// ListRegistriesResponseValidationError is the validation error returned by
// ListRegistriesResponse.Validate if the designated constraints aren't met.
type ListRegistriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegistriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegistriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegistriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegistriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegistriesResponseValidationError) ErrorName() string {
	return "ListRegistriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegistriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegistriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegistriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegistriesResponseValidationError{}

// Validate checks the field values on GetRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRegistryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRegistryRequestMultiError, or nil if none found.
func (m *GetRegistryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRegistryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistryName

	// no validation rules for ShowSensitiveInfo

	if len(errors) > 0 {
		return GetRegistryRequestMultiError(errors)
	}

	return nil
}

// GetRegistryRequestMultiError is an error wrapping multiple validation errors
// returned by GetRegistryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRegistryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegistryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegistryRequestMultiError) AllErrors() []error { return m }

// GetRegistryRequestValidationError is the validation error returned by
// GetRegistryRequest.Validate if the designated constraints aren't met.
type GetRegistryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegistryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegistryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegistryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegistryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegistryRequestValidationError) ErrorName() string {
	return "GetRegistryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegistryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegistryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegistryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegistryRequestValidationError{}

// Validate checks the field values on GetRegistryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRegistryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRegistryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRegistryResponseMultiError, or nil if none found.
func (m *GetRegistryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRegistryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegistry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRegistryResponseValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRegistryResponseValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRegistryResponseValidationError{
				field:  "Registry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRegistryResponseMultiError(errors)
	}

	return nil
}

// GetRegistryResponseMultiError is an error wrapping multiple validation
// errors returned by GetRegistryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRegistryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegistryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegistryResponseMultiError) AllErrors() []error { return m }

// GetRegistryResponseValidationError is the validation error returned by
// GetRegistryResponse.Validate if the designated constraints aren't met.
type GetRegistryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegistryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegistryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegistryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegistryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegistryResponseValidationError) ErrorName() string {
	return "GetRegistryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegistryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegistryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegistryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegistryResponseValidationError{}

// Validate checks the field values on UpdateRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRegistryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRegistryRequestMultiError, or nil if none found.
func (m *UpdateRegistryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRegistryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistryName

	if all {
		switch v := interface{}(m.GetRegistry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRegistryRequestValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRegistryRequestValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRegistryRequestValidationError{
				field:  "Registry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRegistryRequestMultiError(errors)
	}

	return nil
}

// UpdateRegistryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRegistryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRegistryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRegistryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRegistryRequestMultiError) AllErrors() []error { return m }

// UpdateRegistryRequestValidationError is the validation error returned by
// UpdateRegistryRequest.Validate if the designated constraints aren't met.
type UpdateRegistryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRegistryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRegistryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRegistryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRegistryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRegistryRequestValidationError) ErrorName() string {
	return "UpdateRegistryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRegistryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRegistryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRegistryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRegistryRequestValidationError{}

// Validate checks the field values on DeleteRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRegistryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRegistryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRegistryRequestMultiError, or nil if none found.
func (m *DeleteRegistryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRegistryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistryName

	if len(errors) > 0 {
		return DeleteRegistryRequestMultiError(errors)
	}

	return nil
}

// DeleteRegistryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRegistryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRegistryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRegistryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRegistryRequestMultiError) AllErrors() []error { return m }

// DeleteRegistryRequestValidationError is the validation error returned by
// DeleteRegistryRequest.Validate if the designated constraints aren't met.
type DeleteRegistryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegistryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegistryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegistryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegistryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegistryRequestValidationError) ErrorName() string {
	return "DeleteRegistryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegistryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegistryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegistryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegistryRequestValidationError{}

// Validate checks the field values on WatchRegistriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchRegistriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchRegistriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchRegistriesRequestMultiError, or nil if none found.
func (m *WatchRegistriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchRegistriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for NoReplay

	// no validation rules for ShowSensitiveInfo

	if len(errors) > 0 {
		return WatchRegistriesRequestMultiError(errors)
	}

	return nil
}

// WatchRegistriesRequestMultiError is an error wrapping multiple validation
// errors returned by WatchRegistriesRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchRegistriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchRegistriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchRegistriesRequestMultiError) AllErrors() []error { return m }

// WatchRegistriesRequestValidationError is the validation error returned by
// WatchRegistriesRequest.Validate if the designated constraints aren't met.
type WatchRegistriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchRegistriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchRegistriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchRegistriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchRegistriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchRegistriesRequestValidationError) ErrorName() string {
	return "WatchRegistriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchRegistriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchRegistriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchRegistriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchRegistriesRequestValidationError{}

// Validate checks the field values on WatchRegistriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchRegistriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchRegistriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchRegistriesResponseMultiError, or nil if none found.
func (m *WatchRegistriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchRegistriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchRegistriesResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchRegistriesResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchRegistriesResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegistry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchRegistriesResponseValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchRegistriesResponseValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchRegistriesResponseValidationError{
				field:  "Registry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchRegistriesResponseMultiError(errors)
	}

	return nil
}

// WatchRegistriesResponseMultiError is an error wrapping multiple validation
// errors returned by WatchRegistriesResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchRegistriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchRegistriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchRegistriesResponseMultiError) AllErrors() []error { return m }

// WatchRegistriesResponseValidationError is the validation error returned by
// WatchRegistriesResponse.Validate if the designated constraints aren't met.
type WatchRegistriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchRegistriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchRegistriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchRegistriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchRegistriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchRegistriesResponseValidationError) ErrorName() string {
	return "WatchRegistriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchRegistriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchRegistriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchRegistriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchRegistriesResponseValidationError{}

// Validate checks the field values on CreateDeploymentPackageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeploymentPackageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDeploymentPackageRequestMultiError, or nil if none found.
func (m *CreateDeploymentPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeploymentPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeploymentPackageRequestValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeploymentPackageRequestValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeploymentPackageRequestValidationError{
				field:  "DeploymentPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeploymentPackageRequestMultiError(errors)
	}

	return nil
}

// CreateDeploymentPackageRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDeploymentPackageRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateDeploymentPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentPackageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentPackageRequestMultiError) AllErrors() []error { return m }

// CreateDeploymentPackageRequestValidationError is the validation error
// returned by CreateDeploymentPackageRequest.Validate if the designated
// constraints aren't met.
type CreateDeploymentPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentPackageRequestValidationError) ErrorName() string {
	return "CreateDeploymentPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentPackageRequestValidationError{}

// Validate checks the field values on CreateDeploymentPackageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentPackageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeploymentPackageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDeploymentPackageResponseMultiError, or nil if none found.
func (m *CreateDeploymentPackageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentPackageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeploymentPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeploymentPackageResponseValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeploymentPackageResponseValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeploymentPackageResponseValidationError{
				field:  "DeploymentPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeploymentPackageResponseMultiError(errors)
	}

	return nil
}

// CreateDeploymentPackageResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDeploymentPackageResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateDeploymentPackageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentPackageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentPackageResponseMultiError) AllErrors() []error { return m }

// CreateDeploymentPackageResponseValidationError is the validation error
// returned by CreateDeploymentPackageResponse.Validate if the designated
// constraints aren't met.
type CreateDeploymentPackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentPackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentPackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentPackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentPackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentPackageResponseValidationError) ErrorName() string {
	return "CreateDeploymentPackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentPackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentPackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentPackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentPackageResponseValidationError{}

// Validate checks the field values on ListDeploymentPackagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentPackagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentPackagesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDeploymentPackagesRequestMultiError, or nil if none found.
func (m *ListDeploymentPackagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentPackagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderBy

	// no validation rules for Filter

	// no validation rules for PageSize

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListDeploymentPackagesRequestMultiError(errors)
	}

	return nil
}

// ListDeploymentPackagesRequestMultiError is an error wrapping multiple
// validation errors returned by ListDeploymentPackagesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListDeploymentPackagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentPackagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentPackagesRequestMultiError) AllErrors() []error { return m }

// ListDeploymentPackagesRequestValidationError is the validation error
// returned by ListDeploymentPackagesRequest.Validate if the designated
// constraints aren't met.
type ListDeploymentPackagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentPackagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentPackagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentPackagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentPackagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentPackagesRequestValidationError) ErrorName() string {
	return "ListDeploymentPackagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentPackagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentPackagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentPackagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentPackagesRequestValidationError{}

// Validate checks the field values on ListDeploymentPackagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentPackagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentPackagesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDeploymentPackagesResponseMultiError, or nil if none found.
func (m *ListDeploymentPackagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentPackagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeploymentPackages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeploymentPackagesResponseValidationError{
						field:  fmt.Sprintf("DeploymentPackages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeploymentPackagesResponseValidationError{
						field:  fmt.Sprintf("DeploymentPackages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeploymentPackagesResponseValidationError{
					field:  fmt.Sprintf("DeploymentPackages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	if len(errors) > 0 {
		return ListDeploymentPackagesResponseMultiError(errors)
	}

	return nil
}

// ListDeploymentPackagesResponseMultiError is an error wrapping multiple
// validation errors returned by ListDeploymentPackagesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListDeploymentPackagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentPackagesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentPackagesResponseMultiError) AllErrors() []error { return m }

// ListDeploymentPackagesResponseValidationError is the validation error
// returned by ListDeploymentPackagesResponse.Validate if the designated
// constraints aren't met.
type ListDeploymentPackagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentPackagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentPackagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentPackagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentPackagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentPackagesResponseValidationError) ErrorName() string {
	return "ListDeploymentPackagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentPackagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentPackagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentPackagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentPackagesResponseValidationError{}

// Validate checks the field values on GetDeploymentPackageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentPackageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentPackageRequestMultiError, or nil if none found.
func (m *GetDeploymentPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentPackageName

	// no validation rules for Version

	if len(errors) > 0 {
		return GetDeploymentPackageRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentPackageRequestMultiError is an error wrapping multiple
// validation errors returned by GetDeploymentPackageRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDeploymentPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentPackageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentPackageRequestMultiError) AllErrors() []error { return m }

// GetDeploymentPackageRequestValidationError is the validation error returned
// by GetDeploymentPackageRequest.Validate if the designated constraints
// aren't met.
type GetDeploymentPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentPackageRequestValidationError) ErrorName() string {
	return "GetDeploymentPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentPackageRequestValidationError{}

// Validate checks the field values on GetDeploymentPackageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentPackageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentPackageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentPackageResponseMultiError, or nil if none found.
func (m *GetDeploymentPackageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentPackageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeploymentPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeploymentPackageResponseValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeploymentPackageResponseValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeploymentPackageResponseValidationError{
				field:  "DeploymentPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeploymentPackageResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentPackageResponseMultiError is an error wrapping multiple
// validation errors returned by GetDeploymentPackageResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDeploymentPackageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentPackageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentPackageResponseMultiError) AllErrors() []error { return m }

// GetDeploymentPackageResponseValidationError is the validation error returned
// by GetDeploymentPackageResponse.Validate if the designated constraints
// aren't met.
type GetDeploymentPackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentPackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentPackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentPackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentPackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentPackageResponseValidationError) ErrorName() string {
	return "GetDeploymentPackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentPackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentPackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentPackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentPackageResponseValidationError{}

// Validate checks the field values on GetDeploymentPackageVersionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDeploymentPackageVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentPackageVersionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDeploymentPackageVersionsRequestMultiError, or nil if none found.
func (m *GetDeploymentPackageVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentPackageVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentPackageName

	if len(errors) > 0 {
		return GetDeploymentPackageVersionsRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentPackageVersionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetDeploymentPackageVersionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentPackageVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentPackageVersionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentPackageVersionsRequestMultiError) AllErrors() []error { return m }

// GetDeploymentPackageVersionsRequestValidationError is the validation error
// returned by GetDeploymentPackageVersionsRequest.Validate if the designated
// constraints aren't met.
type GetDeploymentPackageVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentPackageVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentPackageVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentPackageVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentPackageVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentPackageVersionsRequestValidationError) ErrorName() string {
	return "GetDeploymentPackageVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentPackageVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentPackageVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentPackageVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentPackageVersionsRequestValidationError{}

// Validate checks the field values on GetDeploymentPackageVersionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetDeploymentPackageVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentPackageVersionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDeploymentPackageVersionsResponseMultiError, or nil if none found.
func (m *GetDeploymentPackageVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentPackageVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeploymentPackages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDeploymentPackageVersionsResponseValidationError{
						field:  fmt.Sprintf("DeploymentPackages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDeploymentPackageVersionsResponseValidationError{
						field:  fmt.Sprintf("DeploymentPackages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDeploymentPackageVersionsResponseValidationError{
					field:  fmt.Sprintf("DeploymentPackages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDeploymentPackageVersionsResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentPackageVersionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDeploymentPackageVersionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentPackageVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentPackageVersionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentPackageVersionsResponseMultiError) AllErrors() []error { return m }

// GetDeploymentPackageVersionsResponseValidationError is the validation error
// returned by GetDeploymentPackageVersionsResponse.Validate if the designated
// constraints aren't met.
type GetDeploymentPackageVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentPackageVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentPackageVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentPackageVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentPackageVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentPackageVersionsResponseValidationError) ErrorName() string {
	return "GetDeploymentPackageVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentPackageVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentPackageVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentPackageVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentPackageVersionsResponseValidationError{}

// Validate checks the field values on UpdateDeploymentPackageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeploymentPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeploymentPackageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDeploymentPackageRequestMultiError, or nil if none found.
func (m *UpdateDeploymentPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeploymentPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentPackageName

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetDeploymentPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeploymentPackageRequestValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeploymentPackageRequestValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeploymentPackageRequestValidationError{
				field:  "DeploymentPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDeploymentPackageRequestMultiError(errors)
	}

	return nil
}

// UpdateDeploymentPackageRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDeploymentPackageRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateDeploymentPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeploymentPackageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeploymentPackageRequestMultiError) AllErrors() []error { return m }

// UpdateDeploymentPackageRequestValidationError is the validation error
// returned by UpdateDeploymentPackageRequest.Validate if the designated
// constraints aren't met.
type UpdateDeploymentPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentPackageRequestValidationError) ErrorName() string {
	return "UpdateDeploymentPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentPackageRequestValidationError{}

// Validate checks the field values on DeleteDeploymentPackageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeploymentPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeploymentPackageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteDeploymentPackageRequestMultiError, or nil if none found.
func (m *DeleteDeploymentPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeploymentPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentPackageName

	// no validation rules for Version

	if len(errors) > 0 {
		return DeleteDeploymentPackageRequestMultiError(errors)
	}

	return nil
}

// DeleteDeploymentPackageRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDeploymentPackageRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteDeploymentPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeploymentPackageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeploymentPackageRequestMultiError) AllErrors() []error { return m }

// DeleteDeploymentPackageRequestValidationError is the validation error
// returned by DeleteDeploymentPackageRequest.Validate if the designated
// constraints aren't met.
type DeleteDeploymentPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeploymentPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeploymentPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeploymentPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeploymentPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeploymentPackageRequestValidationError) ErrorName() string {
	return "DeleteDeploymentPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeploymentPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeploymentPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeploymentPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeploymentPackageRequestValidationError{}

// Validate checks the field values on WatchDeploymentPackagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchDeploymentPackagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchDeploymentPackagesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WatchDeploymentPackagesRequestMultiError, or nil if none found.
func (m *WatchDeploymentPackagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchDeploymentPackagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for NoReplay

	if len(errors) > 0 {
		return WatchDeploymentPackagesRequestMultiError(errors)
	}

	return nil
}

// WatchDeploymentPackagesRequestMultiError is an error wrapping multiple
// validation errors returned by WatchDeploymentPackagesRequest.ValidateAll()
// if the designated constraints aren't met.
type WatchDeploymentPackagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchDeploymentPackagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchDeploymentPackagesRequestMultiError) AllErrors() []error { return m }

// WatchDeploymentPackagesRequestValidationError is the validation error
// returned by WatchDeploymentPackagesRequest.Validate if the designated
// constraints aren't met.
type WatchDeploymentPackagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchDeploymentPackagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchDeploymentPackagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchDeploymentPackagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchDeploymentPackagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchDeploymentPackagesRequestValidationError) ErrorName() string {
	return "WatchDeploymentPackagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchDeploymentPackagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchDeploymentPackagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchDeploymentPackagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchDeploymentPackagesRequestValidationError{}

// Validate checks the field values on WatchDeploymentPackagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchDeploymentPackagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchDeploymentPackagesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WatchDeploymentPackagesResponseMultiError, or nil if none found.
func (m *WatchDeploymentPackagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchDeploymentPackagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchDeploymentPackagesResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchDeploymentPackagesResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchDeploymentPackagesResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeploymentPackage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchDeploymentPackagesResponseValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchDeploymentPackagesResponseValidationError{
					field:  "DeploymentPackage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchDeploymentPackagesResponseValidationError{
				field:  "DeploymentPackage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchDeploymentPackagesResponseMultiError(errors)
	}

	return nil
}

// WatchDeploymentPackagesResponseMultiError is an error wrapping multiple
// validation errors returned by WatchDeploymentPackagesResponse.ValidateAll()
// if the designated constraints aren't met.
type WatchDeploymentPackagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchDeploymentPackagesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchDeploymentPackagesResponseMultiError) AllErrors() []error { return m }

// WatchDeploymentPackagesResponseValidationError is the validation error
// returned by WatchDeploymentPackagesResponse.Validate if the designated
// constraints aren't met.
type WatchDeploymentPackagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchDeploymentPackagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchDeploymentPackagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchDeploymentPackagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchDeploymentPackagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchDeploymentPackagesResponseValidationError) ErrorName() string {
	return "WatchDeploymentPackagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchDeploymentPackagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchDeploymentPackagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchDeploymentPackagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchDeploymentPackagesResponseValidationError{}

// Validate checks the field values on CreateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateApplicationRequestMultiError, or nil if none found.
func (m *CreateApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateApplicationRequestValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateApplicationRequestValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationRequestValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateApplicationRequestMultiError(errors)
	}

	return nil
}

// CreateApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApplicationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApplicationRequestMultiError) AllErrors() []error { return m }

// CreateApplicationRequestValidationError is the validation error returned by
// CreateApplicationRequest.Validate if the designated constraints aren't met.
type CreateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationRequestValidationError) ErrorName() string {
	return "CreateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationRequestValidationError{}

// Validate checks the field values on CreateApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateApplicationResponseMultiError, or nil if none found.
func (m *CreateApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationResponseValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateApplicationResponseMultiError(errors)
	}

	return nil
}

// CreateApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateApplicationResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApplicationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApplicationResponseMultiError) AllErrors() []error { return m }

// CreateApplicationResponseValidationError is the validation error returned by
// CreateApplicationResponse.Validate if the designated constraints aren't met.
type CreateApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationResponseValidationError) ErrorName() string {
	return "CreateApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationResponseValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsRequestMultiError, or nil if none found.
func (m *ListApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderBy

	// no validation rules for Filter

	// no validation rules for PageSize

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListApplicationsRequestMultiError(errors)
	}

	return nil
}

// ListApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsRequestMultiError) AllErrors() []error { return m }

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsResponseMultiError, or nil if none found.
func (m *ListApplicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	if len(errors) > 0 {
		return ListApplicationsResponseMultiError(errors)
	}

	return nil
}

// ListApplicationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsResponseMultiError) AllErrors() []error { return m }

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationRequestMultiError, or nil if none found.
func (m *GetApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationName

	// no validation rules for Version

	if len(errors) > 0 {
		return GetApplicationRequestMultiError(errors)
	}

	return nil
}

// GetApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by GetApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationRequestMultiError) AllErrors() []error { return m }

// GetApplicationRequestValidationError is the validation error returned by
// GetApplicationRequest.Validate if the designated constraints aren't met.
type GetApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationRequestValidationError) ErrorName() string {
	return "GetApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationRequestValidationError{}

// Validate checks the field values on GetApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationResponseMultiError, or nil if none found.
func (m *GetApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationResponseValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationResponseMultiError(errors)
	}

	return nil
}

// GetApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by GetApplicationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationResponseMultiError) AllErrors() []error { return m }

// GetApplicationResponseValidationError is the validation error returned by
// GetApplicationResponse.Validate if the designated constraints aren't met.
type GetApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationResponseValidationError) ErrorName() string {
	return "GetApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationResponseValidationError{}

// Validate checks the field values on GetApplicationReferenceCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetApplicationReferenceCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationReferenceCountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetApplicationReferenceCountRequestMultiError, or nil if none found.
func (m *GetApplicationReferenceCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationReferenceCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationName

	// no validation rules for Version

	if len(errors) > 0 {
		return GetApplicationReferenceCountRequestMultiError(errors)
	}

	return nil
}

// GetApplicationReferenceCountRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetApplicationReferenceCountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationReferenceCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationReferenceCountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationReferenceCountRequestMultiError) AllErrors() []error { return m }

// GetApplicationReferenceCountRequestValidationError is the validation error
// returned by GetApplicationReferenceCountRequest.Validate if the designated
// constraints aren't met.
type GetApplicationReferenceCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationReferenceCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationReferenceCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationReferenceCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationReferenceCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationReferenceCountRequestValidationError) ErrorName() string {
	return "GetApplicationReferenceCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationReferenceCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationReferenceCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationReferenceCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationReferenceCountRequestValidationError{}

// Validate checks the field values on GetApplicationReferenceCountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetApplicationReferenceCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationReferenceCountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetApplicationReferenceCountResponseMultiError, or nil if none found.
func (m *GetApplicationReferenceCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationReferenceCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReferenceCount

	if len(errors) > 0 {
		return GetApplicationReferenceCountResponseMultiError(errors)
	}

	return nil
}

// GetApplicationReferenceCountResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetApplicationReferenceCountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationReferenceCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationReferenceCountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationReferenceCountResponseMultiError) AllErrors() []error { return m }

// GetApplicationReferenceCountResponseValidationError is the validation error
// returned by GetApplicationReferenceCountResponse.Validate if the designated
// constraints aren't met.
type GetApplicationReferenceCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationReferenceCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationReferenceCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationReferenceCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationReferenceCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationReferenceCountResponseValidationError) ErrorName() string {
	return "GetApplicationReferenceCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationReferenceCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationReferenceCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationReferenceCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationReferenceCountResponseValidationError{}

// Validate checks the field values on GetApplicationVersionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationVersionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetApplicationVersionsRequestMultiError, or nil if none found.
func (m *GetApplicationVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationName

	if len(errors) > 0 {
		return GetApplicationVersionsRequestMultiError(errors)
	}

	return nil
}

// GetApplicationVersionsRequestMultiError is an error wrapping multiple
// validation errors returned by GetApplicationVersionsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetApplicationVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationVersionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationVersionsRequestMultiError) AllErrors() []error { return m }

// GetApplicationVersionsRequestValidationError is the validation error
// returned by GetApplicationVersionsRequest.Validate if the designated
// constraints aren't met.
type GetApplicationVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationVersionsRequestValidationError) ErrorName() string {
	return "GetApplicationVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationVersionsRequestValidationError{}

// Validate checks the field values on GetApplicationVersionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationVersionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetApplicationVersionsResponseMultiError, or nil if none found.
func (m *GetApplicationVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplication() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApplicationVersionsResponseValidationError{
						field:  fmt.Sprintf("Application[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApplicationVersionsResponseValidationError{
						field:  fmt.Sprintf("Application[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApplicationVersionsResponseValidationError{
					field:  fmt.Sprintf("Application[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApplicationVersionsResponseMultiError(errors)
	}

	return nil
}

// GetApplicationVersionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetApplicationVersionsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetApplicationVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationVersionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationVersionsResponseMultiError) AllErrors() []error { return m }

// GetApplicationVersionsResponseValidationError is the validation error
// returned by GetApplicationVersionsResponse.Validate if the designated
// constraints aren't met.
type GetApplicationVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationVersionsResponseValidationError) ErrorName() string {
	return "GetApplicationVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationVersionsResponseValidationError{}

// Validate checks the field values on UpdateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApplicationRequestMultiError, or nil if none found.
func (m *UpdateApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationName

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateApplicationRequestValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateApplicationRequestValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationRequestValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateApplicationRequestMultiError(errors)
	}

	return nil
}

// UpdateApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationRequestMultiError) AllErrors() []error { return m }

// UpdateApplicationRequestValidationError is the validation error returned by
// UpdateApplicationRequest.Validate if the designated constraints aren't met.
type UpdateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationRequestValidationError) ErrorName() string {
	return "UpdateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationRequestValidationError{}

// Validate checks the field values on DeleteApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApplicationRequestMultiError, or nil if none found.
func (m *DeleteApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationName

	// no validation rules for Version

	if len(errors) > 0 {
		return DeleteApplicationRequestMultiError(errors)
	}

	return nil
}

// DeleteApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationRequestMultiError) AllErrors() []error { return m }

// DeleteApplicationRequestValidationError is the validation error returned by
// DeleteApplicationRequest.Validate if the designated constraints aren't met.
type DeleteApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRequestValidationError) ErrorName() string {
	return "DeleteApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRequestValidationError{}

// Validate checks the field values on WatchApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchApplicationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchApplicationsRequestMultiError, or nil if none found.
func (m *WatchApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for NoReplay

	if len(errors) > 0 {
		return WatchApplicationsRequestMultiError(errors)
	}

	return nil
}

// WatchApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by WatchApplicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchApplicationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchApplicationsRequestMultiError) AllErrors() []error { return m }

// WatchApplicationsRequestValidationError is the validation error returned by
// WatchApplicationsRequest.Validate if the designated constraints aren't met.
type WatchApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchApplicationsRequestValidationError) ErrorName() string {
	return "WatchApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchApplicationsRequestValidationError{}

// Validate checks the field values on WatchApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchApplicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchApplicationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchApplicationsResponseMultiError, or nil if none found.
func (m *WatchApplicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchApplicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchApplicationsResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchApplicationsResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchApplicationsResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchApplicationsResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchApplicationsResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchApplicationsResponseValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchApplicationsResponseMultiError(errors)
	}

	return nil
}

// WatchApplicationsResponseMultiError is an error wrapping multiple validation
// errors returned by WatchApplicationsResponse.ValidateAll() if the
// designated constraints aren't met.
type WatchApplicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchApplicationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchApplicationsResponseMultiError) AllErrors() []error { return m }

// WatchApplicationsResponseValidationError is the validation error returned by
// WatchApplicationsResponse.Validate if the designated constraints aren't met.
type WatchApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchApplicationsResponseValidationError) ErrorName() string {
	return "WatchApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchApplicationsResponseValidationError{}

// Validate checks the field values on CreateArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArtifactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArtifactRequestMultiError, or nil if none found.
func (m *CreateArtifactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArtifactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArtifact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateArtifactRequestValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateArtifactRequestValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactRequestValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateArtifactRequestMultiError(errors)
	}

	return nil
}

// CreateArtifactRequestMultiError is an error wrapping multiple validation
// errors returned by CreateArtifactRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateArtifactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArtifactRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArtifactRequestMultiError) AllErrors() []error { return m }

// CreateArtifactRequestValidationError is the validation error returned by
// CreateArtifactRequest.Validate if the designated constraints aren't met.
type CreateArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactRequestValidationError) ErrorName() string {
	return "CreateArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactRequestValidationError{}

// Validate checks the field values on CreateArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArtifactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArtifactResponseMultiError, or nil if none found.
func (m *CreateArtifactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArtifactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArtifact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateArtifactResponseValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateArtifactResponseValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactResponseValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateArtifactResponseMultiError(errors)
	}

	return nil
}

// CreateArtifactResponseMultiError is an error wrapping multiple validation
// errors returned by CreateArtifactResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateArtifactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArtifactResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArtifactResponseMultiError) AllErrors() []error { return m }

// CreateArtifactResponseValidationError is the validation error returned by
// CreateArtifactResponse.Validate if the designated constraints aren't met.
type CreateArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactResponseValidationError) ErrorName() string {
	return "CreateArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactResponseValidationError{}

// Validate checks the field values on ListArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArtifactsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArtifactsRequestMultiError, or nil if none found.
func (m *ListArtifactsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArtifactsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderBy

	// no validation rules for Filter

	// no validation rules for PageSize

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListArtifactsRequestMultiError(errors)
	}

	return nil
}

// ListArtifactsRequestMultiError is an error wrapping multiple validation
// errors returned by ListArtifactsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListArtifactsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArtifactsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArtifactsRequestMultiError) AllErrors() []error { return m }

// ListArtifactsRequestValidationError is the validation error returned by
// ListArtifactsRequest.Validate if the designated constraints aren't met.
type ListArtifactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsRequestValidationError) ErrorName() string {
	return "ListArtifactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsRequestValidationError{}

// Validate checks the field values on ListArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArtifactsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArtifactsResponseMultiError, or nil if none found.
func (m *ListArtifactsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArtifactsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArtifacts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListArtifactsResponseValidationError{
						field:  fmt.Sprintf("Artifacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListArtifactsResponseValidationError{
						field:  fmt.Sprintf("Artifacts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArtifactsResponseValidationError{
					field:  fmt.Sprintf("Artifacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	if len(errors) > 0 {
		return ListArtifactsResponseMultiError(errors)
	}

	return nil
}

// ListArtifactsResponseMultiError is an error wrapping multiple validation
// errors returned by ListArtifactsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListArtifactsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArtifactsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArtifactsResponseMultiError) AllErrors() []error { return m }

// ListArtifactsResponseValidationError is the validation error returned by
// ListArtifactsResponse.Validate if the designated constraints aren't met.
type ListArtifactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsResponseValidationError) ErrorName() string {
	return "ListArtifactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsResponseValidationError{}

// Validate checks the field values on GetArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArtifactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtifactRequestMultiError, or nil if none found.
func (m *GetArtifactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtifactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArtifactName

	if len(errors) > 0 {
		return GetArtifactRequestMultiError(errors)
	}

	return nil
}

// GetArtifactRequestMultiError is an error wrapping multiple validation errors
// returned by GetArtifactRequest.ValidateAll() if the designated constraints
// aren't met.
type GetArtifactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtifactRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtifactRequestMultiError) AllErrors() []error { return m }

// GetArtifactRequestValidationError is the validation error returned by
// GetArtifactRequest.Validate if the designated constraints aren't met.
type GetArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactRequestValidationError) ErrorName() string {
	return "GetArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactRequestValidationError{}

// Validate checks the field values on GetArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArtifactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtifactResponseMultiError, or nil if none found.
func (m *GetArtifactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtifactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArtifact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetArtifactResponseValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetArtifactResponseValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArtifactResponseValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetArtifactResponseMultiError(errors)
	}

	return nil
}

// GetArtifactResponseMultiError is an error wrapping multiple validation
// errors returned by GetArtifactResponse.ValidateAll() if the designated
// constraints aren't met.
type GetArtifactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtifactResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtifactResponseMultiError) AllErrors() []error { return m }

// GetArtifactResponseValidationError is the validation error returned by
// GetArtifactResponse.Validate if the designated constraints aren't met.
type GetArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactResponseValidationError) ErrorName() string {
	return "GetArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactResponseValidationError{}

// Validate checks the field values on UpdateArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArtifactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArtifactRequestMultiError, or nil if none found.
func (m *UpdateArtifactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArtifactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArtifactName

	if all {
		switch v := interface{}(m.GetArtifact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateArtifactRequestValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateArtifactRequestValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateArtifactRequestValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateArtifactRequestMultiError(errors)
	}

	return nil
}

// UpdateArtifactRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateArtifactRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateArtifactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArtifactRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArtifactRequestMultiError) AllErrors() []error { return m }

// UpdateArtifactRequestValidationError is the validation error returned by
// UpdateArtifactRequest.Validate if the designated constraints aren't met.
type UpdateArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArtifactRequestValidationError) ErrorName() string {
	return "UpdateArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArtifactRequestValidationError{}

// Validate checks the field values on DeleteArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArtifactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArtifactRequestMultiError, or nil if none found.
func (m *DeleteArtifactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArtifactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArtifactName

	if len(errors) > 0 {
		return DeleteArtifactRequestMultiError(errors)
	}

	return nil
}

// DeleteArtifactRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteArtifactRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteArtifactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArtifactRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArtifactRequestMultiError) AllErrors() []error { return m }

// DeleteArtifactRequestValidationError is the validation error returned by
// DeleteArtifactRequest.Validate if the designated constraints aren't met.
type DeleteArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArtifactRequestValidationError) ErrorName() string {
	return "DeleteArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArtifactRequestValidationError{}

// Validate checks the field values on WatchArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchArtifactsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchArtifactsRequestMultiError, or nil if none found.
func (m *WatchArtifactsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchArtifactsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for NoReplay

	if len(errors) > 0 {
		return WatchArtifactsRequestMultiError(errors)
	}

	return nil
}

// WatchArtifactsRequestMultiError is an error wrapping multiple validation
// errors returned by WatchArtifactsRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchArtifactsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchArtifactsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchArtifactsRequestMultiError) AllErrors() []error { return m }

// WatchArtifactsRequestValidationError is the validation error returned by
// WatchArtifactsRequest.Validate if the designated constraints aren't met.
type WatchArtifactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchArtifactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchArtifactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchArtifactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchArtifactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchArtifactsRequestValidationError) ErrorName() string {
	return "WatchArtifactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchArtifactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchArtifactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchArtifactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchArtifactsRequestValidationError{}

// Validate checks the field values on WatchArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchArtifactsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchArtifactsResponseMultiError, or nil if none found.
func (m *WatchArtifactsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchArtifactsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchArtifactsResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchArtifactsResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchArtifactsResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArtifact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchArtifactsResponseValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchArtifactsResponseValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchArtifactsResponseValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchArtifactsResponseMultiError(errors)
	}

	return nil
}

// WatchArtifactsResponseMultiError is an error wrapping multiple validation
// errors returned by WatchArtifactsResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchArtifactsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchArtifactsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchArtifactsResponseMultiError) AllErrors() []error { return m }

// WatchArtifactsResponseValidationError is the validation error returned by
// WatchArtifactsResponse.Validate if the designated constraints aren't met.
type WatchArtifactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchArtifactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchArtifactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchArtifactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchArtifactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchArtifactsResponseValidationError) ErrorName() string {
	return "WatchArtifactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchArtifactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchArtifactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchArtifactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchArtifactsResponseValidationError{}
